; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27030.1 

	TITLE	c:\Dev\Tetris\src\highscores.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG57460 DB	'Highscores', 00H
	ORG $+1
$SG57462 DB	'%d.%s %d', 00H
	ORG $+3
$SG57464 DB	'No highscores yet', 00H
CONST	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	_vsnprintf
PUBLIC	_snprintf
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
PUBLIC	?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??0locale@std@@QAE@XZ				; std::locale::locale
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??_Glocale@std@@QAEPAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??0codecvt_base@std@@QAE@I@Z			; std::codecvt_base::codecvt_base
PUBLIC	?always_noconv@codecvt_base@std@@QBE_NXZ	; std::codecvt_base::always_noconv
PUBLIC	??1codecvt_base@std@@UAE@XZ			; std::codecvt_base::~codecvt_base
PUBLIC	?do_always_noconv@codecvt_base@std@@MBE_NXZ	; std::codecvt_base::do_always_noconv
PUBLIC	?do_max_length@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_max_length
PUBLIC	?do_encoding@codecvt_base@std@@MBEHXZ		; std::codecvt_base::do_encoding
PUBLIC	??_Gcodecvt_base@std@@UAEPAXI@Z			; std::codecvt_base::`scalar deleting destructor'
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z	; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?is@?$ctype@D@std@@QBE_NFD@Z			; std::ctype<char>::is
PUBLIC	?widen@?$ctype@D@std@@QBEDD@Z			; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NABVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UAE@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QAEXH@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	??1ios_base@std@@UAE@XZ				; std::ios_base::~ios_base
PUBLIC	??0ios_base@std@@IAE@XZ				; std::ios_base::ios_base
PUBLIC	?_Init@ios_base@std@@IAEXXZ			; std::ios_base::_Init
PUBLIC	??_Gios_base@std@@UAEPAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??0?$allocator@PAUHighscoreHeader@core@@@std@@QAE@XZ ; std::allocator<core::HighscoreHeader *>::allocator<core::HighscoreHeader *>
PUBLIC	?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::deallocate
PUBLIC	?allocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEPAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAIABV?$allocator@PAUHighscoreHeader@core@@@2@@Z ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second
PUBLIC	??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
PUBLIC	??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::~vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
PUBLIC	?push_back@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::push_back
PUBLIC	?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
PUBLIC	?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::max_size
PUBLIC	?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABE_NXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Has_unused_capacity
PUBLIC	??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
PUBLIC	?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00U?$integral_constant@_N$00@2@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEII@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXQAPAUHighscoreHeader@core@@II@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@CAXXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Orphan_range
PUBLIC	??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z ; core::Highscores::Highscores
PUBLIC	?LoadRecords@Highscores@core@@QAEXXZ		; core::Highscores::LoadRecords
PUBLIC	?DumpRecords@Highscores@core@@QAEXXZ		; core::Highscores::DumpRecords
PUBLIC	?WriteRecord@Highscores@core@@QAE_NPBDH@Z	; core::Highscores::WriteRecord
PUBLIC	?IsHighscore@Highscores@core@@QAE_NH@Z		; core::Highscores::IsHighscore
PUBLIC	?Update@Highscores@core@@QAE?AW4GamePhase@@XZ	; core::Highscores::Update
PUBLIC	?Render@Highscores@core@@QAEXHH@Z		; core::Highscores::Render
PUBLIC	??0Color@core@@QAE@ABV01@@Z			; core::Color::Color
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
PUBLIC	??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
PUBLIC	?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
PUBLIC	?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read
PUBLIC	?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_istream<char,std::char_traits<char> >::peek
PUBLIC	??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
PUBLIC	?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
PUBLIC	?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sgetn
PUBLIC	?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z ; std::basic_ostream<char,std::char_traits<char> >::write
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$move@AAPAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::move<core::HighscoreHeader * &>
PUBLIC	??$emplace_back@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::emplace_back<core::HighscoreHeader *>
PUBLIC	??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
PUBLIC	??$_Emplace_back_with_unused_capacity@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_back_with_unused_capacity<core::HighscoreHeader *>
PUBLIC	??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z ; std::_Unfancy<core::HighscoreHeader *>
PUBLIC	??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::construct<core::HighscoreHeader *,core::HighscoreHeader *>
PUBLIC	??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_reallocate<core::HighscoreHeader *>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::in
PUBLIC	?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::out
PUBLIC	?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::unshift
PUBLIC	??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
PUBLIC	?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,_Mbstatet>::_Getcat
PUBLIC	??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
PUBLIC	?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ; std::codecvt<char,char,_Mbstatet>::_Init
PUBLIC	?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ ; std::codecvt<char,char,_Mbstatet>::do_always_noconv
PUBLIC	?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_in
PUBLIC	?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_out
PUBLIC	?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::do_unshift
PUBLIC	?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ; std::codecvt<char,char,_Mbstatet>::do_length
PUBLIC	??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor'
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Destroy_range@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ; std::_Destroy_range<std::allocator<core::HighscoreHeader *> >
PUBLIC	??$_Refancy@PAD$0A@@std@@YAPADPAD@Z		; std::_Refancy<char *,0>
PUBLIC	??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Destroy_range1@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<core::HighscoreHeader *> >
PUBLIC	??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ; std::_Uninitialized_move<core::HighscoreHeader * *,core::HighscoreHeader * *,std::allocator<core::HighscoreHeader *> >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
PUBLIC	??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z ; std::_Get_unwrapped<core::HighscoreHeader *>
PUBLIC	??$_Idl_distance@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0@Z ; std::_Idl_distance<core::HighscoreHeader * *,core::HighscoreHeader * *>
PUBLIC	??$_Idl_distance1@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<core::HighscoreHeader * *,core::HighscoreHeader * *>
PUBLIC	??$_Get_unwrapped_n@PAUHighscoreHeader@core@@H$0A@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@H@Z ; std::_Get_unwrapped_n<core::HighscoreHeader *,int,0>
PUBLIC	??$_Ptr_move_cat@PAUHighscoreHeader@core@@PAU12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAUHighscoreHeader@core@@0@Z ; std::_Ptr_move_cat<core::HighscoreHeader *,core::HighscoreHeader *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAUHighscoreHeader@core@@PAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@00AAV?$allocator@PAUHighscoreHeader@core@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<core::HighscoreHeader *,core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
PUBLIC	??$_Seek_wrapped@PAUHighscoreHeader@core@@@std@@YAXAAPAPAUHighscoreHeader@core@@QAPAU12@@Z ; std::_Seek_wrapped<core::HighscoreHeader *>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$_Copy_memmove@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@00@Z ; std::_Copy_memmove<core::HighscoreHeader * *,core::HighscoreHeader * *>
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7codecvt_base@std@@6B@			; std::codecvt_base::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error@	; `string'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A	; std::codecvt<char,char,_Mbstatet>::id
PUBLIC	??_7?$codecvt@DDU_Mbstatet@@@std@@6B@		; std::codecvt<char,char,_Mbstatet>::`vftable'
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
PUBLIC	?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4codecvt_base@std@@6B@			; std::codecvt_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcodecvt_base@std@@@8			; std::codecvt_base `RTTI Type Descriptor'
PUBLIC	??_R3codecvt_base@std@@8			; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2codecvt_base@std@@8			; std::codecvt_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@codecvt_base@std@@8		; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@		; std::codecvt<char,char,_Mbstatet>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8	; std::codecvt<char,char,_Mbstatet> `RTTI Type Descriptor'
PUBLIC	??_R3?$codecvt@DDU_Mbstatet@@@std@@8		; std::codecvt<char,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$codecvt@DDU_Mbstatet@@@std@@8		; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8	; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_free:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	_terminate:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	__get_stream_buffer_pointers:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fgetc:PROC
EXTRN	_fgetpos:PROC
EXTRN	_fputc:PROC
EXTRN	_fread:PROC
EXTRN	_fsetpos:PROC
EXTRN	__fseeki64:PROC
EXTRN	_fwrite:PROC
EXTRN	_setvbuf:PROC
EXTRN	_ungetc:PROC
EXTRN	__lock_file:PROC
EXTRN	__unlock_file:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	__Getctype:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ecodecvt_base@std@@UAEPAXI@Z:PROC		; std::codecvt_base::`vector deleting destructor'
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z:PROC ; std::_Execute_once
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPAV12@@Z:PROC		; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UAEPAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	?Instance@Graphics@graphics@core@@SAPAV123@XZ:PROC ; core::graphics::Graphics::Instance
EXTRN	?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z:PROC ; core::graphics::Graphics::DrawText
EXTRN	?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC		; std::_Fiopen
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z:PROC ; std::codecvt<char,char,_Mbstatet>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?s_highlightColor@Palette@core@@2VColor@2@B:DWORD ; core::Palette::s_highlightColor
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::codecvt<char,char,_Mbstatet>::id
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A DQ 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA
_BSS	SEGMENT
?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA DD 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
_BSS	ENDS
;	COMDAT ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A DQ 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$codecvt@DDU_Mbstatet@@@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$codecvt@DDU_Mbstatet@@@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8 DD FLAT:??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8 ; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R2?$codecvt@DDU_Mbstatet@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$codecvt@DDU_Mbstatet@@@std@@8 ; std::codecvt<char,char,_Mbstatet>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@codecvt_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	SEGMENT
??_R3?$codecvt@DDU_Mbstatet@@@std@@8 DD 00H		; std::codecvt<char,char,_Mbstatet>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8
data$r	SEGMENT
??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::codecvt<char,char,_Mbstatet> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$codecvt@DDU_Mbstatet@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@
rdata$r	SEGMENT
??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@ DD 00H		; std::codecvt<char,char,_Mbstatet>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$codecvt@DDU_Mbstatet@@@std@@@8
	DD	FLAT:??_R3?$codecvt@DDU_Mbstatet@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@codecvt_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@codecvt_base@std@@8 DD FLAT:??_R0?AVcodecvt_base@std@@@8 ; std::codecvt_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2codecvt_base@std@@8
rdata$r	SEGMENT
??_R2codecvt_base@std@@8 DD FLAT:??_R1A@?0A@EA@codecvt_base@std@@8 ; std::codecvt_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3codecvt_base@std@@8
rdata$r	SEGMENT
??_R3codecvt_base@std@@8 DD 00H				; std::codecvt_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcodecvt_base@std@@@8
data$r	SEGMENT
??_R0?AVcodecvt_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::codecvt_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcodecvt_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4codecvt_base@std@@6B@
rdata$r	SEGMENT
??_R4codecvt_base@std@@6B@ DD 00H			; std::codecvt_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcodecvt_base@std@@@8
	DD	FLAT:??_R3codecvt_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	068H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	08H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	018H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 00H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVios_base@std@@@8
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@
CONST	SEGMENT
??_7?$codecvt@DDU_Mbstatet@@@std@@6B@ DD FLAT:??_R4?$codecvt@DDU_Mbstatet@@@std@@6B@ ; std::codecvt<char,char,_Mbstatet>::`vftable'
	DD	FLAT:??_E?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
	DD	FLAT:?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
	DD	FLAT:?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	068H
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	08H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_istream<char,std::char_traits<char> >::`vbtable'
	DD	018H
CONST	ENDS
;	COMDAT ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_istream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_istream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DD FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DD	FLAT:??_Eios_base@std@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error@ DB 'iostream stream error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7codecvt_base@std@@6B@
CONST	SEGMENT
??_7codecvt_base@std@@6B@ DD FLAT:??_R4codecvt_base@std@@6B@ ; std::codecvt_base::`vftable'
	DD	FLAT:??_Ecodecvt_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_always_noconv@codecvt_base@std@@MBE_NXZ
	DD	FLAT:?do_max_length@codecvt_base@std@@MBEHXZ
	DD	FLAT:?do_encoding@codecvt_base@std@@MBEHXZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$0
__unwindtable$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$0
__tryblocktable$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$3
__unwindtable$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z
	DD	01H
	DD	FLAT:__tryblocktable$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$0
__tryblocktable$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$3
__unwindtable$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	DD	01H
	DD	FLAT:__tryblocktable$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$0
__tryblocktable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$3
__unwindtable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	DD	01H
	DD	FLAT:__tryblocktable$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$0
__tryblocktable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$3
__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
__ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
__ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?DumpRecords@Highscores@core@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DumpRecords@Highscores@core@@QAEXXZ$0
__unwindtable$?LoadRecords@Highscores@core@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadRecords@Highscores@core@@QAEXXZ$0
__unwindtable$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z$0
__ehfuncinfo$?DumpRecords@Highscores@core@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DumpRecords@Highscores@core@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?LoadRecords@Highscores@core@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadRecords@Highscores@core@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ios_base@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?iostream_category@std@@YAABVerror_category@1@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ctype@D@std@@MAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@00@Z PROC ; std::_Copy_memmove<core::HighscoreHeader * *,core::HighscoreHeader * *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000f	89 4d f0	 mov	 DWORD PTR __Last_ch$[ebp], ecx

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

  00012	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00015	89 55 f8	 mov	 DWORD PTR __Dest_ch$[ebp], edx

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 fc	 mov	 edx, DWORD PTR __First_ch$[ebp]
  00028	52		 push	 edx
  00029	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 _memmove
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00038	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Copy_memmove@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<core::HighscoreHeader * *,core::HighscoreHeader * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00007	8b 45 0c	 mov	 eax, DWORD PTR _<_Val2_0>$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
  00010	83 c4 04	 add	 esp, 4
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	89 11		 mov	 DWORD PTR [ecx], edx

; 279  : 		}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@PAUHighscoreHeader@core@@@std@@YAXAAPAPAUHighscoreHeader@core@@QAPAU12@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@PAUHighscoreHeader@core@@@std@@YAXAAPAPAUHighscoreHeader@core@@QAPAU12@@Z PROC ; std::_Seek_wrapped<core::HighscoreHeader *>, COMDAT

; 871  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 872  : 	_It = _UIt;

  00003	8b 45 08	 mov	 eax, DWORD PTR __It$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __UIt$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 873  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Seek_wrapped@PAUHighscoreHeader@core@@@std@@YAXAAPAPAUHighscoreHeader@core@@QAPAU12@@Z ENDP ; std::_Seek_wrapped<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUHighscoreHeader@core@@PAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@00AAV?$allocator@PAUHighscoreHeader@core@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAUHighscoreHeader@core@@PAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@00AAV?$allocator@PAUHighscoreHeader@core@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<core::HighscoreHeader *,core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@00@Z ; std::_Copy_memmove<core::HighscoreHeader * *,core::HighscoreHeader * *>
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 245  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PAUHighscoreHeader@core@@PAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@00AAV?$allocator@PAUHighscoreHeader@core@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<core::HighscoreHeader *,core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@PAUHighscoreHeader@core@@PAU12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAUHighscoreHeader@core@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@PAUHighscoreHeader@core@@PAU12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAUHighscoreHeader@core@@0@Z PROC ; std::_Ptr_move_cat<core::HighscoreHeader *,core::HighscoreHeader *>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1087 : 	return {};

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Ptr_move_cat@PAUHighscoreHeader@core@@PAU12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAUHighscoreHeader@core@@0@Z ENDP ; std::_Ptr_move_cat<core::HighscoreHeader *,core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PAUHighscoreHeader@core@@H$0A@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@PAUHighscoreHeader@core@@H$0A@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@H@Z PROC ; std::_Get_unwrapped_n<core::HighscoreHeader *,int,0>, COMDAT

; 808  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 809  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 810  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped_n@PAUHighscoreHeader@core@@H$0A@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@H@Z ENDP ; std::_Get_unwrapped_n<core::HighscoreHeader *,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<core::HighscoreHeader * *,core::HighscoreHeader * *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0000d	c1 f8 02	 sar	 eax, 2

; 969  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Idl_distance1@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<core::HighscoreHeader * *,core::HighscoreHeader * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0@Z PROC ; std::_Idl_distance<core::HighscoreHeader * *,core::HighscoreHeader * *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

  00004	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  00008	50		 push	 eax
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ??$_Idl_distance1@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<core::HighscoreHeader * *,core::HighscoreHeader * *>
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 976  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Idl_distance@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0@Z ENDP ; std::_Idl_distance<core::HighscoreHeader * *,core::HighscoreHeader * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z PROC ; std::_Get_unwrapped<core::HighscoreHeader *>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 663  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z ENDP ; std::_Get_unwrapped<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>, COMDAT
; _this$ = ecx

; 2144 : 		{	// construct with compatible pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2143 : 		: _Mypair(_Zero_then_variadic_args_t(), _Ptr)

  00009	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  0000c	50		 push	 eax
  0000d	0f b6 4d ff	 movzx	 ecx, BYTE PTR $T1[ebp]
  00011	51		 push	 ecx
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>

; 2145 : 		}

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::codecvt<char,char,_Mbstatet>::id'', COMDAT

; 954  : 	__PURE_APPDOMAIN_GLOBAL locale::id codecvt<_Elem, _Byte, _Statype>::id;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<char,char,_Mbstatet>::id
  0000a	e8 00 00 00 00	 call	 ??0id@locale@std@@QAE@I@Z ; std::locale::id::id
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??__E?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::codecvt<char,char,_Mbstatet>::id''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$ = -8					; size = 4
__Result$ = -4						; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00006	c7 45 f8 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$[ebp], 1073741823 ; 3fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

  0000d	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00010	c1 e0 02	 shl	 eax, 2
  00013	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

  00016	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0001d	76 07		 jbe	 SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  0001f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00026	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 33   : 	}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z PROC ; std::_Uninitialized_move<core::HighscoreHeader * *,core::HighscoreHeader * *,std::allocator<core::HighscoreHeader *> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z ; std::_Get_unwrapped<core::HighscoreHeader *>
  0000f	83 c4 04	 add	 esp, 4
  00012	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

  00015	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Get_unwrapped@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@@Z ; std::_Get_unwrapped<core::HighscoreHeader *>
  0001e	83 c4 04	 add	 esp, 4
  00021	89 45 f0	 mov	 DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00024	8d 55 f0	 lea	 edx, DWORD PTR __ULast$[ebp]
  00027	52		 push	 edx
  00028	8d 45 f8	 lea	 eax, DWORD PTR __UFirst$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??$_Idl_distance@PAPAUHighscoreHeader@core@@PAPAU12@@std@@YAHABQAPAUHighscoreHeader@core@@0@Z ; std::_Idl_distance<core::HighscoreHeader * *,core::HighscoreHeader * *>
  00031	83 c4 08	 add	 esp, 8
  00034	50		 push	 eax
  00035	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@PAUHighscoreHeader@core@@H$0A@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@H@Z ; std::_Get_unwrapped_n<core::HighscoreHeader *,int,0>
  0003e	83 c4 08	 add	 esp, 8
  00041	89 45 f4	 mov	 DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

  00044	0f b6 55 ff	 movzx	 edx, BYTE PTR $T2[ebp]
  00048	52		 push	 edx
  00049	8d 45 f4	 lea	 eax, DWORD PTR __UDest$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d f8	 lea	 ecx, DWORD PTR __UFirst$[ebp]
  00050	51		 push	 ecx
  00051	8d 55 fe	 lea	 edx, DWORD PTR $T1[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@PAUHighscoreHeader@core@@PAU12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAUHighscoreHeader@core@@0@Z ; std::_Ptr_move_cat<core::HighscoreHeader *,core::HighscoreHeader *>
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	8a 00		 mov	 al, BYTE PTR [eax]
  0005f	0f b6 c8	 movzx	 ecx, al
  00062	51		 push	 ecx
  00063	8b 55 14	 mov	 edx, DWORD PTR __Al$[ebp]
  00066	52		 push	 edx
  00067	8b 45 f4	 mov	 eax, DWORD PTR __UDest$[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR __ULast$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 f8	 mov	 edx, DWORD PTR __UFirst$[ebp]
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PAUHighscoreHeader@core@@PAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@00AAV?$allocator@PAUHighscoreHeader@core@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<core::HighscoreHeader *,core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
  00078	83 c4 18	 add	 esp, 24			; 00000018H
  0007b	50		 push	 eax
  0007c	8d 45 10	 lea	 eax, DWORD PTR __Dest$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Seek_wrapped@PAUHighscoreHeader@core@@@std@@YAXAAPAPAUHighscoreHeader@core@@QAPAU12@@Z ; std::_Seek_wrapped<core::HighscoreHeader *>
  00085	83 c4 08	 add	 esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

  00088	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ENDP ; std::_Uninitialized_move<core::HighscoreHeader * *,core::HighscoreHeader * *,std::allocator<core::HighscoreHeader *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<core::HighscoreHeader *> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1146 : 		// nothing to do
; 1147 : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range1@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<core::HighscoreHeader *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 fc	 mov	 DWORD PTR __Block_size$[ebp], eax

; 94   : 	if (_Block_size <= _Bytes)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR __Block_size$[ebp]
  00012	3b 4d 08	 cmp	 ecx, DWORD PTR __Bytes$[ebp]
  00015	77 07		 ja	 SHORT $LN8@Allocate_m

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);

  00017	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001e	8b 55 fc	 mov	 edx, DWORD PTR __Block_size$[ebp]
  00021	52		 push	 edx
  00022	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00027	83 c4 04	 add	 esp, 4
  0002a	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0002d	83 7d f8 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  00031	74 02		 je	 SHORT $LN7@Allocate_m
  00033	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0003a	33 c0		 xor	 eax, eax
  0003c	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  0003e	33 c9		 xor	 ecx, ecx
  00040	75 eb		 jne	 SHORT $LN4@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00042	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00045	83 c2 23	 add	 edx, 35			; 00000023H
  00048	83 e2 e0	 and	 edx, -32		; ffffffe0H
  0004b	89 55 f4	 mov	 DWORD PTR __Ptr$[ebp], edx

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0004e	b8 04 00 00 00	 mov	 eax, 4
  00053	6b c8 ff	 imul	 ecx, eax, -1
  00056	8b 55 f4	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00059	8b 45 f8	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  0005c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;
; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

  0005f	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 110  : 	}

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00010	83 c4 04	 add	 esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 288  : 		}

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Storage_ptr$ = 12					; size = 4
___formal$ = 16						; size = 4
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z PROC ; std::_Immortalize_impl<std::_Iostream_error_category>, COMDAT

; 600  : 	{	// adapt True Placement New to _Execute_once

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 601  : 	::new (_Storage_ptr) _Ty();

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Storage_ptr$[ebp]
  00007	50		 push	 eax
  00008	6a 08		 push	 8
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0000f	83 c4 08	 add	 esp, 8
  00012	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00018	e8 00 00 00 00	 call	 ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category

; 602  : 	return (1);

  0001d	b8 01 00 00 00	 mov	 eax, 1

; 603  : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ENDP ; std::_Immortalize_impl<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 2212 : 		{	// construct with pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2211 : 			: _Mybase(_Ptr)

  00026	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>

; 2213 : 		}

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 2321 : 		{	// yield ownership of pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2322 : 		pointer _Ans = get();

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  00011	89 45 f8	 mov	 DWORD PTR __Ans$[ebp], eax

; 2323 : 		this->_Myptr() = pointer();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2324 : 		return (_Ans);

  00022	8b 45 f8	 mov	 eax, DWORD PTR __Ans$[ebp]

; 2325 : 		}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get, COMDAT
; _this$ = ecx

; 2311 : 		{	// return pointer to object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2312 : 		return (this->_Myptr());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]

; 2313 : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2293 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2294 : 		if (get() != pointer())

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  0000f	85 c0		 test	 eax, eax
  00011	74 18		 je	 SHORT $LN3@unique_ptr

; 2295 : 			{
; 2296 : 			this->get_deleter()(get());

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
  00024	8b c8		 mov	 ecx, eax
  00026	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN3@unique_ptr:

; 2297 : 			}
; 2298 : 		}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2163 : 		{	// return const reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2164 : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second

; 2165 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2158 : 		{	// return reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2159 : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second

; 2160 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter, COMDAT
; _this$ = ecx

; 2148 : 		{	// return reference to deleter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2149 : 		return (_Mypair._Get_first());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first

; 2150 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv70 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 2081 : 		{	// delete a pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2082 : 		static_assert(0 < sizeof (_Ty),
; 2083 : 			"can't delete an incomplete type");
; 2084 : 		delete _Ptr;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0000f	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00012	89 4d fc	 mov	 DWORD PTR $T2[ebp], ecx
  00015	83 7d fc 00	 cmp	 DWORD PTR $T2[ebp], 0
  00019	74 13		 je	 SHORT $LN3@operator
  0001b	6a 01		 push	 1
  0001d	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	ff d2		 call	 edx
  00029	89 45 f4	 mov	 DWORD PTR tv70[ebp], eax
  0002c	eb 07		 jmp	 SHORT $LN2@operator
$LN3@operator:
  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN2@operator:

; 2085 : 		}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Adl_verify_range1<char const *,char const *>, COMDAT

; 609  : 	{	// (don't) check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 610  : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Adl_verify_range1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z PROC		; std::_Refancy<char *,0>, COMDAT

; 362  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 364  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ENDP		; std::_Refancy<char *,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z PROC ; std::_Destroy_range<std::allocator<core::HighscoreHeader *> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

  00004	33 c0		 xor	 eax, eax
  00006	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00009	0f b6 4d ff	 movzx	 ecx, BYTE PTR $T1[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 10	 mov	 edx, DWORD PTR __Al$[ebp]
  00011	52		 push	 edx
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<core::HighscoreHeader *> >
  0001f	83 c4 10	 add	 esp, 16			; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<core::HighscoreHeader *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 10		 jb	 SHORT $LN2@Deallocate

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0000c	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 08	 lea	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00019	83 c4 08	 add	 esp, 8
$LN2@Deallocate:

; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  0001c	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  0001f	52		 push	 edx
  00020	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8

; 208  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0e		 jb	 SHORT $LN2@Allocate

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0000c	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00015	83 c4 04	 add	 esp, 4
  00018	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0001a	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001e	74 0e		 je	 SHORT $LN3@Allocate

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
  00029	83 c4 04	 add	 esp, 4
  0002c	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0002e	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 194  : 	}

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z PROC ; std::addressof<std::codecvt<char,char,_Mbstatet> const >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ENDP ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00007	50		 push	 eax
  00008	6a 04		 push	 4
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0000f	83 c4 08	 add	 esp, 8
  00012	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$forward@ABQAD@std@@YAABQADABQAD@Z ; std::forward<char * const &>
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	89 02		 mov	 DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Raw_new$ = -40					; size = 4
__Old_ptr$1 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__Al$ = -20						; size = 4
__New_ptr$ = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

  00014	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001a	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00025	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00028	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0002b	73 05		 jae	 SHORT $LN2@Reallocate

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0002d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00032	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00035	03 55 08	 add	 edx, DWORD PTR __Size_increase$[ebp]
  00038	89 55 e8	 mov	 DWORD PTR __New_size$[ebp], edx

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00041	89 4d e0	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3930 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00044	8b 55 e8	 mov	 edx, DWORD PTR __New_size$[ebp]
  00047	52		 push	 edx
  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00050	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3931 : 		auto& _Al = this->_Getal();

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0005b	89 45 ec	 mov	 DWORD PTR __Al$[ebp], eax

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005e	8b 45 e4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  00068	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0006d	89 45 f0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0007b	8b 55 e8	 mov	 edx, DWORD PTR __New_size$[ebp]
  0007e	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 3935 : 		_My_data._Myres = _New_capacity;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0008a	8b 55 f0	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00093	83 c4 04	 add	 esp, 4
  00096	89 45 d8	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00099	83 7d e0 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009d	72 4a		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	89 4d dc	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3940 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000a7	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  000aa	52		 push	 edx
  000ab	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 dc	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000bc	83 c4 04	 add	 esp, 4
  000bf	50		 push	 eax
  000c0	8b 45 d8	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000c3	50		 push	 eax
  000c4	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000c7	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000cc	8b 4d e0	 mov	 ecx, DWORD PTR __Old_capacity$[ebp]
  000cf	83 c1 01	 add	 ecx, 1
  000d2	51		 push	 ecx
  000d3	8b 55 dc	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  000d6	52		 push	 edx
  000d7	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  000da	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000df	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e2	8b 4d f0	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000e5	89 08		 mov	 DWORD PTR [eax], ecx

; 3943 : 			}
; 3944 : 		else

  000e7	eb 39		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3945 : 			{
; 3946 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000e9	8b 55 14	 mov	 edx, DWORD PTR _<_Args_1>$[ebp]
  000ec	52		 push	 edx
  000ed	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  000f0	50		 push	 eax
  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000f8	52		 push	 edx
  000f9	8b 45 d8	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000fc	50		 push	 eax
  000fd	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  00100	e8 00 00 00 00	 call	 ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3947 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  00105	8d 4d f0	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  00108	51		 push	 ecx
  00109	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  0010c	52		 push	 edx
  0010d	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00112	83 c4 04	 add	 esp, 4
  00115	50		 push	 eax
  00116	8b 45 ec	 mov	 eax, DWORD PTR __Al$[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  0011f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3948 : 			}
; 3949 : 
; 3950 : 		return (*this);

  00122	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3951 : 		}

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 10 00	 ret	 16			; 00000010H
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00009	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  0001d	8b 45 18	 mov	 eax, DWORD PTR __Count$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00024	51		 push	 ecx
  00025	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00028	03 55 10	 add	 edx, DWORD PTR __Old_size$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00034	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  00038	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 10	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0003f	03 4d 18	 add	 ecx, DWORD PTR __Count$[ebp]
  00042	03 4d 08	 add	 ecx, DWORD PTR __New_ptr$[ebp]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0004b	83 c4 08	 add	 esp, 8

; 2587 : 			}, _Ptr, _Count));

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old_capacity$ = -24					; size = 4
__New_capacity$ = -20					; size = 4
__Al$ = -16						; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 3890 : 			{
; 3891 : 			_Xlen();	// result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();

  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00023	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00026	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00029	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002c	89 4d e8	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3896 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  0002f	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00032	52		 push	 edx
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0003b	89 45 ec	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3897 : 		auto& _Al = this->_Getal();

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00046	89 45 f0	 mov	 DWORD PTR __Al$[ebp], eax

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00049	8b 45 ec	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0004c	83 c0 01	 add	 eax, 1
  0004f	50		 push	 eax
  00050	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00058	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 3900 : 		_My_data._Mysize = _New_size;

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00066	8b 55 08	 mov	 edx, DWORD PTR __New_size$[ebp]
  00069	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 3901 : 		_My_data._Myres = _New_capacity;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00072	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3902 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00075	8b 55 10	 mov	 edx, DWORD PTR _<_Args_0>$[ebp]
  00078	52		 push	 edx
  00079	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00080	51		 push	 ecx
  00081	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00086	83 c4 04	 add	 esp, 4
  00089	50		 push	 eax
  0008a	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  0008d	e8 00 00 00 00	 call	 ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00092	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00096	72 1f		 jb	 SHORT $LN3@Reallocate

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  00098	8b 55 e8	 mov	 edx, DWORD PTR __Old_capacity$[ebp]
  0009b	83 c2 01	 add	 edx, 1
  0009e	52		 push	 edx
  0009f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	51		 push	 ecx
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3906 : 			_My_data._Bx._Ptr = _New_ptr;

  000ad	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000b0	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000b3	89 02		 mov	 DWORD PTR [edx], eax

; 3907 : 			}
; 3908 : 		else

  000b5	eb 1d		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3909 : 			{
; 3910 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000b7	8d 4d f4	 lea	 ecx, DWORD PTR __New_ptr$[ebp]
  000ba	51		 push	 ecx
  000bb	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000c4	83 c4 04	 add	 esp, 4
  000c7	50		 push	 eax
  000c8	8b 45 f0	 mov	 eax, DWORD PTR __Al$[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3911 : 			}
; 3912 : 
; 3913 : 		return (*this);

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3914 : 		}

  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2669 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2670 : 			_Traits::assign(_New_ptr[_Count], _Elem());

  0001d	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  00021	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00028	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00031	83 c4 08	 add	 esp, 8

; 2671 : 			}, _Ptr));

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z
_TEXT	SEGMENT
__Raw_new$ = -40					; size = 4
__Old_ptr$1 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__Al$ = -20						; size = 4
__New_ptr$ = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

  00014	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001a	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00025	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00028	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  0002b	73 05		 jae	 SHORT $LN2@Reallocate

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0002d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00032	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  00035	03 55 08	 add	 edx, DWORD PTR __Size_increase$[ebp]
  00038	89 55 e8	 mov	 DWORD PTR __New_size$[ebp], edx

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00041	89 4d e0	 mov	 DWORD PTR __Old_capacity$[ebp], ecx

; 3930 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

  00044	8b 55 e8	 mov	 edx, DWORD PTR __New_size$[ebp]
  00047	52		 push	 edx
  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00050	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 3931 : 		auto& _Al = this->_Getal();

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0005b	89 45 ec	 mov	 DWORD PTR __Al$[ebp], eax

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0005e	8b 45 e4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00061	83 c0 01	 add	 eax, 1
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  00068	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0006d	89 45 f0	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

  00078	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0007b	8b 55 e8	 mov	 edx, DWORD PTR __New_size$[ebp]
  0007e	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 3935 : 		_My_data._Myres = _New_capacity;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00087	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  0008a	8b 55 f0	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00093	83 c4 04	 add	 esp, 4
  00096	89 45 d8	 mov	 DWORD PTR __Raw_new$[ebp], eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00099	83 7d e0 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009d	72 47		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	89 4d dc	 mov	 DWORD PTR __Old_ptr$1[ebp], ecx

; 3940 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  000a7	0f b6 55 10	 movzx	 edx, BYTE PTR _<_Args_0>$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d dc	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000b9	83 c4 04	 add	 esp, 4
  000bc	50		 push	 eax
  000bd	8b 55 d8	 mov	 edx, DWORD PTR __Raw_new$[ebp]
  000c0	52		 push	 edx
  000c1	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000c4	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000c9	8b 45 e0	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000cc	83 c0 01	 add	 eax, 1
  000cf	50		 push	 eax
  000d0	8b 4d dc	 mov	 ecx, DWORD PTR __Old_ptr$1[ebp]
  000d3	51		 push	 ecx
  000d4	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  000d7	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  000dc	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000df	8b 45 f0	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  000e2	89 02		 mov	 DWORD PTR [edx], eax

; 3943 : 			}
; 3944 : 		else

  000e4	eb 36		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3945 : 			{
; 3946 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  000e6	0f b6 4d 10	 movzx	 ecx, BYTE PTR _<_Args_0>$[ebp]
  000ea	51		 push	 ecx
  000eb	8b 55 f4	 mov	 edx, DWORD PTR __Old_size$[ebp]
  000ee	52		 push	 edx
  000ef	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d d8	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000f6	51		 push	 ecx
  000f7	8d 4d 0c	 lea	 ecx, DWORD PTR __Fn$[ebp]
  000fa	e8 00 00 00 00	 call	 ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()

; 3947 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

  000ff	8d 55 f0	 lea	 edx, DWORD PTR __New_ptr$[ebp]
  00102	52		 push	 edx
  00103	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  0010c	83 c4 04	 add	 esp, 4
  0010f	50		 push	 eax
  00110	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  00113	51		 push	 ecx
  00114	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Reallocate:

; 3948 : 			}
; 3949 : 
; 3950 : 		return (*this);

  0011c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3951 : 		}

  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ch$ = 20						; size = 1
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z PROC ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator(), COMDAT
; _this$ = ecx

; 3241 : 				const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3242 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00009	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR __Old_ptr$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR __New_ptr$[ebp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3243 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);

  0001d	8d 45 14	 lea	 eax, DWORD PTR __Ch$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  00024	03 4d 10	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00027	51		 push	 ecx
  00028	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0002d	83 c4 08	 add	 esp, 8

; 3244 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  00030	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  00034	8d 55 ff	 lea	 edx, DWORD PTR $T1[ebp]
  00037	52		 push	 edx
  00038	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  0003e	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00048	83 c4 08	 add	 esp, 8

; 3245 : 			}, _Ch);

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 10 00	 ret	 16			; 00000010H
??R<lambda_15711c68e099a15a58f4d77303cb286d>@@QBEXQADQBDID@Z ENDP ; <lambda_15711c68e099a15a58f4d77303cb286d>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1651 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1652 : 		return (const_cast<reference>(_Mybase::operator*()));

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 1653 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1647 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1646 : 		: _Mybase(_Parg, _Pstring)

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 1648 : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00010	73 08		 jae	 SHORT $LN3@Max_value
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00015	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00018	eb 06		 jmp	 SHORT $LN4@Max_value
$LN3@Max_value:
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001d	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv65[ebp]
  00023	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  00026	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 34   : 	}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 886  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 329  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 331  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 279  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$allocator@PAUHighscoreHeader@core@@@std@@QAE@XZ ; std::allocator<core::HighscoreHeader *>::allocator<core::HighscoreHeader *>
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >

; 279  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 120  : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 			return (_Ok);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 122  : 			}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 115  : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 			: _Sentry_base(_Istr)

  00026	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 116  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00039	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Noskip$[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00043	e8 00 00 00 00	 call	 ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 117  : 			}

  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -28						; size = 4
tv86 = -24						; size = 4
_this$ = -20						; size = 4
tv72 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 			if (_Myistr.rdbuf() != nullptr)

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 4d f0	 mov	 DWORD PTR tv72[ebp], ecx
  00030	8b 55 f0	 mov	 edx, DWORD PTR tv72[ebp]
  00033	8b 02		 mov	 eax, DWORD PTR [edx]
  00035	8b 4d f0	 mov	 ecx, DWORD PTR tv72[ebp]
  00038	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0003b	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00040	85 c0		 test	 eax, eax
  00042	74 2a		 je	 SHORT $LN3@Sentry_bas

; 101  : 				_Myistr.rdbuf()->_Unlock();

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	89 55 e8	 mov	 DWORD PTR tv86[ebp], edx
  0004c	8b 45 e8	 mov	 eax, DWORD PTR tv86[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	8b 55 e8	 mov	 edx, DWORD PTR tv86[ebp]
  00054	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00057	8b ca		 mov	 ecx, edx
  00059	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0005e	89 45 e4	 mov	 DWORD PTR tv92[ebp], eax
  00061	8b 45 e4	 mov	 eax, DWORD PTR tv92[ebp]
  00064	8b 10		 mov	 edx, DWORD PTR [eax]
  00066	8b 4d e4	 mov	 ecx, DWORD PTR tv92[ebp]
  00069	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006c	ff d0		 call	 eax
$LN3@Sentry_bas:

; 102  : 			}

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 93   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 			: _Myistr(_Istr)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 94   : 			if (_Myistr.rdbuf() != nullptr)

  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00021	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00024	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00029	85 c0		 test	 eax, eax
  0002b	74 28		 je	 SHORT $LN1@Sentry_bas

; 95   : 				_Myistr.rdbuf()->_Lock();

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d f4	 mov	 DWORD PTR tv87[ebp], ecx
  00035	8b 55 f4	 mov	 edx, DWORD PTR tv87[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR tv87[ebp]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00045	89 45 f0	 mov	 DWORD PTR tv93[ebp], eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  0004b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  00050	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00053	ff d0		 call	 eax
$LN1@Sentry_bas:

; 96   : 			}

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 152  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 153  : 			return (_Ok);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 154  : 			}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 135  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00026	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	85 c0		 test	 eax, eax
  00030	75 0a		 jne	 SHORT $LN1@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00037	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 			: _Sentry_base(_Ostr)

  00026	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00041	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00044	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 44		 je	 SHORT $LN2@sentry
  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00058	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0005b	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00060	85 c0		 test	 eax, eax
  00062	74 30		 je	 SHORT $LN2@sentry
  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0006c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006f	8b ca		 mov	 ecx, edx
  00071	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00076	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  00079	74 19		 je	 SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00083	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00086	8b ca		 mov	 ecx, edx
  00088	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00094	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00097	8b 08		 mov	 ecx, DWORD PTR [eax]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0009c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009f	8b ca		 mov	 ecx, edx
  000a1	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 125  : 			}

  000ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c0	59		 pop	 ecx
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -28						; size = 4
tv86 = -24						; size = 4
_this$ = -20						; size = 4
tv72 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	89 4d f0	 mov	 DWORD PTR tv72[ebp], ecx
  00030	8b 55 f0	 mov	 edx, DWORD PTR tv72[ebp]
  00033	8b 02		 mov	 eax, DWORD PTR [edx]
  00035	8b 4d f0	 mov	 ecx, DWORD PTR tv72[ebp]
  00038	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0003b	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00040	85 c0		 test	 eax, eax
  00042	74 2a		 je	 SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00044	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	89 55 e8	 mov	 DWORD PTR tv86[ebp], edx
  0004c	8b 45 e8	 mov	 eax, DWORD PTR tv86[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	8b 55 e8	 mov	 edx, DWORD PTR tv86[ebp]
  00054	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00057	8b ca		 mov	 ecx, edx
  00059	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0005e	89 45 e4	 mov	 DWORD PTR tv92[ebp], eax
  00061	8b 45 e4	 mov	 eax, DWORD PTR tv92[ebp]
  00064	8b 10		 mov	 edx, DWORD PTR [eax]
  00066	8b 4d e4	 mov	 ecx, DWORD PTR tv92[ebp]
  00069	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006c	ff d0		 call	 eax
$LN3@Sentry_bas:

; 108  : 			}

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00071	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00078	59		 pop	 ecx
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00021	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00024	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00029	85 c0		 test	 eax, eax
  0002b	74 28		 je	 SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	89 4d f4	 mov	 DWORD PTR tv87[ebp], ecx
  00035	8b 55 f4	 mov	 edx, DWORD PTR tv87[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR tv87[ebp]
  0003d	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00040	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00045	89 45 f0	 mov	 DWORD PTR tv93[ebp], eax
  00048	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  0004b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  00050	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00053	ff d0		 call	 eax
$LN1@Sentry_bas:

; 102  : 			}

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1422 : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1423 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1424 : 		_STL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");
; 1425 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1426 : 		_STL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"
; 1427 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1428 : 		const auto _Contptr = _Mycont->_Myptr();
; 1429 : 		const auto _Rawptr = _Unfancy(_Ptr);
; 1430 : 		_STL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,
; 1431 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1432 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1433 : 
; 1434 : 		_Analysis_assume_(_Ptr);
; 1435 : 		return (*_Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 1436 : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1417 : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1416 : 		: _Ptr(_Parg)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 1418 : 		this->_Adopt(_Pstring);

  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Pstring$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 1419 : 		}

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z PROC	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ ; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$codecvt@DDU_Mbstatet@@@std@@MAEPAXI@Z ENDP	; std::codecvt<char,char,_Mbstatet>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Count$ = 20						; size = 4
?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_length, COMDAT
; _this$ = ecx

; 940  : 		{	// return min(_Count, converted length of bytes [_First1, _Last1))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 941  : 		return (static_cast<int>(_Min_value(_Count, static_cast<size_t>(_Last1 - _First1)))); // assumes 1:1 conversion

  00009	8b 45 10	 mov	 eax, DWORD PTR __Last1$[ebp]
  0000c	2b 45 0c	 sub	 eax, DWORD PTR __First1$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00012	8d 4d fc	 lea	 ecx, DWORD PTR $T1[ebp]
  00015	51		 push	 ecx
  00016	8d 55 14	 lea	 edx, DWORD PTR __Count$[ebp]
  00019	52		 push	 edx
  0001a	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0001f	83 c4 08	 add	 esp, 8
  00022	8b 00		 mov	 eax, DWORD PTR [eax]

; 942  : 		}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?do_length@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1I@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First2$ = 12						; size = 4
___formal$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_unshift, COMDAT
; _this$ = ecx

; 933  : 		{	// generate bytes to return to default shift state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 934  : 		_Mid2 = _First2;

  00007	8b 45 14	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 935  : 		return (ok);	// convert nothing

  0000f	33 c0		 xor	 eax, eax

; 936  : 		}

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 10 00	 ret	 16			; 00000010H
?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PAD1AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_unshift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_out, COMDAT
; _this$ = ecx

; 914  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 915  : 		_Mid1 = _First1;

  00007	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First1$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 916  : 		_Mid2 = _First2;

  0000f	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  00012	8b 45 18	 mov	 eax, DWORD PTR __First2$[ebp]
  00015	89 02		 mov	 DWORD PTR [edx], eax

; 917  : 		if (is_same_v<_Byte, _Elem>)

  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 07		 je	 SHORT $LN5@do_out

; 918  : 			{
; 919  : 			return (noconv);	// convert nothing

  00020	b8 03 00 00 00	 mov	 eax, 3
  00025	eb 42		 jmp	 SHORT $LN1@do_out
$LN5@do_out:

; 920  : 			}
; 921  : 
; 922  : 		// types differ, copy one for one
; 923  : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)

  00027	eb 1a		 jmp	 SHORT $LN4@do_out
$LN2@do_out:
  00029	8b 55 14	 mov	 edx, DWORD PTR __Mid1$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	83 c0 01	 add	 eax, 1
  00031	8b 4d 14	 mov	 ecx, DWORD PTR __Mid1$[ebp]
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	83 c0 01	 add	 eax, 1
  0003e	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  00041	89 01		 mov	 DWORD PTR [ecx], eax
$LN4@do_out:
  00043	8b 55 14	 mov	 edx, DWORD PTR __Mid1$[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	3b 45 10	 cmp	 eax, DWORD PTR __Last1$[ebp]
  0004b	74 1a		 je	 SHORT $LN3@do_out
  0004d	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	3b 55 1c	 cmp	 edx, DWORD PTR __Last2$[ebp]
  00055	74 10		 je	 SHORT $LN3@do_out

; 924  : 			{
; 925  : 			*_Mid2 = (_Byte)*_Mid1;

  00057	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8a 09		 mov	 cl, BYTE PTR [ecx]
  00063	88 08		 mov	 BYTE PTR [eax], cl

; 926  : 			}

  00065	eb c2		 jmp	 SHORT $LN2@do_out
$LN3@do_out:

; 927  : 
; 928  : 		return (ok);

  00067	33 c0		 xor	 eax, eax
$LN1@do_out:

; 929  : 		}

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_out@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_out
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::do_in, COMDAT
; _this$ = ecx

; 894  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 895  : 		_Mid1 = _First1;

  00007	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __First1$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 896  : 		_Mid2 = _First2;

  0000f	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  00012	8b 45 18	 mov	 eax, DWORD PTR __First2$[ebp]
  00015	89 02		 mov	 DWORD PTR [edx], eax

; 897  : 		if (is_same_v<_Byte, _Elem>)

  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	85 c9		 test	 ecx, ecx
  0001e	74 07		 je	 SHORT $LN5@do_in

; 898  : 			{
; 899  : 			return (noconv);	// convert nothing

  00020	b8 03 00 00 00	 mov	 eax, 3
  00025	eb 42		 jmp	 SHORT $LN1@do_in
$LN5@do_in:

; 900  : 			}
; 901  : 
; 902  : 		// types differ, copy one for one
; 903  : 		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)

  00027	eb 1a		 jmp	 SHORT $LN4@do_in
$LN2@do_in:
  00029	8b 55 14	 mov	 edx, DWORD PTR __Mid1$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	83 c0 01	 add	 eax, 1
  00031	8b 4d 14	 mov	 ecx, DWORD PTR __Mid1$[ebp]
  00034	89 01		 mov	 DWORD PTR [ecx], eax
  00036	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	83 c0 01	 add	 eax, 1
  0003e	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  00041	89 01		 mov	 DWORD PTR [ecx], eax
$LN4@do_in:
  00043	8b 55 14	 mov	 edx, DWORD PTR __Mid1$[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	3b 45 10	 cmp	 eax, DWORD PTR __Last1$[ebp]
  0004b	74 1a		 je	 SHORT $LN3@do_in
  0004d	8b 4d 20	 mov	 ecx, DWORD PTR __Mid2$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	3b 55 1c	 cmp	 edx, DWORD PTR __Last2$[ebp]
  00055	74 10		 je	 SHORT $LN3@do_in

; 904  : 			{
; 905  : 			*_Mid2 = (_Elem)*_Mid1;

  00057	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 55 20	 mov	 edx, DWORD PTR __Mid2$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8a 09		 mov	 cl, BYTE PTR [ecx]
  00063	88 08		 mov	 BYTE PTR [eax], cl

; 906  : 			}

  00065	eb c2		 jmp	 SHORT $LN2@do_in
$LN3@do_in:

; 907  : 
; 908  : 		return (ok);

  00067	33 c0		 xor	 eax, eax
$LN1@do_in:

; 909  : 		}

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 1c 00	 ret	 28			; 0000001cH
?do_in@?$codecvt@DDU_Mbstatet@@@std@@MBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::do_in
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ PROC ; std::codecvt<char,char,_Mbstatet>::do_always_noconv, COMDAT
; _this$ = ecx

; 887  : 		{	// return true if conversions never change input (from codecvt)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 888  : 		return (is_same_v<_Byte, _Elem>);

  00007	b0 01		 mov	 al, 1

; 889  : 		}

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MBE_NXZ ENDP ; std::codecvt<char,char,_Mbstatet>::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::codecvt<char,char,_Mbstatet>::_Init, COMDAT
; _this$ = ecx

; 883  : 		{	// initialize from _Locinfo object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 884  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::codecvt<char,char,_Mbstatet>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ PROC		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>, COMDAT
; _this$ = ecx

; 879  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@

; 880  : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1?$codecvt@DDU_Mbstatet@@@std@@MAE@XZ ENDP		; std::codecvt<char,char,_Mbstatet>::~codecvt<char,char,_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv128 = -32						; size = 4
tv133 = -28						; size = 4
tv89 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::codecvt<char,char,_Mbstatet>::_Getcat, COMDAT

; 870  : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 871  : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0002c	83 7d 08 00	 cmp	 DWORD PTR __Ppf$[ebp], 0
  00030	0f 84 97 00 00
	00		 je	 $LN2@Getcat
  00036	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	0f 85 8b 00 00
	00		 jne	 $LN2@Getcat

; 872  : 			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(

  00042	6a 08		 push	 8
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	83 7d ec 00	 cmp	 DWORD PTR $T4[ebp], 0
  0005a	74 3a		 je	 SHORT $LN4@Getcat
  0005c	6a 00		 push	 0
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00061	e8 00 00 00 00	 call	 ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str
  00066	50		 push	 eax
  00067	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0006f	89 45 e4	 mov	 DWORD PTR tv133[ebp], eax
  00072	8b 4d e4	 mov	 ecx, DWORD PTR tv133[ebp]
  00075	89 4d e0	 mov	 DWORD PTR tv128[ebp], ecx
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007c	8b 55 f0	 mov	 edx, DWORD PTR $T5[ebp]
  0007f	83 ca 01	 or	 edx, 1
  00082	89 55 f0	 mov	 DWORD PTR $T5[ebp], edx
  00085	8b 45 e0	 mov	 eax, DWORD PTR tv128[ebp]
  00088	50		 push	 eax
  00089	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
  00091	89 45 e8	 mov	 DWORD PTR tv89[ebp], eax
  00094	eb 07		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00096	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN5@Getcat:
  0009d	8b 4d e8	 mov	 ecx, DWORD PTR tv89[ebp]
  000a0	89 4d dc	 mov	 DWORD PTR $T3[ebp], ecx
  000a3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ppf$[ebp]
  000ad	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  000b0	89 02		 mov	 DWORD PTR [edx], eax
  000b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
  000bc	83 e1 01	 and	 ecx, 1
  000bf	74 0c		 je	 SHORT $LN2@Getcat
  000c1	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  000c5	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  000c8	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 873  : 				_Locinfo(_Ploc->c_str()));
; 874  : 		return (_X_CTYPE);

  000cd	b8 02 00 00 00	 mov	 eax, 2

; 875  : 		}

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  0001f	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__ehhandler$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::codecvt<char,char,_Mbstatet>::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>, COMDAT
; _this$ = ecx

; 864  : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 863  : 		: codecvt_base(_Refs)

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0codecvt_base@std@@QAE@I@Z ; std::codecvt_base::codecvt_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 864  : 		{	// construct from specified locale

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$codecvt@DDU_Mbstatet@@@std@@6B@

; 865  : 		_Init(_Lobj);

  00042	8b 55 08	 mov	 edx, DWORD PTR __Lobj$[ebp]
  00045	52		 push	 edx
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Init@?$codecvt@DDU_Mbstatet@@@std@@IAEXABV_Locinfo@2@@Z ; std::codecvt<char,char,_Mbstatet>::_Init

; 866  : 		}

  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
__ehhandler$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$codecvt@DDU_Mbstatet@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::codecvt<char,char,_Mbstatet>::codecvt<char,char,_Mbstatet>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First2$ = 12						; size = 4
__Last2$ = 16						; size = 4
__Mid2$ = 20						; size = 4
?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::unshift, COMDAT
; _this$ = ecx

; 844  : 		{	// generate bytes to return to default shift state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 845  : 		return (do_unshift(_State, _First2, _Last2, _Mid2));

  00007	8b 45 14	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR __Last2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __First2$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00016	50		 push	 eax
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00022	ff d0		 call	 eax

; 846  : 		}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::unshift
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::out, COMDAT
; _this$ = ecx

; 837  : 		{	// convert [_First1, _Last1) to bytes [_First2, _Last2)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 838  : 		return (do_out(_State,

  00007	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 1c	 mov	 ecx, DWORD PTR __Last2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 10	 mov	 ecx, DWORD PTR __Last1$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR __First1$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0002e	ff d0		 call	 eax

; 839  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 840  : 		}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 1c 00	 ret	 28			; 0000001cH
?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::out
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__Mid1$ = 20						; size = 4
__First2$ = 24						; size = 4
__Last2$ = 28						; size = 4
__Mid2$ = 32						; size = 4
?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z PROC ; std::codecvt<char,char,_Mbstatet>::in, COMDAT
; _this$ = ecx

; 829  : 		{	// convert bytes [_First1, _Last1) to [_First2, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 830  : 		return (do_in(_State,

  00007	8b 45 20	 mov	 eax, DWORD PTR __Mid2$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 1c	 mov	 ecx, DWORD PTR __Last2$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 18	 mov	 edx, DWORD PTR __First2$[ebp]
  00012	52		 push	 edx
  00013	8b 45 14	 mov	 eax, DWORD PTR __Mid1$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 10	 mov	 ecx, DWORD PTR __Last1$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 0c	 mov	 edx, DWORD PTR __First1$[ebp]
  0001e	52		 push	 edx
  0001f	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00022	50		 push	 eax
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002e	ff d0		 call	 eax

; 831  : 			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
; 832  : 		}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 1c 00	 ret	 28			; 0000001cH
?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ENDP ; std::codecvt<char,char,_Mbstatet>::in
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT
; _this$ = ecx

; 52   : 		{	// return offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 			// TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old basic_filebuf
; 54   : 			// would set _Fpos.
; 55   : 		return (_Myoff + _Fpos);

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  00013	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00016	13 71 0c	 adc	 esi, DWORD PTR [ecx+12]
  00019	8b c2		 mov	 eax, edx
  0001b	8b d6		 mov	 edx, esi

; 56   : 		}

  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ PROC ; std::fpos<_Mbstatet>::state, COMDAT
; _this$ = ecx

; 42   : 		{	// return conversion state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		return (_Mystate);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00010	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00013	89 08		 mov	 DWORD PTR [eax], ecx
  00015	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 44   : 		}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ENDP ; std::fpos<_Mbstatet>::state
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 8
__Fileposition$ = 16					; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z PROC	; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 		: _Myoff(_Fileposition), _Fpos(0), _Mystate(_State)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Fileposition$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 14	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  0002c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __State$[ebp+4]
  00032	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 39   : 		}

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 10 00	 ret	 16			; 00000010H
??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ENDP	; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT
; _this$ = ecx

; 33   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00026	33 c9		 xor	 ecx, ecx
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	83 c2 10	 add	 edx, 16			; 00000010H
  0002e	89 0a		 mov	 DWORD PTR [edx], ecx
  00030	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 34   : 		}

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Lock$4 = -36						; size = 4
__Id$5 = -32						; size = 4
__Psave_guard$6 = -28					; size = 4
__Pf$7 = -24						; size = 4
__Pfmod$8 = -20						; size = 4
__Psave$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,_Mbstatet> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00025	6a 00		 push	 0
  00027	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave
  0003b	89 45 f0	 mov	 DWORD PTR __Psave$9[ebp], eax

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;

  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A ; std::codecvt<char,char,_Mbstatet>::id
  00043	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int
  00048	89 45 e0	 mov	 DWORD PTR __Id$5[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0004b	8b 4d e0	 mov	 ecx, DWORD PTR __Id$5[ebp]
  0004e	51		 push	 ecx
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00057	89 45 e8	 mov	 DWORD PTR __Pf$7[ebp], eax

; 512  : 
; 513  : 		if (_Pf == nullptr)

  0005a	83 7d e8 00	 cmp	 DWORD PTR __Pf$7[ebp], 0
  0005e	0f 85 8d 00 00
	00		 jne	 $LN2@use_facet

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  00064	83 7d f0 00	 cmp	 DWORD PTR __Psave$9[ebp], 0
  00068	74 08		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  0006a	8b 55 f0	 mov	 edx, DWORD PTR __Psave$9[ebp]
  0006d	89 55 e8	 mov	 DWORD PTR __Pf$7[ebp], edx
  00070	eb 7f		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

  00072	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00075	50		 push	 eax
  00076	8d 4d f0	 lea	 ecx, DWORD PTR __Psave$9[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::codecvt<char,char,_Mbstatet>::_Getcat
  0007f	83 c4 08	 add	 esp, 8
  00082	83 f8 ff	 cmp	 eax, -1
  00085	75 18		 jne	 SHORT $LN5@use_facet

; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed

  00087	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0008a	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0008f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00094	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 __CxxThrowException@8

; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else

  0009d	eb 52		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);

  0009f	8b 45 f0	 mov	 eax, DWORD PTR __Psave$9[ebp]
  000a2	89 45 ec	 mov	 DWORD PTR __Pfmod$8[ebp], eax

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

  000a5	8b 4d ec	 mov	 ecx, DWORD PTR __Pfmod$8[ebp]
  000a8	51		 push	 ecx
  000a9	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000ac	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  000b1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

  000b5	8b 55 ec	 mov	 edx, DWORD PTR __Pfmod$8[ebp]
  000b8	52		 push	 edx
  000b9	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000be	83 c4 04	 add	 esp, 4

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  000c1	8b 45 ec	 mov	 eax, DWORD PTR __Pfmod$8[ebp]
  000c4	8b 10		 mov	 edx, DWORD PTR [eax]
  000c6	8b 4d ec	 mov	 ecx, DWORD PTR __Pfmod$8[ebp]
  000c9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000cc	ff d0		 call	 eax

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  000ce	8b 4d f0	 mov	 ecx, DWORD PTR __Psave$9[ebp]
  000d1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::codecvt<char,char,_Mbstatet> >::_Psave

; 540  : 				_Pf = _Psave;

  000d7	8b 55 f0	 mov	 edx, DWORD PTR __Psave$9[ebp]
  000da	89 55 e8	 mov	 DWORD PTR __Pf$7[ebp], edx

; 541  : 
; 542  : 				(void) _Psave_guard.release();

  000dd	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000e0	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 543  : 				}

  000e5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e9	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000ec	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  000f1	8b 45 e8	 mov	 eax, DWORD PTR __Pf$7[ebp]
  000f4	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  000f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fe	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00101	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00106	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
$LN7@use_facet:

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00113	59		 pop	 ecx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1918 : 		{	// construct allocator from _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1916 : 		: _Mypair(_One_then_variadic_args_t(),

  00009	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	0f b6 4d ff	 movzx	 ecx, BYTE PTR $T1[ebp]
  0001a	51		 push	 ecx
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 1919 : 		}

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Newsize$ = -52					; size = 4
__Constructed_last$ = -48				; size = 4
__Oldsize$ = -44					; size = 4
__Newcapacity$ = -40					; size = 4
__Al$ = -36						; size = 4
__Constructed_first$ = -32				; size = 4
__Whereoff$ = -28					; size = 4
__Newvec$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_reallocate<core::HighscoreHeader *>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 28	 sub	 esp, 40			; 00000028H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  0002f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0003a	2b 08		 sub	 ecx, DWORD PTR [eax]
  0003c	c1 f9 02	 sar	 ecx, 2
  0003f	89 4d e4	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 945  : 		_Alty& _Al = this->_Getal();

  00042	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  0004a	89 45 dc	 mov	 DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  00055	89 45 d4	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::max_size
  00060	39 45 d4	 cmp	 DWORD PTR __Oldsize$[ebp], eax
  00063	75 05		 jne	 SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

  00065	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@CAXXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  0006a	8b 55 d4	 mov	 edx, DWORD PTR __Oldsize$[ebp]
  0006d	83 c2 01	 add	 edx, 1
  00070	89 55 cc	 mov	 DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

  00073	8b 45 cc	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	50		 push	 eax
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEII@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Calculate_growth
  0007f	89 45 d8	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

  00082	8b 4d d8	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00085	51		 push	 ecx
  00086	8b 4d dc	 mov	 ecx, DWORD PTR __Al$[ebp]
  00089	e8 00 00 00 00	 call	 ?allocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEPAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::allocate
  0008e	89 45 e8	 mov	 DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00091	8b 55 e4	 mov	 edx, DWORD PTR __Whereoff$[ebp]
  00094	8b 45 e8	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00097	8d 4c 90 04	 lea	 ecx, DWORD PTR [eax+edx*4+4]
  0009b	89 4d d0	 mov	 DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

  0009e	8b 55 d0	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  000a1	89 55 e0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

  000a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ab	8b 45 e4	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  000ae	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000b1	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z ; std::_Unfancy<core::HighscoreHeader *>
  000ba	83 c4 04	 add	 esp, 4
  000bd	89 45 c8	 mov	 DWORD PTR tv206[ebp], eax
  000c0	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
  000c9	83 c4 04	 add	 esp, 4
  000cc	50		 push	 eax
  000cd	8b 4d c8	 mov	 ecx, DWORD PTR tv206[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 dc	 mov	 edx, DWORD PTR __Al$[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::construct<core::HighscoreHeader *,core::HighscoreHeader *>
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

  000dd	8b 45 e4	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  000e0	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000e3	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  000e6	89 55 e0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000f4	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000f6	75 24		 jne	 SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

  000f8	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  000fb	52		 push	 edx
  000fc	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00104	8b 00		 mov	 eax, DWORD PTR [eax]
  00106	50		 push	 eax
  00107	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0010f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00111	51		 push	 ecx
  00112	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	e8 00 00 00 00	 call	 ?_Umove_if_noexcept@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

  0011a	eb 43		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

  0011c	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0011f	52		 push	 edx
  00120	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00123	50		 push	 eax
  00124	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0012c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0012e	51		 push	 ecx
  0012f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

  00137	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  0013a	89 55 e0	 mov	 DWORD PTR __Constructed_first$[ebp], edx

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  0013d	8b 45 e4	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00140	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00143	8d 54 81 04	 lea	 edx, DWORD PTR [ecx+eax*4+4]
  00147	52		 push	 edx
  00148	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00150	8b 00		 mov	 eax, DWORD PTR [eax]
  00152	50		 push	 eax
  00153	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00156	51		 push	 ecx
  00157	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove
$LN5@Emplace_re:
  0015f	eb 2f		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

  00161	8b 55 d0	 mov	 edx, DWORD PTR __Constructed_last$[ebp]
  00164	52		 push	 edx
  00165	8b 45 e0	 mov	 eax, DWORD PTR __Constructed_first$[ebp]
  00168	50		 push	 eax
  00169	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

  00171	8b 4d d8	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00174	51		 push	 ecx
  00175	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00178	52		 push	 edx
  00179	8b 4d dc	 mov	 ecx, DWORD PTR __Al$[ebp]
  0017c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::deallocate

; 977  : 		_RERAISE;

  00181	6a 00		 push	 0
  00183	6a 00		 push	 0
  00185	e8 00 00 00 00	 call	 __CxxThrowException@8

; 978  : 		_CATCH_END

  0018a	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0018f	c3		 ret	 0
$LN7@Emplace_re:
  00190	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00197	eb 07		 jmp	 SHORT __tryend$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$1
$LN10@Emplace_re:
  00199	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  001a0	8b 45 d8	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  001a3	50		 push	 eax
  001a4	8b 4d cc	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  001a7	51		 push	 ecx
  001a8	8b 55 e8	 mov	 edx, DWORD PTR __Newvec$[ebp]
  001ab	52		 push	 edx
  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXQAPAUHighscoreHeader@core@@II@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  001b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  001bc	8b 00		 mov	 eax, DWORD PTR [eax]
  001be	8b 4d e4	 mov	 ecx, DWORD PTR __Whereoff$[ebp]
  001c1	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
$LN6@Emplace_re:

; 982  : 		}

  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	5e		 pop	 esi
  001d1	5b		 pop	 ebx
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_reallocate<core::HighscoreHeader *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::construct<core::HighscoreHeader *,core::HighscoreHeader *>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00007	50		 push	 eax
  00008	6a 04		 push	 4
  0000a	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  0000f	83 c4 08	 add	 esp, 8
  00012	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
  0001e	83 c4 04	 add	 esp, 4
  00021	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	89 02		 mov	 DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::construct<core::HighscoreHeader *,core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z PROC ; std::_Unfancy<core::HighscoreHeader *>, COMDAT

; 345  : 	{	// do nothing for plain pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 346  : 	return (_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z ENDP ; std::_Unfancy<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEX$$QAPAUHighscoreHeader@core@@@Z
_TEXT	SEGMENT
__Result$ = -12						; size = 4
tv142 = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEX$$QAPAUHighscoreHeader@core@@@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_back_with_unused_capacity<core::HighscoreHeader *>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

  00009	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  0001e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??$_Unfancy@PAUHighscoreHeader@core@@@std@@YAPAPAUHighscoreHeader@core@@PAPAU12@@Z ; std::_Unfancy<core::HighscoreHeader *>
  00026	83 c4 04	 add	 esp, 4
  00029	50		 push	 eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??$construct@PAUHighscoreHeader@core@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAXAAV?$allocator@PAUHighscoreHeader@core@@@1@QAPAUHighscoreHeader@core@@$$QAPAU34@@Z ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::construct<core::HighscoreHeader *,core::HighscoreHeader *>
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
  00050	50		 push	 eax
  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	89 4d f4	 mov	 DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  0006e	89 45 f8	 mov	 DWORD PTR tv142[ebp], eax
  00071	8b 55 f8	 mov	 edx, DWORD PTR tv142[ebp]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	83 c0 04	 add	 eax, 4
  00079	8b 4d f8	 mov	 ecx, DWORD PTR tv142[ebp]
  0007c	89 01		 mov	 DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEX$$QAPAUHighscoreHeader@core@@@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_back_with_unused_capacity<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z PROC ; std::forward<core::HighscoreHeader *>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ENDP ; std::forward<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::emplace_back<core::HighscoreHeader *>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Has_unused_capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABE_NXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Has_unused_capacity
  00011	0f b6 c0	 movzx	 eax, al
  00014	85 c0		 test	 eax, eax
  00016	74 17		 je	 SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_back_with_unused_capacity<core::HighscoreHeader *>
  0002d	eb 23		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  0002f	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 ??$forward@PAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::forward<core::HighscoreHeader *>
  00038	83 c4 04	 add	 esp, 4
  0003b	50		 push	 eax
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	50		 push	 eax
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEPAPAUHighscoreHeader@core@@QAPAU23@$$QAPAU23@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Emplace_reallocate<core::HighscoreHeader *>
  0004f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
??$emplace_back@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::emplace_back<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAPAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z PROC ; std::move<core::HighscoreHeader * &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAPAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ENDP ; std::move<core::HighscoreHeader * &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 68	 add	 ecx, 104		; 00000068H
  0000d	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 68	 add	 ecx, 104		; 00000068H
  00018	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 68	 sub	 ecx, 104		; 00000068H
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 14		 je	 SHORT $LN2@scalar
  0001a	68 b0 00 00 00	 push	 176			; 000000b0H
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 e9 68	 sub	 ecx, 104		; 00000068H
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 e8 68	 sub	 eax, 104		; 00000068H
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1247 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 98	 mov	 ecx, DWORD PTR [eax-104]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 98 00
	00 00 00	 mov	 DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 98	 mov	 edx, DWORD PTR [ecx-104]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 68	 sub	 eax, 104		; 00000068H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 98	 mov	 edx, DWORD PTR [ecx-104]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a 94	 mov	 DWORD PTR [edx+ecx-108], eax

; 1248 : 		}

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 e9 64	 sub	 ecx, 100		; 00000064H
  0003d	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 e9 60	 sub	 ecx, 96			; 00000060H
  00048	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1086 : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 24		 je	 SHORT $LN2@basic_ofst
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 68	 add	 ecx, 104		; 00000068H
  00044	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00053	83 c9 01	 or	 ecx, 1
  00056	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ofst:

; 1085 : 		: _Mybase(&_Filebuffer)

  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 c2 04	 add	 edx, 4
  00063	52		 push	 edx
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  0006c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1086 : 		{	// construct with named file and specified mode

  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008d	83 e8 68	 sub	 eax, 104		; 00000068H
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00098	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  0009f	6a 00		 push	 0
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	83 c1 04	 add	 ecx, 4
  000a7	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000ac	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1087 : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == nullptr)

  000b0	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000b7	83 c9 02	 or	 ecx, 2
  000ba	51		 push	 ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000be	52		 push	 edx
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	83 c1 04	 add	 ecx, 4
  000c5	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000ca	85 c0		 test	 eax, eax
  000cc	75 16		 jne	 SHORT $LN1@basic_ofst

; 1088 : 			_Myios::setstate(ios_base::failbit);

  000ce	6a 00		 push	 0
  000d0	6a 02		 push	 2
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000da	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000dd	8b ca		 mov	 ecx, edx
  000df	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@basic_ofst:

; 1089 : 		}

  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ofst
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 68	 add	 ecx, 104		; 00000068H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ofst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 08	 add	 ecx, 8
  0000d	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 08	 add	 ecx, 8
  00018	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 08	 sub	 ecx, 8
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 11		 je	 SHORT $LN2@scalar
  0001a	6a 50		 push	 80			; 00000050H
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 e9 08	 sub	 ecx, 8
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 e8 08	 sub	 eax, 8
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 586  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 587  : 		if (_Myios::rdbuf() != nullptr)

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00030	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00033	8b ca		 mov	 ecx, edx
  00035	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0003a	85 c0		 test	 eax, eax
  0003c	74 61		 je	 SHORT $LN2@flush

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	50		 push	 eax
  00042	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 590  : 
; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00051	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00054	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00059	0f b6 c8	 movzx	 ecx, al
  0005c	85 c9		 test	 ecx, ecx
  0005e	74 30		 je	 SHORT $LN3@flush
  00060	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0006b	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00070	8b c8		 mov	 ecx, eax
  00072	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  00077	83 f8 ff	 cmp	 eax, -1
  0007a	75 14		 jne	 SHORT $LN3@flush

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  0007c	6a 00		 push	 0
  0007e	6a 04		 push	 4
  00080	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 11		 mov	 edx, DWORD PTR [ecx]
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0008b	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@flush:

; 593  : 			}

  00090	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00097	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  0009a	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 594  : 		return (*this);

  0009f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 595  : 		}

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z
_TEXT	SEGMENT
__Ok$ = -48						; size = 8
tv150 = -40						; size = 8
$T2 = -32						; size = 4
tv65 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Str$ = 8						; size = 4
__Count$ = 12						; size = 8
?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::write, COMDAT
; _this$ = ecx

; 567  : 		{	// insert _Count characters from array _Str

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 20	 sub	 esp, 32			; 00000020H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 568  : 		ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 569  : 		const sentry _Ok(*this);

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	50		 push	 eax
  0003a	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0003d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 570  : 
; 571  : 		if (!_Ok)

  00049	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0004c	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00051	0f b6 c8	 movzx	 ecx, al
  00054	85 c9		 test	 ecx, ecx
  00056	75 0e		 jne	 SHORT $LN2@write

; 572  : 			_State |= ios_base::badbit;

  00058	8b 55 e8	 mov	 edx, DWORD PTR __State$[ebp]
  0005b	83 ca 04	 or	 edx, 4
  0005e	89 55 e8	 mov	 DWORD PTR __State$[ebp], edx
  00061	e9 8c 00 00 00	 jmp	 $LN3@write
$LN2@write:

; 573  : 		else if (0 < _Count)

  00066	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  0006a	0f 8c 82 00 00
	00		 jl	 $LN3@write
  00070	7f 06		 jg	 SHORT $LN13@write
  00072	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00076	76 7a		 jbe	 SHORT $LN3@write
$LN13@write:

; 574  : 			{	// state okay, insert characters
; 575  : 			_TRY_IO_BEGIN

  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 576  : 			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)

  0007c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00084	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00087	8b ca		 mov	 ecx, edx
  00089	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0008e	89 45 e4	 mov	 DWORD PTR tv65[ebp], eax
  00091	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00094	50		 push	 eax
  00095	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 08	 mov	 edx, DWORD PTR __Str$[ebp]
  0009c	52		 push	 edx
  0009d	8b 4d e4	 mov	 ecx, DWORD PTR tv65[ebp]
  000a0	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  000a5	89 45 d8	 mov	 DWORD PTR tv150[ebp], eax
  000a8	89 55 dc	 mov	 DWORD PTR tv150[ebp+4], edx
  000ab	8b 45 d8	 mov	 eax, DWORD PTR tv150[ebp]
  000ae	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  000b1	75 08		 jne	 SHORT $LN14@write
  000b3	8b 4d dc	 mov	 ecx, DWORD PTR tv150[ebp+4]
  000b6	3b 4d 10	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  000b9	74 09		 je	 SHORT $LN6@write
$LN14@write:

; 577  : 				_State |= ios_base::badbit;

  000bb	8b 55 e8	 mov	 edx, DWORD PTR __State$[ebp]
  000be	83 ca 04	 or	 edx, 4
  000c1	89 55 e8	 mov	 DWORD PTR __State$[ebp], edx
$LN6@write:
  000c4	eb 1c		 jmp	 SHORT $LN8@write
__catch$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$0:

; 578  : 			_CATCH_IO_END

  000c6	6a 01		 push	 1
  000c8	6a 04		 push	 4
  000ca	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d5	8b ca		 mov	 ecx, edx
  000d7	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000dc	b8 00 00 00 00	 mov	 eax, $LN12@write
  000e1	c3		 ret	 0
$LN8@write:
  000e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000e9	eb 07		 jmp	 SHORT $LN3@write
$LN12@write:
  000eb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN3@write:

; 579  : 			}
; 580  : 
; 581  : 		_Myios::setstate(_State);

  000f2	6a 00		 push	 0
  000f4	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  000f7	50		 push	 eax
  000f8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00103	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 582  : 		return (*this);

  00108	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0010e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00115	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00118	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0011d	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]

; 583  : 		}

  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	5b		 pop	 ebx
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z$2:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::write
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv152 = -36						; size = 4
tv151 = -32						; size = 4
tv150 = -28						; size = 4
_this$ = -24						; size = 4
tv149 = -17						; size = 1
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 176  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 14	 sub	 esp, 20			; 00000014H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 		_TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 178  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  00036	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00041	8b ca		 mov	 ecx, edx
  00043	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00048	88 45 ef	 mov	 BYTE PTR tv149[ebp], al
  0004b	0f b6 45 ef	 movzx	 eax, BYTE PTR tv149[ebp]
  0004f	85 c0		 test	 eax, eax
  00051	74 55		 je	 SHORT $LN3@Osfx
  00053	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0005e	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  00063	89 45 e4	 mov	 DWORD PTR tv150[ebp], eax
  00066	8b 45 e4	 mov	 eax, DWORD PTR tv150[ebp]
  00069	83 e0 02	 and	 eax, 2
  0006c	74 3a		 je	 SHORT $LN3@Osfx

; 179  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  0006e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 11		 mov	 edx, DWORD PTR [ecx]
  00073	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00079	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0007e	89 45 e0	 mov	 DWORD PTR tv151[ebp], eax
  00081	8b 4d e0	 mov	 ecx, DWORD PTR tv151[ebp]
  00084	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  00089	89 45 dc	 mov	 DWORD PTR tv152[ebp], eax
  0008c	83 7d dc ff	 cmp	 DWORD PTR tv152[ebp], -1
  00090	75 16		 jne	 SHORT $LN3@Osfx

; 180  : 				_Myios::setstate(ios_base::badbit);

  00092	6a 00		 push	 0
  00094	6a 04		 push	 4
  00096	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0009e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a1	8b ca		 mov	 ecx, edx
  000a3	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@Osfx:
  000a8	eb 06		 jmp	 SHORT $LN6@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 181  : 		_CATCH_ALL
; 182  : 		_CATCH_END

  000aa	b8 00 00 00 00	 mov	 eax, $LN9@Osfx
  000af	c3		 ret	 0
$LN6@Osfx:
  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000b7	eb 07		 jmp	 SHORT $LN1@Osfx
$LN9@Osfx:
  000b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN1@Osfx:

; 183  : 		}

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 87   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 f8	 mov	 ecx, DWORD PTR [eax-8]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 f8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-8], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 08	 sub	 eax, 8
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a f4	 mov	 DWORD PTR [edx+ecx-12], eax

; 88   : 		}

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 49   : 	explicit __CLR_OR_THIS_CALL basic_ostream(

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 50   : 		basic_streambuf<_Elem, _Traits> *_Strbuf,
; 51   : 
; 52   : 		bool _Isstd = false)
; 53   : 		{	// construct from a stream buffer pointer

  0002f	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 24		 je	 SHORT $LN2@basic_ostr
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 08	 add	 ecx, 8
  00044	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00053	83 c9 01	 or	 ecx, 1
  00056	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ostr:
  00059	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], OFFSET ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00073	83 ea 08	 sub	 edx, 8
  00076	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 54   : 		_Myios::init(_Strbuf, _Isstd);

  00085	0f b6 55 0c	 movzx	 edx, BYTE PTR __Isstd$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 08	 mov	 eax, DWORD PTR __Strbuf$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00099	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 55   : 		}

  0009e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b2	59		 pop	 ecx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_ostr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 70	 add	 ecx, 112		; 00000070H
  0000d	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 70	 add	 ecx, 112		; 00000070H
  00018	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 70	 sub	 ecx, 112		; 00000070H
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 14		 je	 SHORT $LN2@scalar
  0001a	68 b8 00 00 00	 push	 184			; 000000b8H
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 e9 70	 sub	 ecx, 112		; 00000070H
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 e8 70	 sub	 eax, 112		; 00000070H
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 58		 push	 88			; 00000058H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 809  : 		{	// set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 810  : 		if (_Mysb::eback() != &_Mychar)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00015	3b c1		 cmp	 eax, ecx
  00017	74 1c		 je	 SHORT $LN2@Set_back

; 811  : 			{	// save current get buffer
; 812  : 			_Set_eback = _Mysb::eback();

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 813  : 			_Set_egptr = _Mysb::egptr();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	89 41 54	 mov	 DWORD PTR [ecx+84], eax
$LN2@Set_back:

; 814  : 			}
; 815  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 c2 3d	 add	 edx, 61			; 0000003dH
  0003b	52		 push	 edx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 c0 3c	 add	 eax, 60			; 0000003cH
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00049	51		 push	 ecx
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 816  : 		}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 803  : 		{	// restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 804  : 		if (_Mysb::eback() == &_Mychar)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00015	3b c1		 cmp	 eax, ecx
  00017	75 1d		 jne	 SHORT $LN1@Reset_back

; 805  : 			_Mysb::setg(_Set_eback, _Set_eback, _Set_egptr);

  00019	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001c	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00026	52		 push	 edx
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0002d	51		 push	 ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN1@Reset_back:

; 806  : 		}

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 784  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 785  : 		if (_Newcvt.always_noconv())

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Newcvt$[ebp]
  0000a	e8 00 00 00 00	 call	 ?always_noconv@codecvt_base@std@@QBE_NXZ ; std::codecvt_base::always_noconv
  0000f	0f b6 c0	 movzx	 eax, al
  00012	85 c0		 test	 eax, eax
  00014	74 0c		 je	 SHORT $LN2@Initcvt

; 786  : 			_Pcvt = nullptr;	// nothing to do

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 787  : 		else

  00020	eb 1a		 jmp	 SHORT $LN1@Initcvt
$LN2@Initcvt:

; 788  : 			{	// set up for nontrivial codecvt facet
; 789  : 			_Pcvt = _STD addressof(_Newcvt);

  00022	8b 55 08	 mov	 edx, DWORD PTR __Newcvt$[ebp]
  00025	52		 push	 edx
  00026	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$codecvt@DDU_Mbstatet@@@std@@@std@@YAPBV?$codecvt@DDU_Mbstatet@@@0@ABV10@@Z ; std::addressof<std::codecvt<char,char,_Mbstatet> const >
  0002b	83 c4 04	 add	 esp, 4
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 790  : 			_Mysb::_Init();	// reset any buffering

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
$LN1@Initcvt:

; 791  : 			}
; 792  : 		}

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
__Codecvt_temp_buf$ = -72				; size = 4
__Dest$ = -68						; size = 4
$T1 = -64						; size = 4
$T2 = -60						; size = 4
tv140 = -56						; size = 4
__Count$3 = -52						; size = 4
tv94 = -48						; size = 4
_this$ = -44						; size = 4
__Str$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 744  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 745  : 		if (_Pcvt == nullptr || !_Wrotesome)

  00013	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  0001a	74 0b		 je	 SHORT $LN5@Endwrite
  0001c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	0f b6 51 3d	 movzx	 edx, BYTE PTR [ecx+61]
  00023	85 d2		 test	 edx, edx
  00025	75 07		 jne	 SHORT $LN4@Endwrite
$LN5@Endwrite:

; 746  : 			{
; 747  : 			return (true);

  00027	b0 01		 mov	 al, 1
  00029	e9 d4 00 00 00	 jmp	 $LN1@Endwrite
$LN4@Endwrite:

; 748  : 			}
; 749  : 
; 750  : 		// may have to put
; 751  : 		if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  0002e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00033	50		 push	 eax
  00034	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 10		 mov	 edx, DWORD PTR [eax]
  00039	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003f	ff d0		 call	 eax
  00041	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
  00044	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00049	89 45 c0	 mov	 DWORD PTR $T1[ebp], eax
  0004c	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  0004f	51		 push	 ecx
  00050	8d 55 c0	 lea	 edx, DWORD PTR $T1[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00059	83 c4 08	 add	 esp, 8
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 07		 je	 SHORT $LN6@Endwrite

; 752  : 			{
; 753  : 			return (false);

  00063	32 c0		 xor	 al, al
  00065	e9 98 00 00 00	 jmp	 $LN1@Endwrite
$LN6@Endwrite:

; 754  : 			}
; 755  : 
; 756  : 		constexpr size_t _Codecvt_temp_buf = 32;

  0006a	c7 45 b8 20 00
	00 00		 mov	 DWORD PTR __Codecvt_temp_buf$[ebp], 32 ; 00000020H

; 757  : 		char _Str[_Codecvt_temp_buf];
; 758  : 		char * _Dest;
; 759  : 		switch (_Pcvt->unshift(_State, _Str, _Str + _Codecvt_temp_buf, _Dest))

  00071	8d 4d bc	 lea	 ecx, DWORD PTR __Dest$[ebp]
  00074	51		 push	 ecx
  00075	8d 55 f8	 lea	 edx, DWORD PTR __Str$[ebp+32]
  00078	52		 push	 edx
  00079	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	83 c1 40	 add	 ecx, 64			; 00000040H
  00083	51		 push	 ecx
  00084	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00087	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  0008a	e8 00 00 00 00	 call	 ?unshift@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PAD1AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::unshift
  0008f	89 45 d0	 mov	 DWORD PTR tv94[ebp], eax
  00092	83 7d d0 00	 cmp	 DWORD PTR tv94[ebp], 0
  00096	74 0e		 je	 SHORT $LN7@Endwrite
  00098	83 7d d0 01	 cmp	 DWORD PTR tv94[ebp], 1
  0009c	74 0f		 je	 SHORT $LN8@Endwrite
  0009e	83 7d d0 03	 cmp	 DWORD PTR tv94[ebp], 3
  000a2	74 58		 je	 SHORT $LN10@Endwrite
  000a4	eb 5a		 jmp	 SHORT $LN11@Endwrite
$LN7@Endwrite:

; 760  : 			{	// test result of homing conversion
; 761  : 			case codecvt_base::ok:
; 762  : 				_Wrotesome = false;	// homed successfully

  000a6	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	c6 40 3d 00	 mov	 BYTE PTR [eax+61], 0
$LN8@Endwrite:

; 763  : 
; 764  : 			case codecvt_base::partial:	// fall through
; 765  : 				{	// put any generated bytes
; 766  : 				const auto _Count = static_cast<size_t>(_Dest - _Str);

  000ad	8b 4d bc	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000b0	8d 55 d8	 lea	 edx, DWORD PTR __Str$[ebp]
  000b3	2b ca		 sub	 ecx, edx
  000b5	89 4d cc	 mov	 DWORD PTR __Count$3[ebp], ecx

; 767  : 				if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile)))

  000b8	74 22		 je	 SHORT $LN9@Endwrite
  000ba	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000c0	51		 push	 ecx
  000c1	8b 55 cc	 mov	 edx, DWORD PTR __Count$3[ebp]
  000c4	52		 push	 edx
  000c5	6a 01		 push	 1
  000c7	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  000ca	50		 push	 eax
  000cb	e8 00 00 00 00	 call	 _fwrite
  000d0	83 c4 10	 add	 esp, 16			; 00000010H
  000d3	39 45 cc	 cmp	 DWORD PTR __Count$3[ebp], eax
  000d6	74 04		 je	 SHORT $LN9@Endwrite

; 768  : 					{
; 769  : 					return (false);	// write failed

  000d8	32 c0		 xor	 al, al
  000da	eb 26		 jmp	 SHORT $LN1@Endwrite
$LN9@Endwrite:

; 770  : 					}
; 771  : 
; 772  : 				return (!_Wrotesome);

  000dc	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	0f b6 51 3d	 movzx	 edx, BYTE PTR [ecx+61]
  000e3	85 d2		 test	 edx, edx
  000e5	75 09		 jne	 SHORT $LN13@Endwrite
  000e7	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  000ee	eb 07		 jmp	 SHORT $LN14@Endwrite
$LN13@Endwrite:
  000f0	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN14@Endwrite:
  000f7	8a 45 c8	 mov	 al, BYTE PTR tv140[ebp]
  000fa	eb 06		 jmp	 SHORT $LN1@Endwrite
$LN10@Endwrite:

; 773  : 				}
; 774  : 
; 775  : 			case codecvt_base::noconv:
; 776  : 				return (true);	// nothing to do

  000fc	b0 01		 mov	 al, 1
  000fe	eb 02		 jmp	 SHORT $LN1@Endwrite
$LN11@Endwrite:

; 777  : 
; 778  : 			default:
; 779  : 				return (false);	// conversion failed

  00100	32 c0		 xor	 al, al
$LN1@Endwrite:

; 780  : 			}
; 781  : 		}

  00102	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00105	33 cd		 xor	 ecx, ebp
  00107	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c3		 ret	 0
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__Nw$1 = -24						; size = 4
tv66 = -20						; size = 4
__Pb$2 = -16						; size = 4
__Pn$3 = -12						; size = 4
__Nr$4 = -8						; size = 4
_this$ = -4						; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 714  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 715  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 716  : 
; 717  : 		_Closef = _Which == _Openfl;

  00009	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  0000d	75 09		 jne	 SHORT $LN4@Init
  0000f	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN5@Init
$LN4@Init:
  00018	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN5@Init:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8a 4d ec	 mov	 cl, BYTE PTR tv66[ebp]
  00025	88 48 48	 mov	 BYTE PTR [eax+72], cl

; 718  : 		_Wrotesome = false;

  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	c6 42 3d 00	 mov	 BYTE PTR [edx+61], 0

; 719  : 
; 720  : 		_Mysb::_Init();	// initialize stream buffer base object

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 721  : 
; 722  : 		if (_File != nullptr && sizeof (_Elem) == 1)

  00037	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  0003b	74 5c		 je	 SHORT $LN2@Init
  0003d	b8 01 00 00 00	 mov	 eax, 1
  00042	85 c0		 test	 eax, eax
  00044	74 53		 je	 SHORT $LN2@Init

; 723  : 			{	// point inside C stream with [first, first + count) buffer
; 724  : 			_Elem **_Pb = nullptr;

  00046	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Pb$2[ebp], 0

; 725  : 			_Elem **_Pn = nullptr;

  0004d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR __Pn$3[ebp], 0

; 726  : 			int *_Nr = nullptr;

  00054	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Nr$4[ebp], 0

; 727  : 
; 728  : 			::_get_stream_buffer_pointers(

  0005b	8d 4d f8	 lea	 ecx, DWORD PTR __Nr$4[ebp]
  0005e	51		 push	 ecx
  0005f	8d 55 f4	 lea	 edx, DWORD PTR __Pn$3[ebp]
  00062	52		 push	 edx
  00063	8d 45 f0	 lea	 eax, DWORD PTR __Pb$2[ebp]
  00066	50		 push	 eax
  00067	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 __get_stream_buffer_pointers
  00070	83 c4 10	 add	 esp, 16			; 00000010H

; 729  : 				_File,
; 730  : 				reinterpret_cast<char***>(&_Pb),
; 731  : 				reinterpret_cast<char***>(&_Pn),
; 732  : 				&_Nr);
; 733  : 			int *_Nw = _Nr;

  00073	8b 55 f8	 mov	 edx, DWORD PTR __Nr$4[ebp]
  00076	89 55 e8	 mov	 DWORD PTR __Nw$1[ebp], edx

; 734  : 
; 735  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  00079	8b 45 e8	 mov	 eax, DWORD PTR __Nw$1[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  00080	51		 push	 ecx
  00081	8b 55 f0	 mov	 edx, DWORD PTR __Pb$2[ebp]
  00084	52		 push	 edx
  00085	8b 45 f8	 mov	 eax, DWORD PTR __Nr$4[ebp]
  00088	50		 push	 eax
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __Pn$3[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 f0	 mov	 edx, DWORD PTR __Pb$2[ebp]
  00090	52		 push	 edx
  00091	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ; std::basic_streambuf<char,std::char_traits<char> >::_Init
$LN2@Init:

; 736  : 			}
; 737  : 
; 738  : 		_Myfile = _File;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  0009f	89 48 4c	 mov	 DWORD PTR [eax+76], ecx

; 739  : 		_State = _Stinit;

  000a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A
  000aa	89 42 40	 mov	 DWORD PTR [edx+64], eax
  000ad	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A+4
  000b3	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 740  : 		_Pcvt = nullptr;	// pointer to codecvt facet

  000b6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0

; 741  : 		}

  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 709  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 710  : 		_Initcvt(_STD use_facet<_Cvt>(_Loc));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 711  : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 702  : 		{	// synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 703  : 		return (_Myfile == nullptr

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00010	74 51		 je	 SHORT $LN3@sync
  00012	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00023	ff d0		 call	 eax
  00025	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  00028	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0002d	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00030	8d 4d f4	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	51		 push	 ecx
  00034	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0003d	83 c4 08	 add	 esp, 8
  00040	0f b6 c0	 movzx	 eax, al
  00043	85 c0		 test	 eax, eax
  00045	75 1c		 jne	 SHORT $LN3@sync
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 _fflush
  00053	83 c4 04	 add	 esp, 4
  00056	85 c0		 test	 eax, eax
  00058	7d 09		 jge	 SHORT $LN3@sync
  0005a	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv86[ebp], -1
  00061	eb 07		 jmp	 SHORT $LN4@sync
$LN3@sync:
  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN4@sync:
  0006a	8b 45 f8	 mov	 eax, DWORD PTR tv86[ebp]

; 704  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 705  : 			|| 0 <= _CSTD fflush(_Myfile) ? 0 : -1);
; 706  : 		}

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 689  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 690  : 		if (_Myfile == nullptr || _CSTD setvbuf(_Myfile, (char *)_Buffer,

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00010	74 3d		 je	 SHORT $LN4@setbuf
  00012	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00016	75 11		 jne	 SHORT $LN6@setbuf
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001b	0b 4d 10	 or	 ecx, DWORD PTR __Count$[ebp+4]
  0001e	75 09		 jne	 SHORT $LN6@setbuf
  00020	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR tv71[ebp], 4
  00027	eb 07		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN7@setbuf:
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00033	52		 push	 edx
  00034	8b 45 f8	 mov	 eax, DWORD PTR tv71[ebp]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 _setvbuf
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	85 c0		 test	 eax, eax
  0004d	74 06		 je	 SHORT $LN2@setbuf
$LN4@setbuf:

; 691  : 			_Buffer == nullptr && _Count == 0 ? _IONBF : _IOFBF,
; 692  : 			(size_t)_Count * sizeof (_Elem)) != 0)
; 693  : 			return (nullptr);	// failed

  0004f	33 c0		 xor	 eax, eax
  00051	eb 16		 jmp	 SHORT $LN1@setbuf

; 694  : 		else

  00053	eb 14		 jmp	 SHORT $LN1@setbuf
$LN2@setbuf:

; 695  : 			{	// new buffer, reinitialize pointers
; 696  : 			_Init(_Myfile, _Openfl);

  00055	6a 01		 push	 1
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  0005d	52		 push	 edx
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 697  : 			return (this);

  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@setbuf:

; 698  : 			}
; 699  : 		}

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
$T1 = -20						; size = 8
__Off$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 675  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 676  : 		off_type _Off = static_cast<off_type>(_Pos);

  00009	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  0000c	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QBE_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00011	89 45 f4	 mov	 DWORD PTR __Off$[ebp], eax
  00014	89 55 f8	 mov	 DWORD PTR __Off$[ebp+4], edx

; 677  : 
; 678  : 		if (_Myfile == nullptr || !_Endwrite() || _CSTD fsetpos(_Myfile, &_Off) != 0)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0001e	74 26		 je	 SHORT $LN3@seekpos
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00028	0f b6 c8	 movzx	 ecx, al
  0002b	85 c9		 test	 ecx, ecx
  0002d	74 17		 je	 SHORT $LN3@seekpos
  0002f	8d 55 f4	 lea	 edx, DWORD PTR __Off$[ebp]
  00032	52		 push	 edx
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _fsetpos
  0003f	83 c4 08	 add	 esp, 8
  00042	85 c0		 test	 eax, eax
  00044	74 11		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 679  : 			{
; 680  : 			return (pos_type(-1));	// report failure

  00046	6a ff		 push	 -1
  00048	6a ff		 push	 -1
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00052	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00055	eb 40		 jmp	 SHORT $LN1@seekpos
$LN2@seekpos:

; 681  : 			}
; 682  : 
; 683  : 		_State = _Pos.state();

  00057	8d 55 ec	 lea	 edx, DWORD PTR $T1[ebp]
  0005a	52		 push	 edx
  0005b	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  0005e	e8 00 00 00 00	 call	 ?state@?$fpos@U_Mbstatet@@@std@@QBE?AU_Mbstatet@@XZ ; std::fpos<_Mbstatet>::state
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	89 48 40	 mov	 DWORD PTR [eax+64], ecx
  0006e	89 50 44	 mov	 DWORD PTR [eax+68], edx

; 684  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 685  : 		return (pos_type(_State, _Off));	// return new position

  00079	8b 4d f8	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0007c	51		 push	 ecx
  0007d	8b 55 f4	 mov	 edx, DWORD PTR __Off$[ebp]
  00080	52		 push	 edx
  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  00087	51		 push	 ecx
  00088	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  0008b	52		 push	 edx
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008f	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00094	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekpos:

; 686  : 		}

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Fileposition$ = -12					; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 652  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 653  : 		fpos_t _Fileposition;
; 654  : 
; 655  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 656  : 			&& _Way == ios_base::cur	// a relative seek
; 657  : 			&& _Pcvt == nullptr)	// not converting

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00017	3b c1		 cmp	 eax, ecx
  00019	75 21		 jne	 SHORT $LN2@seekoff
  0001b	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0001f	75 1b		 jne	 SHORT $LN2@seekoff
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00028	75 12		 jne	 SHORT $LN2@seekoff

; 658  : 			{
; 659  : 			_Off -= static_cast<off_type>(sizeof(_Elem));	// back up over _Elem bytes

  0002a	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  0002d	83 e8 01	 sub	 eax, 1
  00030	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  00033	83 d9 00	 sbb	 ecx, 0
  00036	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00039	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN2@seekoff:

; 660  : 			}
; 661  : 
; 662  : 		if (_Myfile == nullptr || !_Endwrite()
; 663  : 			|| ((_Off != 0 || _Way != ios_base::cur)
; 664  : 				&& _CSTD _fseeki64(_Myfile, _Off, _Way) != 0)
; 665  : 			|| _CSTD fgetpos(_Myfile, &_Fileposition) != 0)

  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  00043	74 53		 je	 SHORT $LN4@seekoff
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  0004d	0f b6 c0	 movzx	 eax, al
  00050	85 c0		 test	 eax, eax
  00052	74 44		 je	 SHORT $LN4@seekoff
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00057	0b 4d 10	 or	 ecx, DWORD PTR __Off$[ebp+4]
  0005a	75 06		 jne	 SHORT $LN6@seekoff
  0005c	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  00060	74 1f		 je	 SHORT $LN5@seekoff
$LN6@seekoff:
  00062	8b 55 14	 mov	 edx, DWORD PTR __Way$[ebp]
  00065	52		 push	 edx
  00066	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00069	50		 push	 eax
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 __fseeki64
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	85 c0		 test	 eax, eax
  0007f	75 17		 jne	 SHORT $LN4@seekoff
$LN5@seekoff:
  00081	8d 4d f4	 lea	 ecx, DWORD PTR __Fileposition$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00088	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 _fgetpos
  00091	83 c4 08	 add	 esp, 8
  00094	85 c0		 test	 eax, eax
  00096	74 11		 je	 SHORT $LN3@seekoff
$LN4@seekoff:

; 666  : 			{
; 667  : 			return (pos_type(-1));	// report failure

  00098	6a ff		 push	 -1
  0009a	6a ff		 push	 -1
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0009f	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a7	eb 26		 jmp	 SHORT $LN1@seekoff
$LN3@seekoff:

; 668  : 			}
; 669  : 
; 670  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 671  : 		return (pos_type(_State, _Fileposition));	// return new position

  000b1	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  000b4	51		 push	 ecx
  000b5	8b 55 f4	 mov	 edx, DWORD PTR __Fileposition$[ebp]
  000b8	52		 push	 edx
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  000bf	51		 push	 ecx
  000c0	8b 50 40	 mov	 edx, DWORD PTR [eax+64]
  000c3	52		 push	 edx
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000c7	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@U_Mbstatet@@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000cc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@seekoff:

; 672  : 		}

  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Start_count$1 = -20					; size = 8
__Size$2 = -12						; size = 8
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 612  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 613  : 		if _CONSTEXPR_IF (sizeof(_Elem) == 1)

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 08 01 00
	00		 je	 $LN2@xsputn

; 614  : 			{
; 615  : 			if (_Pcvt)

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0001d	74 19		 je	 SHORT $LN4@xsputn

; 616  : 				{	// if we need a nontrivial codecvt transform, do the default expensive thing
; 617  : 				return (_Mysb::xsputn(_Ptr, _Count));

  0001f	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
  00033	e9 fa 00 00 00	 jmp	 $LN1@xsputn
$LN4@xsputn:

; 618  : 				}
; 619  : 
; 620  : 			const streamsize _Start_count = _Count;

  00038	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0003b	89 55 ec	 mov	 DWORD PTR __Start_count$1[ebp], edx
  0003e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00041	89 45 f0	 mov	 DWORD PTR __Start_count$1[ebp+4], eax

; 621  : 			streamsize _Size = _Mysb::_Pnavail();

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  0004c	89 45 f4	 mov	 DWORD PTR __Size$2[ebp], eax
  0004f	89 55 f8	 mov	 DWORD PTR __Size$2[ebp+4], edx

; 622  : 			if (0 < _Count && 0 < _Size)

  00052	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00056	7c 74		 jl	 SHORT $LN5@xsputn
  00058	7f 06		 jg	 SHORT $LN9@xsputn
  0005a	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0005e	76 6c		 jbe	 SHORT $LN5@xsputn
$LN9@xsputn:
  00060	83 7d f8 00	 cmp	 DWORD PTR __Size$2[ebp+4], 0
  00064	7c 66		 jl	 SHORT $LN5@xsputn
  00066	7f 06		 jg	 SHORT $LN10@xsputn
  00068	83 7d f4 00	 cmp	 DWORD PTR __Size$2[ebp], 0
  0006c	76 5e		 jbe	 SHORT $LN5@xsputn
$LN10@xsputn:

; 623  : 				{	// copy to write buffer
; 624  : 				if (_Count < _Size)

  0006e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00071	3b 4d f8	 cmp	 ecx, DWORD PTR __Size$2[ebp+4]
  00074	7f 16		 jg	 SHORT $LN6@xsputn
  00076	7c 08		 jl	 SHORT $LN11@xsputn
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0007b	3b 55 f4	 cmp	 edx, DWORD PTR __Size$2[ebp]
  0007e	73 0c		 jae	 SHORT $LN6@xsputn
$LN11@xsputn:

; 625  : 					{
; 626  : 					_Size = _Count;

  00080	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	89 45 f4	 mov	 DWORD PTR __Size$2[ebp], eax
  00086	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00089	89 4d f8	 mov	 DWORD PTR __Size$2[ebp+4], ecx
$LN6@xsputn:

; 627  : 					}
; 628  : 
; 629  : 				_Traits::copy(_Mysb::pptr(), _Ptr, static_cast<size_t>(_Size));

  0008c	8b 55 f4	 mov	 edx, DWORD PTR __Size$2[ebp]
  0008f	52		 push	 edx
  00090	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00093	50		 push	 eax
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 630  : 				_Ptr += _Size;

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __Size$2[ebp]
  000a8	03 4d 08	 add	 ecx, DWORD PTR __Ptr$[ebp]
  000ab	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx

; 631  : 				_Count -= _Size;

  000ae	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000b1	2b 55 f4	 sub	 edx, DWORD PTR __Size$2[ebp]
  000b4	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  000b7	1b 45 f8	 sbb	 eax, DWORD PTR __Size$2[ebp+4]
  000ba	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  000bd	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax

; 632  : 				_Mysb::pbump(static_cast<int>(_Size));

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __Size$2[ebp]
  000c3	51		 push	 ecx
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
$LN5@xsputn:

; 633  : 				}
; 634  : 
; 635  : 			if (0 < _Count && _Myfile)

  000cc	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  000d0	7c 3c		 jl	 SHORT $LN7@xsputn
  000d2	7f 06		 jg	 SHORT $LN12@xsputn
  000d4	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000d8	76 34		 jbe	 SHORT $LN7@xsputn
$LN12@xsputn:
  000da	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000dd	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  000e1	74 2b		 je	 SHORT $LN7@xsputn

; 636  : 				{	// open C stream, attempt write
; 637  : 				_Count -= _CSTD fwrite(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);

  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000e9	51		 push	 ecx
  000ea	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000ed	52		 push	 edx
  000ee	6a 01		 push	 1
  000f0	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 _fwrite
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
  000fc	33 c9		 xor	 ecx, ecx
  000fe	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00101	2b d0		 sub	 edx, eax
  00103	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00106	1b c1		 sbb	 eax, ecx
  00108	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  0010b	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax
$LN7@xsputn:

; 638  : 				}
; 639  : 
; 640  : 			return (_Start_count - _Count);

  0010e	8b 45 ec	 mov	 eax, DWORD PTR __Start_count$1[ebp]
  00111	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00114	8b 55 f0	 mov	 edx, DWORD PTR __Start_count$1[ebp+4]
  00117	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  0011a	eb 16		 jmp	 SHORT $LN1@xsputn

; 641  : 			}
; 642  : 		else

  0011c	eb 14		 jmp	 SHORT $LN1@xsputn
$LN2@xsputn:

; 643  : 			{	// non-chars always get element-by-element processing
; 644  : 			return (_Mysb::xsputn(_Ptr, _Count));

  0011e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00121	51		 push	 ecx
  00122	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00125	52		 push	 edx
  00126	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00129	50		 push	 eax
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
$LN1@xsputn:

; 645  : 			}
; 646  : 		}

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Start_count$1 = -20					; size = 8
__Size$2 = -12						; size = 8
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 574  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 575  : 		if _CONSTEXPR_IF (sizeof(_Elem) == 1)

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	85 c0		 test	 eax, eax
  00010	0f 84 10 01 00
	00		 je	 $LN2@xsgetn

; 576  : 			{
; 577  : 			if (_Pcvt)

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0001d	74 19		 je	 SHORT $LN4@xsgetn

; 578  : 				{	// if we need a nontrivial codecvt transform, do the default expensive thing
; 579  : 				return (_Mysb::xsgetn(_Ptr, _Count));

  0001f	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
  00033	e9 02 01 00 00	 jmp	 $LN1@xsgetn
$LN4@xsgetn:

; 580  : 				}
; 581  : 
; 582  : 			const streamsize _Start_count = _Count;

  00038	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0003b	89 55 ec	 mov	 DWORD PTR __Start_count$1[ebp], edx
  0003e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00041	89 45 f0	 mov	 DWORD PTR __Start_count$1[ebp+4], eax

; 583  : 			streamsize _Size = _Mysb::_Gnavail();

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  0004c	89 45 f4	 mov	 DWORD PTR __Size$2[ebp], eax
  0004f	89 55 f8	 mov	 DWORD PTR __Size$2[ebp+4], edx

; 584  : 			if (0 < _Count && 0 < _Size)

  00052	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00056	7c 74		 jl	 SHORT $LN5@xsgetn
  00058	7f 06		 jg	 SHORT $LN9@xsgetn
  0005a	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0005e	76 6c		 jbe	 SHORT $LN5@xsgetn
$LN9@xsgetn:
  00060	83 7d f8 00	 cmp	 DWORD PTR __Size$2[ebp+4], 0
  00064	7c 66		 jl	 SHORT $LN5@xsgetn
  00066	7f 06		 jg	 SHORT $LN10@xsgetn
  00068	83 7d f4 00	 cmp	 DWORD PTR __Size$2[ebp], 0
  0006c	76 5e		 jbe	 SHORT $LN5@xsgetn
$LN10@xsgetn:

; 585  : 				{	// copy from get area
; 586  : 				if (_Count < _Size)

  0006e	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00071	3b 4d f8	 cmp	 ecx, DWORD PTR __Size$2[ebp+4]
  00074	7f 16		 jg	 SHORT $LN6@xsgetn
  00076	7c 08		 jl	 SHORT $LN11@xsgetn
  00078	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0007b	3b 55 f4	 cmp	 edx, DWORD PTR __Size$2[ebp]
  0007e	73 0c		 jae	 SHORT $LN6@xsgetn
$LN11@xsgetn:

; 587  : 					{
; 588  : 					_Size = _Count;

  00080	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	89 45 f4	 mov	 DWORD PTR __Size$2[ebp], eax
  00086	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00089	89 4d f8	 mov	 DWORD PTR __Size$2[ebp+4], ecx
$LN6@xsgetn:

; 589  : 					}
; 590  : 
; 591  : 				_Traits::copy(_Ptr, _Mysb::gptr(), static_cast<size_t>(_Size));

  0008c	8b 55 f4	 mov	 edx, DWORD PTR __Size$2[ebp]
  0008f	52		 push	 edx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00098	50		 push	 eax
  00099	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 592  : 				_Ptr += _Size;

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __Size$2[ebp]
  000a8	03 4d 08	 add	 ecx, DWORD PTR __Ptr$[ebp]
  000ab	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx

; 593  : 				_Count -= _Size;

  000ae	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000b1	2b 55 f4	 sub	 edx, DWORD PTR __Size$2[ebp]
  000b4	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  000b7	1b 45 f8	 sbb	 eax, DWORD PTR __Size$2[ebp+4]
  000ba	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  000bd	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax

; 594  : 				_Mysb::gbump(static_cast<int>(_Size));

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __Size$2[ebp]
  000c3	51		 push	 ecx
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
$LN5@xsgetn:

; 595  : 				}
; 596  : 
; 597  : 			if (0 < _Count && _Myfile)

  000cc	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  000d0	7c 44		 jl	 SHORT $LN7@xsgetn
  000d2	7f 06		 jg	 SHORT $LN12@xsgetn
  000d4	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  000d8	76 3c		 jbe	 SHORT $LN7@xsgetn
$LN12@xsgetn:
  000da	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000dd	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  000e1	74 33		 je	 SHORT $LN7@xsgetn

; 598  : 				{	// open C stream, attempt read
; 599  : 				_Reset_back();	// revert from _Mychar buffer

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 600  : 				_Count -= _CSTD fread(_Ptr, sizeof(_Elem), static_cast<size_t>(_Count), _Myfile);

  000eb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  000f1	51		 push	 ecx
  000f2	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000f5	52		 push	 edx
  000f6	6a 01		 push	 1
  000f8	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 _fread
  00101	83 c4 10	 add	 esp, 16			; 00000010H
  00104	33 c9		 xor	 ecx, ecx
  00106	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00109	2b d0		 sub	 edx, eax
  0010b	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0010e	1b c1		 sbb	 eax, ecx
  00110	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  00113	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax
$LN7@xsgetn:

; 601  : 				}
; 602  : 
; 603  : 			return (_Start_count - _Count);

  00116	8b 45 ec	 mov	 eax, DWORD PTR __Start_count$1[ebp]
  00119	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  0011c	8b 55 f0	 mov	 edx, DWORD PTR __Start_count$1[ebp+4]
  0011f	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00122	eb 16		 jmp	 SHORT $LN1@xsgetn

; 604  : 			}
; 605  : 		else

  00124	eb 14		 jmp	 SHORT $LN1@xsgetn
$LN2@xsgetn:

; 606  : 			{	// non-chars always get element-by-element processing
; 607  : 			return (_Mysb::xsgetn(_Ptr, _Count));

  00126	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00129	51		 push	 ecx
  0012a	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0012d	52		 push	 edx
  0012e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00131	50		 push	 eax
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
$LN1@xsgetn:

; 608  : 			}
; 609  : 		}

  0013a	8b e5		 mov	 esp, ebp
  0013c	5d		 pop	 ebp
  0013d	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T2 = -88						; size = 4
$T3 = -84						; size = 4
$T4 = -80						; size = 4
__Dest$5 = -76						; size = 4
$T6 = -72						; size = 4
__Meta$7 = -68						; size = 4
tv139 = -64						; size = 4
__Src$8 = -60						; size = 4
tv169 = -56						; size = 4
__Nleft$9 = -52						; size = 4
__Ch$10 = -47						; size = 1
__Ch$11 = -45						; size = 1
_this$ = -44						; size = 4
__Str$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 508  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 509  : 		if (_Mysb::gptr() != nullptr && _Mysb::gptr() < _Mysb::egptr())

  0002c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00034	85 c0		 test	 eax, eax
  00036	74 2c		 je	 SHORT $LN9@uflow
  00038	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00040	8b f0		 mov	 esi, eax
  00042	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  0004a	3b f0		 cmp	 esi, eax
  0004c	73 16		 jae	 SHORT $LN9@uflow

; 510  : 			{
; 511  : 			return (_Traits::to_int_type(*_Mysb::_Gninc()));	// return buffered

  0004e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0005c	83 c4 04	 add	 esp, 4
  0005f	e9 ef 01 00 00	 jmp	 $LN1@uflow
$LN9@uflow:

; 512  : 			}
; 513  : 
; 514  : 		if (_Myfile == nullptr)

  00064	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0006b	75 0a		 jne	 SHORT $LN10@uflow

; 515  : 			{
; 516  : 			return (_Traits::eof());	// no open C stream, fail

  0006d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00072	e9 dc 01 00 00	 jmp	 $LN1@uflow
$LN10@uflow:

; 517  : 			}
; 518  : 
; 519  : 		_Reset_back();	// revert from _Mychar buffer

  00077	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 520  : 		if (_Pcvt == nullptr)

  0007f	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00086	75 3b		 jne	 SHORT $LN11@uflow

; 521  : 			{	// no codecvt facet, just get it
; 522  : 			_Elem _Ch;
; 523  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch) : _Traits::eof());

  00088	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 42 4c	 mov	 eax, DWORD PTR [edx+76]
  0008e	50		 push	 eax
  0008f	8d 4d d3	 lea	 ecx, DWORD PTR __Ch$11[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  00098	83 c4 08	 add	 esp, 8
  0009b	0f b6 d0	 movzx	 edx, al
  0009e	85 d2		 test	 edx, edx
  000a0	74 11		 je	 SHORT $LN18@uflow
  000a2	8d 45 d3	 lea	 eax, DWORD PTR __Ch$11[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000ab	83 c4 04	 add	 esp, 4
  000ae	89 45 c0	 mov	 DWORD PTR tv139[ebp], eax
  000b1	eb 08		 jmp	 SHORT $LN19@uflow
$LN18@uflow:
  000b3	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b8	89 45 c0	 mov	 DWORD PTR tv139[ebp], eax
$LN19@uflow:
  000bb	8b 45 c0	 mov	 eax, DWORD PTR tv139[ebp]
  000be	e9 90 01 00 00	 jmp	 $LN1@uflow
$LN11@uflow:

; 524  : 			}
; 525  : 
; 526  : 		// build string until codecvt succeeds
; 527  : 		string _Str;

  000c3	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN4@uflow:

; 528  : 
; 529  : 		for (;;)
; 530  : 			{	// get using codecvt facet
; 531  : 			const char * _Src;
; 532  : 			int _Meta = _CSTD fgetc(_Myfile);

  000d2	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 _fgetc
  000de	83 c4 04	 add	 esp, 4
  000e1	89 45 bc	 mov	 DWORD PTR __Meta$7[ebp], eax

; 533  : 
; 534  : 			if (_Meta == EOF)

  000e4	83 7d bc ff	 cmp	 DWORD PTR __Meta$7[ebp], -1
  000e8	75 1f		 jne	 SHORT $LN12@uflow

; 535  : 				{
; 536  : 				return (_Traits::eof());	// partial char?

  000ea	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000ef	89 45 b8	 mov	 DWORD PTR $T6[ebp], eax
  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  000fc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00101	8b 45 b8	 mov	 eax, DWORD PTR $T6[ebp]
  00104	e9 4a 01 00 00	 jmp	 $LN1@uflow
$LN12@uflow:

; 537  : 				}
; 538  : 
; 539  : 			_Str.push_back(static_cast<char>(_Meta));	// append byte and convert

  00109	0f b6 45 bc	 movzx	 eax, BYTE PTR __Meta$7[ebp]
  0010d	50		 push	 eax
  0010e	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00111	e8 00 00 00 00	 call	 ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back

; 540  : 
; 541  : 			_Elem _Ch;
; 542  : 			_Elem * _Dest;
; 543  : 			switch (_Pcvt->in(_State, _Str.data(), _Str.data() + _Str.size(), _Src, &_Ch, &_Ch + 1, _Dest))

  00116	8d 4d b4	 lea	 ecx, DWORD PTR __Dest$5[ebp]
  00119	51		 push	 ecx
  0011a	8d 55 d2	 lea	 edx, DWORD PTR __Ch$10[ebp+1]
  0011d	52		 push	 edx
  0011e	8d 45 d1	 lea	 eax, DWORD PTR __Ch$10[ebp]
  00121	50		 push	 eax
  00122	8d 4d c4	 lea	 ecx, DWORD PTR __Src$8[ebp]
  00125	51		 push	 ecx
  00126	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00129	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  0012e	8b f0		 mov	 esi, eax
  00130	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00133	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00138	03 f0		 add	 esi, eax
  0013a	56		 push	 esi
  0013b	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0013e	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00143	50		 push	 eax
  00144	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00147	83 c2 40	 add	 edx, 64			; 00000040H
  0014a	52		 push	 edx
  0014b	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00151	e8 00 00 00 00	 call	 ?in@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::in
  00156	89 45 c8	 mov	 DWORD PTR tv169[ebp], eax
  00159	83 7d c8 00	 cmp	 DWORD PTR tv169[ebp], 0
  0015d	0f 8c c0 00 00
	00		 jl	 $LN16@uflow
  00163	83 7d c8 01	 cmp	 DWORD PTR tv169[ebp], 1
  00167	7e 0f		 jle	 SHORT $LN13@uflow
  00169	83 7d c8 03	 cmp	 DWORD PTR tv169[ebp], 3
  0016d	0f 84 8e 00 00
	00		 je	 $LN15@uflow
  00173	e9 ab 00 00 00	 jmp	 $LN16@uflow
$LN13@uflow:

; 544  : 				{	// test result of converting one element
; 545  : 				case codecvt_base::partial:
; 546  : 				case codecvt_base::ok:
; 547  : 					if (_Dest != &_Ch)

  00178	8d 4d d1	 lea	 ecx, DWORD PTR __Ch$10[ebp]
  0017b	39 4d b4	 cmp	 DWORD PTR __Dest$5[ebp], ecx
  0017e	74 67		 je	 SHORT $LN14@uflow

; 548  : 						{	// got an element, put back excess and deliver it
; 549  : 						auto _Nleft = _Str.data() + _Str.size() - _Src;

  00180	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00183	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00188	8b f0		 mov	 esi, eax
  0018a	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0018d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00192	03 f0		 add	 esi, eax
  00194	2b 75 c4	 sub	 esi, DWORD PTR __Src$8[ebp]
  00197	89 75 cc	 mov	 DWORD PTR __Nleft$9[ebp], esi
$LN7@uflow:

; 550  : 						while (0 < _Nleft)

  0019a	83 7d cc 00	 cmp	 DWORD PTR __Nleft$9[ebp], 0
  0019e	7e 24		 jle	 SHORT $LN8@uflow

; 551  : 							{
; 552  : 							_CSTD ungetc(_Src[--_Nleft], _Myfile);

  001a0	8b 55 cc	 mov	 edx, DWORD PTR __Nleft$9[ebp]
  001a3	83 ea 01	 sub	 edx, 1
  001a6	89 55 cc	 mov	 DWORD PTR __Nleft$9[ebp], edx
  001a9	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  001af	51		 push	 ecx
  001b0	8b 55 c4	 mov	 edx, DWORD PTR __Src$8[ebp]
  001b3	03 55 cc	 add	 edx, DWORD PTR __Nleft$9[ebp]
  001b6	0f be 02	 movsx	 eax, BYTE PTR [edx]
  001b9	50		 push	 eax
  001ba	e8 00 00 00 00	 call	 _ungetc
  001bf	83 c4 08	 add	 esp, 8

; 553  : 							}

  001c2	eb d6		 jmp	 SHORT $LN7@uflow
$LN8@uflow:

; 554  : 
; 555  : 						return (_Traits::to_int_type(_Ch));

  001c4	8d 4d d1	 lea	 ecx, DWORD PTR __Ch$10[ebp]
  001c7	51		 push	 ecx
  001c8	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  001cd	83 c4 04	 add	 esp, 4
  001d0	89 45 b0	 mov	 DWORD PTR $T4[ebp], eax
  001d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001da	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  001dd	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001e2	8b 45 b0	 mov	 eax, DWORD PTR $T4[ebp]
  001e5	eb 6c		 jmp	 SHORT $LN1@uflow
$LN14@uflow:

; 556  : 						}
; 557  : 
; 558  : 					_Str.erase(0, static_cast<size_t>(_Src - _Str.data()));	// partial, discard used input

  001e7	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  001ea	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  001ef	8b 55 c4	 mov	 edx, DWORD PTR __Src$8[ebp]
  001f2	2b d0		 sub	 edx, eax
  001f4	52		 push	 edx
  001f5	6a 00		 push	 0
  001f7	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  001fa	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 559  : 					break;

  001ff	eb 3e		 jmp	 SHORT $LN5@uflow
$LN15@uflow:

; 560  : 
; 561  : 				case codecvt_base::noconv:
; 562  : 					// noconv is only possible if _Elem is char, so we can use it directly
; 563  : 					return (static_cast<int_type>(_Str.front()));

  00201	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00204	e8 00 00 00 00	 call	 ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
  00209	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0020c	89 45 ac	 mov	 DWORD PTR $T3[ebp], eax
  0020f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00216	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00219	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0021e	8b 45 ac	 mov	 eax, DWORD PTR $T3[ebp]
  00221	eb 30		 jmp	 SHORT $LN1@uflow
$LN16@uflow:

; 564  : 
; 565  : 				default:
; 566  : 					return (_Traits::eof());	// conversion failed

  00223	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00228	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
  0022b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00232	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00235	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0023a	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
  0023d	eb 14		 jmp	 SHORT $LN1@uflow
$LN5@uflow:

; 567  : 				}
; 568  : 			}

  0023f	e9 8e fe ff ff	 jmp	 $LN4@uflow

; 569  : 		}

  00244	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0024b	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0024e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN1@uflow:
  00253	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00256	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025d	59		 pop	 ecx
  0025e	5e		 pop	 esi
  0025f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00262	33 cd		 xor	 ecx, ebp
  00264	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Meta$ = -8						; size = 4
_this$ = -4						; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 493  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 494  : 		int_type _Meta;
; 495  : 		if (_Mysb::gptr() != nullptr
; 496  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00012	85 c0		 test	 eax, eax
  00014	74 2b		 je	 SHORT $LN2@underflow
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0001e	8b f0		 mov	 esi, eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  00028	3b f0		 cmp	 esi, eax
  0002a	73 15		 jae	 SHORT $LN2@underflow

; 497  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0003a	83 c4 04	 add	 esp, 4
  0003d	eb 4c		 jmp	 SHORT $LN1@underflow
  0003f	eb 4a		 jmp	 SHORT $LN1@underflow
$LN2@underflow:

; 498  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 10		 mov	 edx, DWORD PTR [eax]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0004c	ff d0		 call	 eax
  0004e	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  00051	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00056	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00059	8d 4d f8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  0005c	51		 push	 ecx
  0005d	8d 55 f4	 lea	 edx, DWORD PTR $T1[ebp]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00066	83 c4 08	 add	 esp, 8
  00069	0f b6 c0	 movzx	 eax, al
  0006c	85 c0		 test	 eax, eax
  0006e	74 07		 je	 SHORT $LN4@underflow

; 499  : 			return (_Meta);	// uflow failed, return EOF

  00070	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
  00073	eb 16		 jmp	 SHORT $LN1@underflow

; 500  : 		else

  00075	eb 14		 jmp	 SHORT $LN1@underflow
$LN4@underflow:

; 501  : 			{	// get a char, don't point past it
; 502  : 			pbackfail(_Meta);

  00077	8b 4d f8	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	8b 02		 mov	 eax, DWORD PTR [edx]
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00086	ff d2		 call	 edx

; 503  : 			return (_Meta);

  00088	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN1@underflow:

; 504  : 			}
; 505  : 		}

  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -1						; size = 1
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 468  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 469  : 		if (_Mysb::gptr() != nullptr
; 470  : 			&& _Mysb::eback() < _Mysb::gptr()
; 471  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)

  0000a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00012	85 c0		 test	 eax, eax
  00014	0f 84 88 00 00
	00		 je	 $LN2@pbackfail
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00022	8b f0		 mov	 esi, eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0002c	3b f0		 cmp	 esi, eax
  0002e	73 72		 jae	 SHORT $LN2@pbackfail
  00030	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00035	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
  00038	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d f4	 lea	 ecx, DWORD PTR $T3[ebp]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00045	83 c4 08	 add	 esp, 8
  00048	0f b6 d0	 movzx	 edx, al
  0004b	85 d2		 test	 edx, edx
  0004d	75 35		 jne	 SHORT $LN4@pbackfail
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00057	b9 01 00 00 00	 mov	 ecx, 1
  0005c	6b d1 ff	 imul	 edx, ecx, -1
  0005f	03 c2		 add	 eax, edx
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00067	83 c4 04	 add	 esp, 4
  0006a	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0006d	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00070	50		 push	 eax
  00071	8d 4d f0	 lea	 ecx, DWORD PTR $T2[ebp]
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0007a	83 c4 08	 add	 esp, 8
  0007d	0f b6 d0	 movzx	 edx, al
  00080	85 d2		 test	 edx, edx
  00082	74 1e		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 472  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 473  : 				_Meta)))
; 474  : 			{	// just back up position
; 475  : 			_Mysb::_Gndec();

  00084	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec

; 476  : 			return (_Traits::not_eof(_Meta));

  0008c	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00095	83 c4 04	 add	 esp, 4
  00098	e9 a7 00 00 00	 jmp	 $LN1@pbackfail
  0009d	e9 a2 00 00 00	 jmp	 $LN1@pbackfail
$LN2@pbackfail:

; 477  : 			}
; 478  : 		else if (_Myfile == nullptr || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000a2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  000a9	74 1f		 je	 SHORT $LN7@pbackfail
  000ab	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b0	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000b3	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  000b6	52		 push	 edx
  000b7	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000c0	83 c4 08	 add	 esp, 8
  000c3	0f b6 c8	 movzx	 ecx, al
  000c6	85 c9		 test	 ecx, ecx
  000c8	74 09		 je	 SHORT $LN5@pbackfail
$LN7@pbackfail:

; 479  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  000ca	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000cf	eb 73		 jmp	 SHORT $LN1@pbackfail
  000d1	eb 71		 jmp	 SHORT $LN1@pbackfail
$LN5@pbackfail:

; 480  : 		else if (_Pcvt == nullptr && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  000d3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  000da	75 30		 jne	 SHORT $LN8@pbackfail
  000dc	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000e5	83 c4 04	 add	 esp, 4
  000e8	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000f1	52		 push	 edx
  000f2	8d 45 ff	 lea	 eax, DWORD PTR $T4[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  000fb	83 c4 08	 add	 esp, 8
  000fe	0f b6 c8	 movzx	 ecx, al
  00101	85 c9		 test	 ecx, ecx
  00103	74 07		 je	 SHORT $LN8@pbackfail

; 481  : 			return (_Meta);	// no facet and unget succeeded, return

  00105	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00108	eb 3a		 jmp	 SHORT $LN1@pbackfail
  0010a	eb 38		 jmp	 SHORT $LN1@pbackfail
$LN8@pbackfail:

; 482  : 		else if (_Mysb::gptr() != &_Mychar)

  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00114	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00117	83 c2 3c	 add	 edx, 60			; 0000003cH
  0011a	3b c2		 cmp	 eax, edx
  0011c	74 21		 je	 SHORT $LN10@pbackfail

; 483  : 			{	// putback to _Mychar
; 484  : 			_Mychar = _Traits::to_char_type(_Meta);

  0011e	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00127	83 c4 04	 add	 esp, 4
  0012a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	88 41 3c	 mov	 BYTE PTR [ecx+60], al

; 485  : 			_Set_back();	// switch to _Mychar buffer

  00130	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 486  : 			return (_Meta);

  00138	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0013b	eb 07		 jmp	 SHORT $LN1@pbackfail

; 487  : 			}
; 488  : 		else

  0013d	eb 05		 jmp	 SHORT $LN1@pbackfail
$LN10@pbackfail:

; 489  : 			return (_Traits::eof());	// nowhere to put back

  0013f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN1@pbackfail:

; 490  : 	}

  00144	5e		 pop	 esi
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
__Codecvt_temp_buf$ = -80				; size = 4
__Src$ = -76						; size = 4
__Dest$ = -72						; size = 4
$T1 = -68						; size = 4
tv184 = -64						; size = 4
tv147 = -60						; size = 4
__Count$2 = -56						; size = 4
tv163 = -52						; size = 4
__Ch$ = -46						; size = 1
_this$ = -44						; size = 4
__Str$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 408  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 409  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00015	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0001a	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
  0001d	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00020	50		 push	 eax
  00021	8d 4d bc	 lea	 ecx, DWORD PTR $T1[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0002a	83 c4 08	 add	 esp, 8
  0002d	0f b6 d0	 movzx	 edx, al
  00030	85 d2		 test	 edx, edx
  00032	74 11		 je	 SHORT $LN4@overflow

; 410  : 			{
; 411  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00034	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  0003d	83 c4 04	 add	 esp, 4
  00040	e9 81 01 00 00	 jmp	 $LN1@overflow
$LN4@overflow:

; 412  : 			}
; 413  : 
; 414  : 		if (_Mysb::pptr() != nullptr && _Mysb::pptr() < _Mysb::epptr())

  00045	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0004d	85 c0		 test	 eax, eax
  0004f	74 36		 je	 SHORT $LN5@overflow
  00051	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00059	8b f0		 mov	 esi, eax
  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  00063	3b f0		 cmp	 esi, eax
  00065	73 20		 jae	 SHORT $LN5@overflow

; 415  : 			{	// room in buffer, store it
; 416  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00067	8d 4d 08	 lea	 ecx, DWORD PTR __Meta$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00070	83 c4 04	 add	 esp, 4
  00073	8a d8		 mov	 bl, al
  00075	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  0007d	88 18		 mov	 BYTE PTR [eax], bl

; 417  : 			return (_Meta);

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00082	e9 3f 01 00 00	 jmp	 $LN1@overflow
$LN5@overflow:

; 418  : 			}
; 419  : 
; 420  : 		if (_Myfile == nullptr)

  00087	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	83 7a 4c 00	 cmp	 DWORD PTR [edx+76], 0
  0008e	75 0a		 jne	 SHORT $LN6@overflow

; 421  : 			{
; 422  : 			return (_Traits::eof());	// no open C stream, fail

  00090	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00095	e9 2c 01 00 00	 jmp	 $LN1@overflow
$LN6@overflow:

; 423  : 			}
; 424  : 
; 425  : 		_Reset_back();	// revert from _Mychar buffer

  0009a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 426  : 		if (_Pcvt == nullptr)

  000a2	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  000a9	75 3e		 jne	 SHORT $LN7@overflow

; 427  : 			{	// no codecvt facet, put as is
; 428  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile) ? _Meta : _Traits::eof());

  000ab	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  000b1	52		 push	 edx
  000b2	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000bb	83 c4 04	 add	 esp, 4
  000be	0f b6 c8	 movzx	 ecx, al
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  000c7	83 c4 08	 add	 esp, 8
  000ca	0f b6 d0	 movzx	 edx, al
  000cd	85 d2		 test	 edx, edx
  000cf	74 08		 je	 SHORT $LN14@overflow
  000d1	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000d4	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
  000d7	eb 08		 jmp	 SHORT $LN15@overflow
$LN14@overflow:
  000d9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000de	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
$LN15@overflow:
  000e1	8b 45 c4	 mov	 eax, DWORD PTR tv147[ebp]
  000e4	e9 dd 00 00 00	 jmp	 $LN1@overflow
$LN7@overflow:

; 429  : 			}
; 430  : 
; 431  : 		// put using codecvt facet
; 432  : 		constexpr size_t _Codecvt_temp_buf = 32;

  000e9	c7 45 b0 20 00
	00 00		 mov	 DWORD PTR __Codecvt_temp_buf$[ebp], 32 ; 00000020H

; 433  : 		char _Str[_Codecvt_temp_buf];
; 434  : 		const _Elem _Ch = _Traits::to_char_type(_Meta);

  000f0	8d 4d 08	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000f3	51		 push	 ecx
  000f4	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000f9	83 c4 04	 add	 esp, 4
  000fc	88 45 d2	 mov	 BYTE PTR __Ch$[ebp], al

; 435  : 		const _Elem * _Src;
; 436  : 		char * _Dest;
; 437  : 		switch (_Pcvt->out(_State, &_Ch, &_Ch + 1, _Src, _Str, _Str + _Codecvt_temp_buf, _Dest))

  000ff	8d 55 b8	 lea	 edx, DWORD PTR __Dest$[ebp]
  00102	52		 push	 edx
  00103	8d 45 f8	 lea	 eax, DWORD PTR __Str$[ebp+32]
  00106	50		 push	 eax
  00107	8d 4d d8	 lea	 ecx, DWORD PTR __Str$[ebp]
  0010a	51		 push	 ecx
  0010b	8d 55 b4	 lea	 edx, DWORD PTR __Src$[ebp]
  0010e	52		 push	 edx
  0010f	8d 45 d3	 lea	 eax, DWORD PTR __Ch$[ebp+1]
  00112	50		 push	 eax
  00113	8d 4d d2	 lea	 ecx, DWORD PTR __Ch$[ebp]
  00116	51		 push	 ecx
  00117	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  0011a	83 c2 40	 add	 edx, 64			; 00000040H
  0011d	52		 push	 edx
  0011e	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00124	e8 00 00 00 00	 call	 ?out@?$codecvt@DDU_Mbstatet@@@std@@QBEHAAU_Mbstatet@@PBD1AAPBDPAD3AAPAD@Z ; std::codecvt<char,char,_Mbstatet>::out
  00129	89 45 cc	 mov	 DWORD PTR tv163[ebp], eax
  0012c	83 7d cc 00	 cmp	 DWORD PTR tv163[ebp], 0
  00130	0f 8c 8b 00 00
	00		 jl	 $LN12@overflow
  00136	83 7d cc 01	 cmp	 DWORD PTR tv163[ebp], 1
  0013a	7e 08		 jle	 SHORT $LN8@overflow
  0013c	83 7d cc 03	 cmp	 DWORD PTR tv163[ebp], 3
  00140	74 4f		 je	 SHORT $LN11@overflow
  00142	eb 7d		 jmp	 SHORT $LN12@overflow
$LN8@overflow:

; 438  : 			{	// test result of converting one element
; 439  : 			case codecvt_base::partial:
; 440  : 			case codecvt_base::ok:
; 441  : 				{	// converted something, try to put it out
; 442  : 				const auto _Count = static_cast<size_t>(_Dest - _Str);

  00144	8b 4d b8	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00147	8d 55 d8	 lea	 edx, DWORD PTR __Str$[ebp]
  0014a	2b ca		 sub	 ecx, edx
  0014c	89 4d c8	 mov	 DWORD PTR __Count$2[ebp], ecx

; 443  : 				if (0 < _Count && _Count != static_cast<size_t>(_CSTD fwrite(_Str, 1, _Count, _Myfile)))

  0014f	74 25		 je	 SHORT $LN9@overflow
  00151	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00154	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00157	51		 push	 ecx
  00158	8b 55 c8	 mov	 edx, DWORD PTR __Count$2[ebp]
  0015b	52		 push	 edx
  0015c	6a 01		 push	 1
  0015e	8d 45 d8	 lea	 eax, DWORD PTR __Str$[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _fwrite
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	39 45 c8	 cmp	 DWORD PTR __Count$2[ebp], eax
  0016d	74 07		 je	 SHORT $LN9@overflow

; 444  : 					{
; 445  : 					return (_Traits::eof());	// write failed

  0016f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00174	eb 50		 jmp	 SHORT $LN1@overflow
$LN9@overflow:

; 446  : 					}
; 447  : 
; 448  : 				_Wrotesome = true;	// write succeeded

  00176	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	c6 41 3d 01	 mov	 BYTE PTR [ecx+61], 1

; 449  : 				if (_Src != &_Ch)

  0017d	8d 55 d2	 lea	 edx, DWORD PTR __Ch$[ebp]
  00180	39 55 b4	 cmp	 DWORD PTR __Src$[ebp], edx
  00183	74 05		 je	 SHORT $LN10@overflow

; 450  : 					{
; 451  : 					return (_Meta);	// converted whole element

  00185	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00188	eb 3c		 jmp	 SHORT $LN1@overflow
$LN10@overflow:

; 452  : 					}
; 453  : 
; 454  : 				return (_Traits::eof());	// conversion failed

  0018a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0018f	eb 35		 jmp	 SHORT $LN1@overflow
$LN11@overflow:

; 455  : 				}
; 456  : 
; 457  : 			case codecvt_base::noconv:
; 458  : 				// no conversion, put as is
; 459  : 				return (_Fputc(_Ch, _Myfile) ? _Meta : _Traits::eof());

  00191	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00194	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  00197	51		 push	 ecx
  00198	0f b6 55 d2	 movzx	 edx, BYTE PTR __Ch$[ebp]
  0019c	52		 push	 edx
  0019d	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  001a2	83 c4 08	 add	 esp, 8
  001a5	0f b6 c0	 movzx	 eax, al
  001a8	85 c0		 test	 eax, eax
  001aa	74 08		 je	 SHORT $LN16@overflow
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  001af	89 4d c0	 mov	 DWORD PTR tv184[ebp], ecx
  001b2	eb 08		 jmp	 SHORT $LN17@overflow
$LN16@overflow:
  001b4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001b9	89 45 c0	 mov	 DWORD PTR tv184[ebp], eax
$LN17@overflow:
  001bc	8b 45 c0	 mov	 eax, DWORD PTR tv184[ebp]
  001bf	eb 05		 jmp	 SHORT $LN1@overflow
$LN12@overflow:

; 460  : 
; 461  : 			default:
; 462  : 				return (_Traits::eof());	// conversion failed

  001c1	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN1@overflow:

; 463  : 			}
; 464  : 		}

  001c6	5e		 pop	 esi
  001c7	5b		 pop	 ebx
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cb	33 cd		 xor	 ecx, ebp
  001cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c2 04 00	 ret	 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 401  : 		{	// unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 402  : 		if (_Myfile)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0000e	74 0f		 je	 SHORT $LN1@Unlock

; 403  : 			_CSTD _unlock_file(_Myfile);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 __unlock_file
  0001c	83 c4 04	 add	 esp, 4
$LN1@Unlock:

; 404  : 		}

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 395  : 		{	// lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 396  : 		if (_Myfile)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0000e	74 0f		 je	 SHORT $LN1@Lock

; 397  : 			_CSTD _lock_file(_Myfile);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 __lock_file
  0001c	83 c4 04	 add	 esp, 4
$LN1@Lock:

; 398  : 		}

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 379  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 		basic_filebuf *_Ans = this;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __Ans$[ebp], eax

; 381  : 		if (_Myfile == nullptr)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00016	75 09		 jne	 SHORT $LN2@close

; 382  : 			_Ans = nullptr;

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0

; 383  : 		else

  0001f	eb 30		 jmp	 SHORT $LN3@close
$LN2@close:

; 384  : 			{	// put any homing sequence and close file
; 385  : 			if (!_Endwrite())

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00029	0f b6 d0	 movzx	 edx, al
  0002c	85 d2		 test	 edx, edx
  0002e	75 07		 jne	 SHORT $LN4@close

; 386  : 				_Ans = nullptr;

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN4@close:

; 387  : 			if (_CSTD fclose(_Myfile) != 0)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 4c	 mov	 ecx, DWORD PTR [eax+76]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 _fclose
  00043	83 c4 04	 add	 esp, 4
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN3@close

; 388  : 				_Ans = nullptr;

  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close:

; 389  : 			}
; 390  : 		_Init(nullptr, _Closefl);

  00051	6a 02		 push	 2
  00053	6a 00		 push	 0
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 391  : 		return (_Ans);

  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Ans$[ebp]

; 392  : 		}

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
$T2 = -36						; size = 8
tv88 = -28						; size = 4
tv89 = -24						; size = 4
__File$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 286  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 287  : 		FILE *_File;
; 288  : 		if (_Myfile != nullptr || (_File = _Fiopen(_Filename, _Mode, _Prot)) == nullptr)

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  0002f	75 1d		 jne	 SHORT $LN3@open
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Prot$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR __Mode$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR __Filename$[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z ; std::_Fiopen
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 45 ec	 mov	 DWORD PTR __File$[ebp], eax
  00048	83 7d ec 00	 cmp	 DWORD PTR __File$[ebp], 0
  0004c	75 04		 jne	 SHORT $LN2@open
$LN3@open:

; 289  : 			return (nullptr);	// open failed

  0004e	33 c0		 xor	 eax, eax
  00050	eb 51		 jmp	 SHORT $LN1@open
$LN2@open:

; 290  : 
; 291  : 		_Init(_File, _Openfl);

  00052	6a 01		 push	 1
  00054	8b 4d ec	 mov	 ecx, DWORD PTR __File$[ebp]
  00057	51		 push	 ecx
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 292  : 		_Initcvt(_STD use_facet<_Cvt>(_Mysb::getloc()));

  00060	8d 55 dc	 lea	 edx, DWORD PTR $T2[ebp]
  00063	52		 push	 edx
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ; std::basic_streambuf<char,std::char_traits<char> >::getloc
  0006c	89 45 e8	 mov	 DWORD PTR tv89[ebp], eax
  0006f	8b 45 e8	 mov	 eax, DWORD PTR tv89[ebp]
  00072	89 45 e4	 mov	 DWORD PTR tv88[ebp], eax
  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv88[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAABV?$codecvt@DDU_Mbstatet@@@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,_Mbstatet> >
  00085	83 c4 04	 add	 esp, 4
  00088	50		 push	 eax
  00089	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXABV?$codecvt@DDU_Mbstatet@@@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00091	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00098	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0009b	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 293  : 		return (this);	// open succeeded

  000a0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN1@open:

; 294  : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 172  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 173  : 		if (_Myfile != nullptr)

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 79 4c 00	 cmp	 DWORD PTR [ecx+76], 0
  00036	74 08		 je	 SHORT $LN2@basic_file

; 174  : 			_Reset_back();	// revert from _Mychar buffer

  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 175  : 		if (_Closef)

  00040	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00043	0f b6 42 48	 movzx	 eax, BYTE PTR [edx+72]
  00047	85 c0		 test	 eax, eax
  00049	74 08		 je	 SHORT $LN1@basic_file

; 176  : 			close();

  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN1@basic_file:

; 177  : 		}

  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 167  : 		{	// construct from pointer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		: _Mysb()

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 167  : 		{	// construct from pointer to C stream

  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 168  : 		_Init(_File, _Newfl);

  0003e	6a 00		 push	 0
  00040	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  00043	51		 push	 ecx
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 169  : 		}

  0004c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 38		 push	 56			; 00000038H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 456  : 		{	// set locale to argument (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 457  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 451  : 		{	// synchronize with external agent (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 452  : 		return (0);

  00007	33 c0		 xor	 eax, eax

; 453  : 		}

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 446  : 		{	// offer buffer to external agent (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 		return (this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 448  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 441  : 		{	// change to specified position, according to mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 442  : 		return (streampos(-1));

  00007	6a ff		 push	 -1
  00009	6a ff		 push	 -1
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 443  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 435  : 		{	// change position by offset, according to way and mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 436  : 		return (streampos(-1));

  00007	6a ff		 push	 -1
  00009	6a ff		 push	 -1
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QAE@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 437  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
_TEXT	SEGMENT
__Start_count$ = -28					; size = 8
__Size$1 = -20						; size = 8
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT
; _this$ = ecx

; 401  : 		{	// put _Count characters to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 402  : 		const streamsize _Start_count = _Count;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	89 45 e4	 mov	 DWORD PTR __Start_count$[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00012	89 4d e8	 mov	 DWORD PTR __Start_count$[ebp+4], ecx
$LN2@xsputn:

; 403  : 		while (0 < _Count)

  00015	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00019	0f 8c e8 00 00
	00		 jl	 $LN3@xsputn
  0001f	7f 0a		 jg	 SHORT $LN10@xsputn
  00021	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00025	0f 86 dc 00 00
	00		 jbe	 $LN3@xsputn
$LN10@xsputn:

; 404  : 			{
; 405  : 			streamsize _Size = _Pnavail();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00033	89 45 ec	 mov	 DWORD PTR __Size$1[ebp], eax
  00036	89 55 f0	 mov	 DWORD PTR __Size$1[ebp+4], edx

; 406  : 			if (0 < _Size)

  00039	83 7d f0 00	 cmp	 DWORD PTR __Size$1[ebp+4], 0
  0003d	7c 68		 jl	 SHORT $LN4@xsputn
  0003f	7f 06		 jg	 SHORT $LN11@xsputn
  00041	83 7d ec 00	 cmp	 DWORD PTR __Size$1[ebp], 0
  00045	76 60		 jbe	 SHORT $LN4@xsputn
$LN11@xsputn:

; 407  : 				{	// copy to write buffer
; 408  : 				if (_Count < _Size)

  00047	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  0004a	3b 55 f0	 cmp	 edx, DWORD PTR __Size$1[ebp+4]
  0004d	7f 16		 jg	 SHORT $LN6@xsputn
  0004f	7c 08		 jl	 SHORT $LN12@xsputn
  00051	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00054	3b 45 ec	 cmp	 eax, DWORD PTR __Size$1[ebp]
  00057	73 0c		 jae	 SHORT $LN6@xsputn
$LN12@xsputn:

; 409  : 					{
; 410  : 					_Size = _Count;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005c	89 4d ec	 mov	 DWORD PTR __Size$1[ebp], ecx
  0005f	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  00062	89 55 f0	 mov	 DWORD PTR __Size$1[ebp+4], edx
$LN6@xsputn:

; 411  : 					}
; 412  : 
; 413  : 				_Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));

  00065	8b 45 ec	 mov	 eax, DWORD PTR __Size$1[ebp]
  00068	50		 push	 eax
  00069	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 414  : 				_Ptr += _Size;

  0007e	8b 55 ec	 mov	 edx, DWORD PTR __Size$1[ebp]
  00081	03 55 08	 add	 edx, DWORD PTR __Ptr$[ebp]
  00084	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 415  : 				_Count -= _Size;

  00087	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0008a	2b 45 ec	 sub	 eax, DWORD PTR __Size$1[ebp]
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00090	1b 4d f0	 sbb	 ecx, DWORD PTR __Size$1[ebp+4]
  00093	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00096	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 416  : 				pbump(static_cast<int>(_Size));

  00099	8b 55 ec	 mov	 edx, DWORD PTR __Size$1[ebp]
  0009c	52		 push	 edx
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
  000a5	eb 5b		 jmp	 SHORT $LN5@xsputn
$LN4@xsputn:

; 417  : 				}
; 418  : 			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))

  000a7	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000b0	83 c4 04	 add	 esp, 4
  000b3	50		 push	 eax
  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000bf	ff d0		 call	 eax
  000c1	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
  000c4	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000c9	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  000cc	8d 4d f8	 lea	 ecx, DWORD PTR $T3[ebp]
  000cf	51		 push	 ecx
  000d0	8d 55 f4	 lea	 edx, DWORD PTR $T2[ebp]
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000d9	83 c4 08	 add	 esp, 8
  000dc	0f b6 c0	 movzx	 eax, al
  000df	85 c0		 test	 eax, eax
  000e1	74 04		 je	 SHORT $LN7@xsputn

; 419  : 				{
; 420  : 				break;	// single character put failed, quit

  000e3	eb 22		 jmp	 SHORT $LN3@xsputn

; 421  : 				}
; 422  : 			else

  000e5	eb 1b		 jmp	 SHORT $LN5@xsputn
$LN7@xsputn:

; 423  : 				{	// count character successfully put
; 424  : 				++_Ptr;

  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  000ea	83 c1 01	 add	 ecx, 1
  000ed	89 4d 08	 mov	 DWORD PTR __Ptr$[ebp], ecx

; 425  : 				--_Count;

  000f0	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  000f3	83 ea 01	 sub	 edx, 1
  000f6	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  000f9	83 d8 00	 sbb	 eax, 0
  000fc	89 55 0c	 mov	 DWORD PTR __Count$[ebp], edx
  000ff	89 45 10	 mov	 DWORD PTR __Count$[ebp+4], eax
$LN5@xsputn:

; 426  : 				}
; 427  : 			}

  00102	e9 0e ff ff ff	 jmp	 $LN2@xsputn
$LN3@xsputn:

; 428  : 
; 429  : 		return (_Start_count - _Count);

  00107	8b 45 e4	 mov	 eax, DWORD PTR __Start_count$[ebp]
  0010a	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  0010d	8b 55 e8	 mov	 edx, DWORD PTR __Start_count$[ebp+4]
  00110	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]

; 430  : 		}

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 0c 00	 ret	 12			; 0000000cH
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
_TEXT	SEGMENT
__Start_count$ = -28					; size = 8
__Size$1 = -20						; size = 8
$T2 = -12						; size = 4
__Meta$3 = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT
; _this$ = ecx

; 365  : 		{	// get _Count characters from stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 366  : 		const streamsize _Start_count = _Count;

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	89 45 e4	 mov	 DWORD PTR __Start_count$[ebp], eax
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00012	89 4d e8	 mov	 DWORD PTR __Start_count$[ebp+4], ecx
$LN2@xsgetn:

; 367  : 
; 368  : 		while (0 < _Count)

  00015	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00019	0f 8c ea 00 00
	00		 jl	 $LN3@xsgetn
  0001f	7f 0a		 jg	 SHORT $LN9@xsgetn
  00021	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00025	0f 86 de 00 00
	00		 jbe	 $LN3@xsgetn
$LN9@xsgetn:

; 369  : 			{
; 370  : 			streamsize _Size = _Gnavail();

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00033	89 45 ec	 mov	 DWORD PTR __Size$1[ebp], eax
  00036	89 55 f0	 mov	 DWORD PTR __Size$1[ebp+4], edx

; 371  : 			if (0 < _Size)

  00039	83 7d f0 00	 cmp	 DWORD PTR __Size$1[ebp+4], 0
  0003d	7c 68		 jl	 SHORT $LN4@xsgetn
  0003f	7f 06		 jg	 SHORT $LN10@xsgetn
  00041	83 7d ec 00	 cmp	 DWORD PTR __Size$1[ebp], 0
  00045	76 60		 jbe	 SHORT $LN4@xsgetn
$LN10@xsgetn:

; 372  : 				{	// copy from read buffer
; 373  : 				if (_Count < _Size)

  00047	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  0004a	3b 55 f0	 cmp	 edx, DWORD PTR __Size$1[ebp+4]
  0004d	7f 16		 jg	 SHORT $LN6@xsgetn
  0004f	7c 08		 jl	 SHORT $LN11@xsgetn
  00051	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00054	3b 45 ec	 cmp	 eax, DWORD PTR __Size$1[ebp]
  00057	73 0c		 jae	 SHORT $LN6@xsgetn
$LN11@xsgetn:

; 374  : 					{
; 375  : 					_Size = _Count;

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0005c	89 4d ec	 mov	 DWORD PTR __Size$1[ebp], ecx
  0005f	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  00062	89 55 f0	 mov	 DWORD PTR __Size$1[ebp+4], edx
$LN6@xsgetn:

; 376  : 					}
; 377  : 
; 378  : 				_Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));

  00065	8b 45 ec	 mov	 eax, DWORD PTR __Size$1[ebp]
  00068	50		 push	 eax
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 379  : 				_Ptr += _Size;

  0007e	8b 55 ec	 mov	 edx, DWORD PTR __Size$1[ebp]
  00081	03 55 08	 add	 edx, DWORD PTR __Ptr$[ebp]
  00084	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 380  : 				_Count -= _Size;

  00087	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0008a	2b 45 ec	 sub	 eax, DWORD PTR __Size$1[ebp]
  0008d	8b 4d 10	 mov	 ecx, DWORD PTR __Count$[ebp+4]
  00090	1b 4d f0	 sbb	 ecx, DWORD PTR __Size$1[ebp+4]
  00093	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  00096	89 4d 10	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 381  : 				gbump(static_cast<int>(_Size));

  00099	8b 55 ec	 mov	 edx, DWORD PTR __Size$1[ebp]
  0009c	52		 push	 edx
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 382  : 				}
; 383  : 			else

  000a5	eb 5d		 jmp	 SHORT $LN5@xsgetn
$LN4@xsgetn:

; 384  : 				{
; 385  : 				const int_type _Meta = uflow();

  000a7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 10		 mov	 edx, DWORD PTR [eax]
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000b2	ff d0		 call	 eax
  000b4	89 45 f8	 mov	 DWORD PTR __Meta$3[ebp], eax

; 386  : 				if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  000b7	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000bc	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  000bf	8d 4d f8	 lea	 ecx, DWORD PTR __Meta$3[ebp]
  000c2	51		 push	 ecx
  000c3	8d 55 f4	 lea	 edx, DWORD PTR $T2[ebp]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000cc	83 c4 08	 add	 esp, 8
  000cf	0f b6 c0	 movzx	 eax, al
  000d2	85 c0		 test	 eax, eax
  000d4	74 02		 je	 SHORT $LN7@xsgetn

; 387  : 					{
; 388  : 					break;	// end of file, quit

  000d6	eb 31		 jmp	 SHORT $LN3@xsgetn
$LN7@xsgetn:

; 389  : 					}
; 390  : 
; 391  : 				// get a single character
; 392  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  000d8	8d 4d f8	 lea	 ecx, DWORD PTR __Meta$3[ebp]
  000db	51		 push	 ecx
  000dc	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000e1	83 c4 04	 add	 esp, 4
  000e4	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000e7	88 02		 mov	 BYTE PTR [edx], al
  000e9	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000ec	83 c0 01	 add	 eax, 1
  000ef	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax

; 393  : 				--_Count;

  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000f5	83 e9 01	 sub	 ecx, 1
  000f8	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp+4]
  000fb	83 da 00	 sbb	 edx, 0
  000fe	89 4d 0c	 mov	 DWORD PTR __Count$[ebp], ecx
  00101	89 55 10	 mov	 DWORD PTR __Count$[ebp+4], edx
$LN5@xsgetn:

; 394  : 				}
; 395  : 			}

  00104	e9 0c ff ff ff	 jmp	 $LN2@xsgetn
$LN3@xsgetn:

; 396  : 
; 397  : 		return (_Start_count - _Count);

  00109	8b 45 e4	 mov	 eax, DWORD PTR __Start_count$[ebp]
  0010c	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  0010f	8b 55 e8	 mov	 edx, DWORD PTR __Start_count$[ebp+4]
  00112	1b 55 10	 sbb	 edx, DWORD PTR __Count$[ebp+4]

; 398  : 		}

  00115	8b e5		 mov	 esp, ebp
  00117	5d		 pop	 ebp
  00118	c2 0c 00	 ret	 12			; 0000000cH
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 359  : 		{	// get a character from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00014	ff d0		 call	 eax
  00016	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  00019	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0001e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00021	8d 4d f4	 lea	 ecx, DWORD PTR $T2[ebp]
  00024	51		 push	 ecx
  00025	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  00028	52		 push	 edx
  00029	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0002e	83 c4 08	 add	 esp, 8
  00031	0f b6 c0	 movzx	 eax, al
  00034	85 c0		 test	 eax, eax
  00036	74 0a		 je	 SHORT $LN3@uflow
  00038	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0003d	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  00040	eb 14		 jmp	 SHORT $LN4@uflow
$LN3@uflow:
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00050	83 c4 04	 add	 esp, 4
  00053	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
$LN4@uflow:
  00056	8b 45 f8	 mov	 eax, DWORD PTR tv79[ebp]

; 361  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 362  : 		}

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 354  : 		{	// get a character from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 355  : 		return (_Traits::eof());

  00007	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 356  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT
; _this$ = ecx

; 349  : 		{	// return count of input characters

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  : 		return (0);

  00007	33 c0		 xor	 eax, eax
  00009	33 d2		 xor	 edx, edx

; 351  : 		}

  0000b	8b e5		 mov	 esp, ebp
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 344  : 		{	// put a character back to stream (always fail)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 345  : 		return (_Traits::eof());

  00007	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 346  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 339  : 		{	// put a character to stream (always fail)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  : 		return (_Traits::eof());

  00007	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 341  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Gf$ = 8						; size = 4
__Gn$ = 12						; size = 4
__Gc$ = 16						; size = 4
__Pf$ = 20						; size = 4
__Pn$ = 24						; size = 4
__Pc$ = 28						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 329  : 		{	// initialize buffer parameters as specified

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 		_IGfirst = _Gf;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Gf$[ebp]
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 331  : 		_IPfirst = _Pf;

  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b 45 14	 mov	 eax, DWORD PTR __Pf$[ebp]
  00016	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 332  : 		_IGnext = _Gn;

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 55 0c	 mov	 edx, DWORD PTR __Gn$[ebp]
  0001f	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 333  : 		_IPnext = _Pn;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 4d 18	 mov	 ecx, DWORD PTR __Pn$[ebp]
  00028	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 334  : 		_IGcount = _Gc;

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 45 10	 mov	 eax, DWORD PTR __Gc$[ebp]
  00031	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 335  : 		_IPcount = _Pc;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 55 1c	 mov	 edx, DWORD PTR __Pc$[ebp]
  0003a	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 336  : 		}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 18 00	 ret	 24			; 00000018H
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 316  : 		{	// initialize buffer parameters for no buffers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  : 		_IGfirst = &_Gfirst;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 318  : 		_IPfirst = &_Pfirst;

  00013	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00016	83 c2 08	 add	 edx, 8
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 319  : 		_IGnext = &_Gnext;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	83 c1 14	 add	 ecx, 20			; 00000014H
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 320  : 		_IPnext = &_Pnext;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 18	 add	 eax, 24			; 00000018H
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 321  : 		_IGcount = &_Gcount;

  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	83 c2 24	 add	 edx, 36			; 00000024H
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 322  : 		_IPcount = &_Pcount;

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 28	 add	 ecx, 40			; 00000028H
  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	89 4a 30	 mov	 DWORD PTR [edx+48], ecx

; 323  : 		setp(nullptr, nullptr);

  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 324  : 		setg(nullptr, nullptr, nullptr);

  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	6a 00		 push	 0
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 325  : 		}

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 311  : 		{	// count number of available positions in write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000f	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00012	74 0d		 je	 SHORT $LN3@Pnavail
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  0001f	eb 07		 jmp	 SHORT $LN4@Pnavail
$LN3@Pnavail:
  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Pnavail:
  00028	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  0002b	99		 cdq

; 313  : 		}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 305  : 		{	// increment current position in write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 306  : 		--*_IPcount;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ea 01	 sub	 edx, 1
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001a	89 11		 mov	 DWORD PTR [ecx], edx

; 307  : 		return ((*_IPnext)++);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	89 4d f8	 mov	 DWORD PTR tv76[ebp], ecx
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	83 c1 01	 add	 ecx, 1
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00038	89 08		 mov	 DWORD PTR [eax], ecx
  0003a	8b 45 f8	 mov	 eax, DWORD PTR tv76[ebp]

; 308  : 		}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT
; _this$ = ecx

; 291  : 		{	// set pointers for write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		*_IPfirst = _First;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00010	89 11		 mov	 DWORD PTR [ecx], edx

; 293  : 		*_IPnext = _First;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00018	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001b	89 11		 mov	 DWORD PTR [ecx], edx

; 294  : 		*_IPcount = (int)(_Last - _First);

  0001d	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00020	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00029	89 02		 mov	 DWORD PTR [edx], eax

; 295  : 		}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT
; _this$ = ecx

; 285  : 		{	// alter current position in write buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 286  : 		*_IPcount -= _Off;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00018	89 11		 mov	 DWORD PTR [ecx], edx

; 287  : 		*_IPnext += _Off;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 288  : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT
; _this$ = ecx

; 280  : 		{	// count number of available elements in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  : 		return (*_IGnext != nullptr ? *_IGcount : 0);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000f	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00012	74 0d		 je	 SHORT $LN3@Gnavail
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  0001f	eb 07		 jmp	 SHORT $LN4@Gnavail
$LN3@Gnavail:
  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Gnavail:
  00028	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  0002b	99		 cdq

; 282  : 		}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc, COMDAT
; _this$ = ecx

; 274  : 		{	// preincrement current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 275  : 		--*_IGcount;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ea 01	 sub	 edx, 1
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001a	89 11		 mov	 DWORD PTR [ecx], edx

; 276  : 		return (++(*_IGnext));

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	83 c1 01	 add	 ecx, 1
  00027	89 4d f8	 mov	 DWORD PTR tv72[ebp], ecx
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv72[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx
  00035	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]

; 277  : 		}

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT
; _this$ = ecx

; 268  : 		{	// increment current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  : 		--*_IGcount;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 ea 01	 sub	 edx, 1
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001a	89 11		 mov	 DWORD PTR [ecx], edx

; 270  : 		return ((*_IGnext)++);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	89 4d f8	 mov	 DWORD PTR tv76[ebp], ecx
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	83 c1 01	 add	 ecx, 1
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00038	89 08		 mov	 DWORD PTR [eax], ecx
  0003a	8b 45 f8	 mov	 eax, DWORD PTR tv76[ebp]

; 271  : 		}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec, COMDAT
; _this$ = ecx

; 262  : 		{	// decrement current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 263  : 		++*_IGcount;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	83 c2 01	 add	 edx, 1
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001a	89 11		 mov	 DWORD PTR [ecx], edx

; 264  : 		return (--*_IGnext);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	83 e9 01	 sub	 ecx, 1
  00027	89 4d f8	 mov	 DWORD PTR tv72[ebp], ecx
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR tv72[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx
  00035	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]

; 265  : 		}

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gndec
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT
; _this$ = ecx

; 257  : 		{	// return end of write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 258  : 		return (*_IPnext + *_IPcount);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00015	03 08		 add	 ecx, DWORD PTR [eax]
  00017	8b c1		 mov	 eax, ecx

; 259  : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Next$ = 12						; size = 4
__Last$ = 16						; size = 4
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT
; _this$ = ecx

; 250  : 		{	// set pointers for read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  : 		*_IGfirst = _First;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00010	89 11		 mov	 DWORD PTR [ecx], edx

; 252  : 		*_IGnext = _Next;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00018	8b 55 0c	 mov	 edx, DWORD PTR __Next$[ebp]
  0001b	89 11		 mov	 DWORD PTR [ecx], edx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0001d	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00020	2b 45 0c	 sub	 eax, DWORD PTR __Next$[ebp]
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00029	89 02		 mov	 DWORD PTR [edx], eax

; 254  : 		}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT
; _this$ = ecx

; 244  : 		{	// alter current position in read buffer by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 245  : 		*_IGcount -= _Off;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	2b 55 08	 sub	 edx, DWORD PTR __Off$[ebp]
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00018	89 11		 mov	 DWORD PTR [ecx], edx

; 246  : 		*_IGnext += _Off;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	03 4d 08	 add	 ecx, DWORD PTR __Off$[ebp]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0002b	89 08		 mov	 DWORD PTR [eax], ecx

; 247  : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT
; _this$ = ecx

; 239  : 		{	// return end of read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 240  : 		return (*_IGnext + *_IGcount);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00010	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00013	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00015	03 08		 add	 ecx, DWORD PTR [eax]
  00017	8b c1		 mov	 eax, ecx

; 241  : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT
; _this$ = ecx

; 234  : 		{	// return current position in write buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 		return (*_IPnext);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 236  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT
; _this$ = ecx

; 224  : 		{	// return current position in read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 225  : 		return (*_IGnext);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 226  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT
; _this$ = ecx

; 219  : 		{	// return beginning of read buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 220  : 		return (*_IGfirst);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 214  : 		{	// clear the thread lock (overridden by basic_filebuf)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 215  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 210  : 		{	// set the thread lock (overridden by basic_filebuf)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 211  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 205  : 		{	// put _Count characters from array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 206  : 		return (xsputn(_Ptr, _Count));

  00007	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0001e	ff d0		 call	 eax

; 207  : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv89 = -28						; size = 8
$T1 = -20						; size = 4
$T2 = -16						; size = 4
tv83 = -12						; size = 4
tv82 = -8						; size = 4
_this$ = -4						; size = 4
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::snextc, COMDAT
; _this$ = ecx

; 165  : 		{	// point to next character and return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 		return (1 < _Gnavail()

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00011	89 45 e4	 mov	 DWORD PTR tv89[ebp], eax
  00014	89 55 e8	 mov	 DWORD PTR tv89[ebp+4], edx
  00017	83 7d e8 00	 cmp	 DWORD PTR tv89[ebp+4], 0
  0001b	7c 1e		 jl	 SHORT $LN5@snextc
  0001d	7f 06		 jg	 SHORT $LN7@snextc
  0001f	83 7d e4 01	 cmp	 DWORD PTR tv89[ebp], 1
  00023	76 16		 jbe	 SHORT $LN5@snextc
$LN7@snextc:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnpreinc
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  00039	eb 45		 jmp	 SHORT $LN6@snextc
$LN5@snextc:
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00046	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0004b	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0004e	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00051	50		 push	 eax
  00052	8d 4d ec	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0005b	83 c4 08	 add	 esp, 8
  0005e	0f b6 d0	 movzx	 edx, al
  00061	85 d2		 test	 edx, edx
  00063	74 0a		 je	 SHORT $LN3@snextc
  00065	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0006a	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
  0006d	eb 0b		 jmp	 SHORT $LN4@snextc
$LN3@snextc:
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  00077	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
$LN4@snextc:
  0007a	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  0007d	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
$LN6@snextc:
  00080	8b 45 f4	 mov	 eax, DWORD PTR tv83[ebp]

; 167  : 			? _Traits::to_int_type(*_Gnpreinc())
; 168  : 			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
; 169  : 				? _Traits::eof() : sgetc());
; 170  : 		}

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::snextc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sgetn, COMDAT
; _this$ = ecx

; 160  : 		{	// get up to _Count characters into array beginning at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 		return (xsgetn(_Ptr, _Count));

  00007	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 10		 mov	 edx, DWORD PTR [eax]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001e	ff d0		 call	 eax

; 162  : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sgetn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv82 = -16						; size = 8
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sgetc, COMDAT
; _this$ = ecx

; 153  : 		{	// get a character and don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 		return (0 < _Gnavail()

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00011	89 45 f0	 mov	 DWORD PTR tv82[ebp], eax
  00014	89 55 f4	 mov	 DWORD PTR tv82[ebp+4], edx
  00017	83 7d f4 00	 cmp	 DWORD PTR tv82[ebp+4], 0
  0001b	7c 1e		 jl	 SHORT $LN3@sgetc
  0001d	7f 06		 jg	 SHORT $LN5@sgetc
  0001f	83 7d f0 00	 cmp	 DWORD PTR tv82[ebp], 0
  00023	76 16		 jbe	 SHORT $LN3@sgetc
$LN5@sgetc:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
  00039	eb 10		 jmp	 SHORT $LN4@sgetc
$LN3@sgetc:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00046	ff d0		 call	 eax
  00048	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
$LN4@sgetc:
  0004b	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]

; 155  : 			? _Traits::to_int_type(*gptr()) : underflow());
; 156  : 		}

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
tv82 = -16						; size = 8
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc, COMDAT
; _this$ = ecx

; 147  : 		{	// get a character and point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 148  : 		return (0 < _Gnavail()

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00011	89 45 f0	 mov	 DWORD PTR tv82[ebp], eax
  00014	89 55 f4	 mov	 DWORD PTR tv82[ebp+4], edx
  00017	83 7d f4 00	 cmp	 DWORD PTR tv82[ebp+4], 0
  0001b	7c 1e		 jl	 SHORT $LN3@sbumpc
  0001d	7f 06		 jg	 SHORT $LN5@sbumpc
  0001f	83 7d f0 00	 cmp	 DWORD PTR tv82[ebp], 0
  00023	76 16		 jbe	 SHORT $LN3@sbumpc
$LN5@sbumpc:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00033	83 c4 04	 add	 esp, 4
  00036	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
  00039	eb 10		 jmp	 SHORT $LN4@sbumpc
$LN3@sbumpc:
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00046	ff d0		 call	 eax
  00048	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
$LN4@sbumpc:
  0004b	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]

; 149  : 			? _Traits::to_int_type(*_Gninc()) : uflow());
; 150  : 		}

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sbumpc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 142  : 		{	// synchronize with external agent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 		return (sync());

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00012	ff d0		 call	 eax

; 144  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::getloc, COMDAT
; _this$ = ecx

; 131  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 132  : 		return (*_Plocale);

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00016	51		 push	 ecx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale
  0001f	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00022	83 ca 01	 or	 edx, 1
  00025	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 133  : 		}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 77   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 78   : 		delete _Plocale;

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00018	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
  0001b	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  00021	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00025	74 0f		 je	 SHORT $LN3@basic_stre
  00027	6a 01		 push	 1
  00029	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  0002c	e8 00 00 00 00	 call	 ??_Glocale@std@@QAEPAXI@Z
  00031	89 45 f0	 mov	 DWORD PTR tv70[ebp], eax
  00034	eb 07		 jmp	 SHORT $LN2@basic_stre
$LN3@basic_stre:
  00036	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN2@basic_stre:

; 79   : 		}

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
tv74 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 24   : 		{	// construct with no buffers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@

; 23   : 		: _Plocale(new locale)

  00012	6a 08		 push	 8
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0001f	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00023	74 0d		 je	 SHORT $LN3@basic_stre
  00025	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00028	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  0002d	89 45 f4	 mov	 DWORD PTR tv74[ebp], eax
  00030	eb 07		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00032	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@basic_stre:
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 55 f4	 mov	 edx, DWORD PTR tv74[ebp]
  0003f	89 51 34	 mov	 DWORD PTR [ecx+52], edx

; 25   : 		_Init();

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 26   : 		}

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1011 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 90	 mov	 edx, DWORD PTR [ecx-112]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 70	 sub	 eax, 112		; 00000070H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 90	 mov	 edx, DWORD PTR [ecx-112]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a 8c	 mov	 DWORD PTR [edx+ecx-116], eax

; 1012 : 		}

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 e9 60	 sub	 ecx, 96			; 00000060H
  0003d	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 e9 58	 sub	 ecx, 88			; 00000058H
  00048	e8 00 00 00 00	 call	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 850  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 24		 je	 SHORT $LN2@basic_ifst
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 70	 add	 ecx, 112		; 00000070H
  00044	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00053	83 c9 01	 or	 ecx, 1
  00056	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ifst:

; 849  : 		: _Mybase(&_Filebuffer)

  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00060	83 c2 10	 add	 edx, 16			; 00000010H
  00063	52		 push	 edx
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
  0006c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 850  : 		{	// construct with named file and specified mode

  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008d	83 e8 70	 sub	 eax, 112		; 00000070H
  00090	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00098	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  0009f	6a 00		 push	 0
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	83 c1 10	 add	 ecx, 16			; 00000010H
  000a7	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000ac	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 851  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == nullptr)

  000b0	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000b3	50		 push	 eax
  000b4	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000b7	83 c9 01	 or	 ecx, 1
  000ba	51		 push	 ecx
  000bb	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000be	52		 push	 edx
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	83 c1 10	 add	 ecx, 16			; 00000010H
  000c5	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000ca	85 c0		 test	 eax, eax
  000cc	75 16		 jne	 SHORT $LN1@basic_ifst

; 852  : 			_Myios::setstate(ios_base::failbit);

  000ce	6a 00		 push	 0
  000d0	6a 02		 push	 2
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000da	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000dd	8b ca		 mov	 ecx, edx
  000df	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN1@basic_ifst:

; 853  : 		}

  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f8	59		 pop	 ecx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN6@basic_ifst:
  0001b	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 18	 add	 ecx, 24			; 00000018H
  00022	e9 00 00 00 00	 jmp	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 10	 add	 ecx, 16			; 00000010H
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 18	 add	 ecx, 24			; 00000018H
  0000d	e8 00 00 00 00	 call	 ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 18	 add	 ecx, 24			; 00000018H
  00018	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 18	 sub	 ecx, 24			; 00000018H
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 11		 je	 SHORT $LN2@scalar
  0001a	6a 60		 push	 96			; 00000060H
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 e9 18	 sub	 ecx, 24			; 00000018H
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00028	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 e8 18	 sub	 eax, 24			; 00000018H
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
__Ok$ = -52						; size = 8
$T2 = -44						; size = 4
$T3 = -40						; size = 4
tv154 = -36						; size = 4
tv66 = -32						; size = 4
__State$ = -28						; size = 4
__Meta$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_istream<char,std::char_traits<char> >::peek, COMDAT
; _this$ = ecx

; 619  : 		{	// return next character, unconsumed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 24	 sub	 esp, 36			; 00000024H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 620  : 		ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 621  : 		_Chcount = 0;

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00040	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 622  : 		int_type _Meta = 0;

  00047	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Meta$[ebp], 0

; 623  : 		const sentry _Ok(*this, true);

  0004e	6a 01		 push	 1
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	51		 push	 ecx
  00054	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00057	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 624  : 
; 625  : 		if (!_Ok)

  00063	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00066	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  0006b	0f b6 d0	 movzx	 edx, al
  0006e	85 d2		 test	 edx, edx
  00070	75 0a		 jne	 SHORT $LN2@peek

; 626  : 			_Meta = _Traits::eof();	// state not okay, return EOF

  00072	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00077	89 45 e8	 mov	 DWORD PTR __Meta$[ebp], eax

; 627  : 		else

  0007a	eb 7e		 jmp	 SHORT $LN3@peek
$LN2@peek:

; 628  : 			{	// state okay, read a character
; 629  : 			_TRY_IO_BEGIN

  0007c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 630  : 			if (_Traits::eq_int_type(_Traits::eof(),

  00080	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 08		 mov	 ecx, DWORD PTR [eax]
  00085	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00088	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0008b	8b ca		 mov	 ecx, edx
  0008d	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00092	89 45 e0	 mov	 DWORD PTR tv66[ebp], eax
  00095	8b 4d e0	 mov	 ecx, DWORD PTR tv66[ebp]
  00098	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  0009d	89 45 dc	 mov	 DWORD PTR tv154[ebp], eax
  000a0	8b 45 dc	 mov	 eax, DWORD PTR tv154[ebp]
  000a3	89 45 e8	 mov	 DWORD PTR __Meta$[ebp], eax
  000a6	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000ab	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  000ae	8d 4d e8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000b1	51		 push	 ecx
  000b2	8d 55 d8	 lea	 edx, DWORD PTR $T3[ebp]
  000b5	52		 push	 edx
  000b6	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000bb	83 c4 08	 add	 esp, 8
  000be	0f b6 c0	 movzx	 eax, al
  000c1	85 c0		 test	 eax, eax
  000c3	74 09		 je	 SHORT $LN5@peek

; 631  : 				_Meta = _Myios::rdbuf()->sgetc()))
; 632  : 				_State |= ios_base::eofbit;

  000c5	8b 4d e4	 mov	 ecx, DWORD PTR __State$[ebp]
  000c8	83 c9 01	 or	 ecx, 1
  000cb	89 4d e4	 mov	 DWORD PTR __State$[ebp], ecx
$LN5@peek:
  000ce	eb 1a		 jmp	 SHORT $LN7@peek
__catch$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$0:

; 633  : 			_CATCH_IO_END

  000d0	6a 01		 push	 1
  000d2	6a 04		 push	 4
  000d4	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	8b 02		 mov	 eax, DWORD PTR [edx]
  000d9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000df	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000e4	b8 00 00 00 00	 mov	 eax, $LN11@peek
  000e9	c3		 ret	 0
$LN7@peek:
  000ea	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000f1	eb 07		 jmp	 SHORT $LN3@peek
$LN11@peek:
  000f3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN3@peek:

; 634  : 			}
; 635  : 
; 636  : 		_Myios::setstate(_State);

  000fa	6a 00		 push	 0
  000fc	8b 4d e4	 mov	 ecx, DWORD PTR __State$[ebp]
  000ff	51		 push	 ecx
  00100	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0010b	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 637  : 		return (_Meta);

  00110	8b 4d e8	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00113	89 4d d4	 mov	 DWORD PTR $T2[ebp], ecx
  00116	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0011d	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00120	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00125	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 638  : 		}

  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ$2:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::peek
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
_TEXT	SEGMENT
__Ok$ = -56						; size = 8
tv154 = -48						; size = 8
__Num$2 = -40						; size = 8
$T3 = -32						; size = 4
tv66 = -28						; size = 4
__State$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Str$ = 8						; size = 4
__Count$ = 12						; size = 8
?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z PROC ; std::basic_istream<char,std::char_traits<char> >::read, COMDAT
; _this$ = ecx

; 578  : 		{	// read up to _Count characters into buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 28	 sub	 esp, 40			; 00000028H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 579  : 		ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 580  : 		_Chcount = 0;

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00040	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 581  : 		const sentry _Ok(*this, true);

  00047	6a 01		 push	 1
  00049	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00050	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 582  : 
; 583  : 		if (_Ok && 0 < _Count)

  0005c	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0005f	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator bool
  00064	0f b6 d0	 movzx	 edx, al
  00067	85 d2		 test	 edx, edx
  00069	0f 84 b4 00 00
	00		 je	 $LN2@read
  0006f	83 7d 10 00	 cmp	 DWORD PTR __Count$[ebp+4], 0
  00073	0f 8c aa 00 00
	00		 jl	 $LN2@read
  00079	7f 0a		 jg	 SHORT $LN11@read
  0007b	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0007f	0f 86 9e 00 00
	00		 jbe	 $LN2@read
$LN11@read:

; 584  : 			{	// state okay, use facet to extract
; 585  : 			_TRY_IO_BEGIN

  00085	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 586  : 			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);

  00089	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00091	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00094	8b ca		 mov	 ecx, edx
  00096	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0009b	89 45 e4	 mov	 DWORD PTR tv66[ebp], eax
  0009e	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp+4]
  000a1	50		 push	 eax
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 08	 mov	 edx, DWORD PTR __Str$[ebp]
  000a9	52		 push	 edx
  000aa	8b 4d e4	 mov	 ecx, DWORD PTR tv66[ebp]
  000ad	e8 00 00 00 00	 call	 ?sgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sgetn
  000b2	89 45 d0	 mov	 DWORD PTR tv154[ebp], eax
  000b5	89 55 d4	 mov	 DWORD PTR tv154[ebp+4], edx
  000b8	8b 45 d0	 mov	 eax, DWORD PTR tv154[ebp]
  000bb	89 45 d8	 mov	 DWORD PTR __Num$2[ebp], eax
  000be	8b 4d d4	 mov	 ecx, DWORD PTR tv154[ebp+4]
  000c1	89 4d dc	 mov	 DWORD PTR __Num$2[ebp+4], ecx

; 587  : 			_Chcount += _Num;

  000c4	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ca	03 45 d8	 add	 eax, DWORD PTR __Num$2[ebp]
  000cd	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000d0	13 4d dc	 adc	 ecx, DWORD PTR __Num$2[ebp+4]
  000d3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	89 42 08	 mov	 DWORD PTR [edx+8], eax
  000d9	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 588  : 			if (_Num != _Count)

  000dc	8b 45 d8	 mov	 eax, DWORD PTR __Num$2[ebp]
  000df	3b 45 0c	 cmp	 eax, DWORD PTR __Count$[ebp]
  000e2	75 08		 jne	 SHORT $LN12@read
  000e4	8b 4d dc	 mov	 ecx, DWORD PTR __Num$2[ebp+4]
  000e7	3b 4d 10	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  000ea	74 09		 je	 SHORT $LN4@read
$LN12@read:

; 589  : 				_State |= ios_base::eofbit | ios_base::failbit;	// short read

  000ec	8b 55 e8	 mov	 edx, DWORD PTR __State$[ebp]
  000ef	83 ca 03	 or	 edx, 3
  000f2	89 55 e8	 mov	 DWORD PTR __State$[ebp], edx
$LN4@read:
  000f5	eb 1c		 jmp	 SHORT $LN6@read
__catch$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$0:

; 590  : 			_CATCH_IO_END

  000f7	6a 01		 push	 1
  000f9	6a 04		 push	 4
  000fb	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	8b 08		 mov	 ecx, DWORD PTR [eax]
  00100	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00103	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00106	8b ca		 mov	 ecx, edx
  00108	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0010d	b8 00 00 00 00	 mov	 eax, $LN10@read
  00112	c3		 ret	 0
$LN6@read:
  00113	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011a	eb 07		 jmp	 SHORT $LN2@read
$LN10@read:
  0011c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN2@read:

; 591  : 			}
; 592  : 
; 593  : 		_Myios::setstate(_State);

  00123	6a 00		 push	 0
  00125	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00128	50		 push	 eax
  00129	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00134	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 594  : 		return (*this);

  00139	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  0013f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00146	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00149	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0014e	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]

; 595  : 		}

  00151	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00154	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015b	59		 pop	 ecx
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::read
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
_TEXT	SEGMENT
$T2 = -68						; size = 8
__Ctype_fac$3 = -60					; size = 4
$T4 = -56						; size = 4
tv260 = -52						; size = 4
tv259 = -48						; size = 4
tv258 = -44						; size = 4
tv257 = -40						; size = 4
tv254 = -36						; size = 4
tv256 = -32						; size = 4
__Meta$5 = -28						; size = 4
_this$ = -24						; size = 4
tv261 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Noskip$ = 8						; size = 1
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Ipfx, COMDAT
; _this$ = ecx

; 132  : 		{	// test stream state and skip whitespace as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 34	 sub	 esp, 52			; 00000034H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 		if (this->good())

  0002f	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00037	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0003a	8b ca		 mov	 ecx, edx
  0003c	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	0f 84 91 01 00
	00		 je	 $LN5@Ipfx

; 134  : 			{	// state okay, flush tied stream and skip whitespace
; 135  : 			if (_Myios::tie() != nullptr)

  0004c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00057	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  0005c	85 c0		 test	 eax, eax
  0005e	74 19		 je	 SHORT $LN6@Ipfx

; 136  : 				_Myios::tie()->flush();

  00060	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00068	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006b	8b ca		 mov	 ecx, edx
  0006d	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN6@Ipfx:

; 137  : 
; 138  : 			if (!_Noskip && this->flags() & ios_base::skipws)

  00079	0f b6 45 08	 movzx	 eax, BYTE PTR __Noskip$[ebp]
  0007d	85 c0		 test	 eax, eax
  0007f	0f 85 3b 01 00
	00		 jne	 $LN7@Ipfx
  00085	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00090	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QBEHXZ ; std::ios_base::flags
  00095	83 e0 01	 and	 eax, 1
  00098	0f 84 22 01 00
	00		 je	 $LN7@Ipfx

; 139  : 				{	// skip whitespace
; 140  : 				const _Ctype& _Ctype_fac = _STD use_facet<_Ctype>(this->getloc());

  0009e	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000ad	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  000b2	89 45 e0	 mov	 DWORD PTR tv256[ebp], eax
  000b5	8b 45 e0	 mov	 eax, DWORD PTR tv256[ebp]
  000b8	89 45 dc	 mov	 DWORD PTR tv254[ebp], eax
  000bb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000c2	8b 4d dc	 mov	 ecx, DWORD PTR tv254[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000cb	83 c4 04	 add	 esp, 4
  000ce	89 45 c4	 mov	 DWORD PTR __Ctype_fac$3[ebp], eax
  000d1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000d8	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  000db	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 141  : 
; 142  : 				_TRY_IO_BEGIN

  000e0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 1

; 143  : 				int_type _Meta = _Myios::rdbuf()->sgetc();

  000e7	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000ea	8b 02		 mov	 eax, DWORD PTR [edx]
  000ec	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f2	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  000f7	89 45 d8	 mov	 DWORD PTR tv257[ebp], eax
  000fa	8b 4d d8	 mov	 ecx, DWORD PTR tv257[ebp]
  000fd	e8 00 00 00 00	 call	 ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sgetc
  00102	89 45 d4	 mov	 DWORD PTR tv258[ebp], eax
  00105	8b 4d d4	 mov	 ecx, DWORD PTR tv258[ebp]
  00108	89 4d e4	 mov	 DWORD PTR __Meta$5[ebp], ecx
  0010b	eb 24		 jmp	 SHORT $LN4@Ipfx
$LN2@Ipfx:

; 144  : 
; 145  : 				for (; ; _Meta = _Myios::rdbuf()->snextc())

  0010d	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00110	8b 02		 mov	 eax, DWORD PTR [edx]
  00112	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00118	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0011d	89 45 d0	 mov	 DWORD PTR tv259[ebp], eax
  00120	8b 4d d0	 mov	 ecx, DWORD PTR tv259[ebp]
  00123	e8 00 00 00 00	 call	 ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::snextc
  00128	89 45 cc	 mov	 DWORD PTR tv260[ebp], eax
  0012b	8b 4d cc	 mov	 ecx, DWORD PTR tv260[ebp]
  0012e	89 4d e4	 mov	 DWORD PTR __Meta$5[ebp], ecx
$LN4@Ipfx:

; 146  : 					if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  00131	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00136	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
  00139	8d 55 e4	 lea	 edx, DWORD PTR __Meta$5[ebp]
  0013c	52		 push	 edx
  0013d	8d 45 c8	 lea	 eax, DWORD PTR $T4[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00146	83 c4 08	 add	 esp, 8
  00149	0f b6 c8	 movzx	 ecx, al
  0014c	85 c9		 test	 ecx, ecx
  0014e	74 18		 je	 SHORT $LN9@Ipfx

; 147  : 						{	// end of file, quit
; 148  : 						_Myios::setstate(ios_base::eofbit);

  00150	6a 00		 push	 0
  00152	6a 01		 push	 1
  00154	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 02		 mov	 eax, DWORD PTR [edx]
  00159	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0015f	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 149  : 						break;

  00164	eb 2e		 jmp	 SHORT $LN3@Ipfx
  00166	eb 27		 jmp	 SHORT $LN10@Ipfx
$LN9@Ipfx:

; 150  : 						}
; 151  : 					else if (!_Ctype_fac.is(_Ctype::space,

  00168	8d 4d e4	 lea	 ecx, DWORD PTR __Meta$5[ebp]
  0016b	51		 push	 ecx
  0016c	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00171	83 c4 04	 add	 esp, 4
  00174	0f b6 d0	 movzx	 edx, al
  00177	52		 push	 edx
  00178	6a 48		 push	 72			; 00000048H
  0017a	8b 4d c4	 mov	 ecx, DWORD PTR __Ctype_fac$3[ebp]
  0017d	e8 00 00 00 00	 call	 ?is@?$ctype@D@std@@QBE_NFD@Z ; std::ctype<char>::is
  00182	88 45 ef	 mov	 BYTE PTR tv261[ebp], al
  00185	0f b6 45 ef	 movzx	 eax, BYTE PTR tv261[ebp]
  00189	85 c0		 test	 eax, eax
  0018b	75 02		 jne	 SHORT $LN10@Ipfx

; 152  : 						_Traits::to_char_type(_Meta)))
; 153  : 						break;	// not whitespace, quit

  0018d	eb 05		 jmp	 SHORT $LN3@Ipfx
$LN10@Ipfx:

; 154  : 				_CATCH_IO_END

  0018f	e9 79 ff ff ff	 jmp	 $LN2@Ipfx
$LN3@Ipfx:
  00194	eb 1a		 jmp	 SHORT $LN14@Ipfx
__catch$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$0:
  00196	6a 01		 push	 1
  00198	6a 04		 push	 4
  0019a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001a5	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  001aa	b8 00 00 00 00	 mov	 eax, $LN18@Ipfx
  001af	c3		 ret	 0
$LN14@Ipfx:
  001b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001b7	eb 07		 jmp	 SHORT $LN7@Ipfx
$LN18@Ipfx:
  001b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN7@Ipfx:

; 155  : 				}
; 156  : 
; 157  : 			if (this->good())

  001c0	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001c3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c5	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  001c8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cb	8b ca		 mov	 ecx, edx
  001cd	e8 00 00 00 00	 call	 ?good@ios_base@std@@QBE_NXZ ; std::ios_base::good
  001d2	0f b6 c0	 movzx	 eax, al
  001d5	85 c0		 test	 eax, eax
  001d7	74 04		 je	 SHORT $LN5@Ipfx

; 158  : 				return (true);

  001d9	b0 01		 mov	 al, 1
  001db	eb 16		 jmp	 SHORT $LN1@Ipfx
$LN5@Ipfx:

; 159  : 			}
; 160  : 		_Myios::setstate(ios_base::failbit);

  001dd	6a 00		 push	 0
  001df	6a 02		 push	 2
  001e1	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e6	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001ec	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 161  : 		return (false);

  001f1	32 c0		 xor	 al, al
$LN1@Ipfx:

; 162  : 		}

  001f3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fd	59		 pop	 ecx
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi
  00200	5b		 pop	 ebx
  00201	8b e5		 mov	 esp, ebp
  00203	5d		 pop	 ebp
  00204	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Ipfx
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 80   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 e8	 mov	 ecx, DWORD PTR [eax-24]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 e8 00
	00 00 00	 mov	 DWORD PTR [eax+edx-24], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 e8	 mov	 edx, DWORD PTR [ecx-24]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 18	 sub	 eax, 24			; 00000018H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 e8	 mov	 edx, DWORD PTR [ecx-24]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a e4	 mov	 DWORD PTR [edx+ecx-28], eax

; 81   : 		}

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::~basic_istream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\istream
;	COMDAT ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
_$initVBases$ = 16					; size = 4
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 45   : 		{	// construct from stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 7d 10 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 24		 je	 SHORT $LN2@basic_istr
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_istream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 18	 add	 ecx, 24			; 00000018H
  00044	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00053	83 c9 01	 or	 ecx, 1
  00056	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_istr:
  00059	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 02		 mov	 eax, DWORD PTR [edx]
  0005e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], OFFSET ??_7?$basic_istream@DU?$char_traits@D@std@@@std@@6B@
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00073	83 ea 18	 sub	 edx, 24			; 00000018H
  00076	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	89 54 01 fc	 mov	 DWORD PTR [ecx+eax-4], edx

; 44   : 		: _Chcount(0)

  00085	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00088	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  0008f	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0

; 46   : 		_Myios::init(_Strbuf, _Isstd);

  00096	0f b6 45 0c	 movzx	 eax, BYTE PTR __Isstd$[ebp]
  0009a	50		 push	 eax
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR __Strbuf$[ebp]
  0009e	51		 push	 ecx
  0009f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000aa	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init

; 47   : 		}

  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0f 00 00
	00		 je	 $LN5@basic_istr
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@basic_istr:
  0001b	c3		 ret	 0
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0001c	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00020	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00023	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::basic_istream<char,std::char_traits<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 48		 push	 72			; 00000048H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 176  : 	__CLR_OR_THIS_CALL basic_ios()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 		{	// default constructor, do nothing

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0ios_base@std@@IAE@XZ	; std::ios_base::ios_base
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 178  : 		}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Strbuf$ = 8						; size = 4
__Isstd$ = 12						; size = 1
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT
; _this$ = ecx

; 163  : 		{	// initialize with stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		_Init();	// initialize ios_base

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IAEXXZ ; std::ios_base::_Init

; 165  : 		_Mystrbuf = _Strbuf;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Strbuf$[ebp]
  00015	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 166  : 		_Tiestr = nullptr;

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	c7 42 3c 00 00
	00 00		 mov	 DWORD PTR [edx+60], 0

; 167  : 		_Fillch = widen(' ');

  00022	6a 20		 push	 32			; 00000020H
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	88 41 40	 mov	 BYTE PTR [ecx+64], al

; 168  : 
; 169  : 		if (_Mystrbuf == nullptr)

  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00039	75 0c		 jne	 SHORT $LN2@init

; 170  : 			setstate(badbit);

  0003b	6a 00		 push	 0
  0003d	6a 04		 push	 4
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN2@init:

; 171  : 
; 172  : 		if (_Isstd)

  00047	0f b6 45 0c	 movzx	 eax, BYTE PTR __Isstd$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 0c		 je	 SHORT $LN1@init

; 173  : 			_Addstd(this);	// special handling for standard streams

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPAV12@@Z ; std::ios_base::_Addstd
  00058	83 c4 04	 add	 esp, 4
$LN1@init:

; 174  : 		}

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
_TEXT	SEGMENT
$T2 = -36						; size = 8
tv79 = -28						; size = 4
tv80 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Byte$ = 8						; size = 1
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT
; _this$ = ecx

; 124  : 		{	// convert _Byte to character using imbued locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 		return (_STD use_facet<_Ctype>(getloc()).widen(_Byte));

  00028	0f b6 45 08	 movzx	 eax, BYTE PTR __Byte$[ebp]
  0002c	50		 push	 eax
  0002d	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00030	51		 push	 ecx
  00031	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QBE?AVlocale@2@XZ ; std::ios_base::getloc
  00039	89 45 e8	 mov	 DWORD PTR tv80[ebp], eax
  0003c	8b 55 e8	 mov	 edx, DWORD PTR tv80[ebp]
  0003f	89 55 e4	 mov	 DWORD PTR tv79[ebp], edx
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	8b 45 e4	 mov	 eax, DWORD PTR tv79[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00052	83 c4 04	 add	 esp, 4
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QBEDD@Z ; std::ctype<char>::widen
  0005c	88 45 f3	 mov	 BYTE PTR $T3[ebp], al
  0005f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00066	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00069	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0006e	8a 45 f3	 mov	 al, BYTE PTR $T3[ebp]

; 126  : 		}

  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 86   : 		{	// return stream buffer pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : 		return (_Mystrbuf);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 38	 mov	 eax, DWORD PTR [eax+56]

; 88   : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 74   : 		{	// return tie pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 		return (_Tiestr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]

; 76   : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 		clear(rdstate() | _State, _Reraise);

  00007	0f b6 45 0c	 movzx	 eax, BYTE PTR __Reraise$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate
  00014	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear

; 56   : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00010	75 0b		 jne	 SHORT $LN3@clear
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00015	83 c9 04	 or	 ecx, 4
  00018	89 4d fc	 mov	 DWORD PTR tv73[ebp], ecx
  0001b	eb 06		 jmp	 SHORT $LN4@clear
$LN3@clear:
  0001d	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  00020	89 55 fc	 mov	 DWORD PTR tv73[ebp], edx
$LN4@clear:
  00023	0f b6 45 0c	 movzx	 eax, BYTE PTR __Reraise$[ebp]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR tv73[ebp]
  0002b	51		 push	 ecx
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 44   : 		}

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ PROC	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 38   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@

; 39   : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP	; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 128  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 129  : 	return (_CSTD ungetc((unsigned char)_Byte, _File) != EOF);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  0000b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _ungetc
  00014	83 c4 08	 add	 esp, 8
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	74 09		 je	 SHORT $LN3@Ungetc
  0001c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00023	eb 07		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Ungetc:
  0002c	8a 45 fc	 mov	 al, BYTE PTR tv69[ebp]

; 130  : 	}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 104  : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 105  : 	return (_CSTD fputc(_Byte, _File) != EOF);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _fputc
  00012	83 c4 08	 add	 esp, 8
  00015	83 f8 ff	 cmp	 eax, -1
  00018	74 09		 je	 SHORT $LN3@Fputc
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00021	eb 07		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  00023	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Fputc:
  0002a	8a 45 fc	 mov	 al, BYTE PTR tv69[ebp]

; 106  : 	}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -4						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 59   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 60   : 	int _Meta;
; 61   : 	if ((_Meta = _CSTD fgetc(_File)) == EOF)

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _fgetc
  0000d	83 c4 04	 add	 esp, 4
  00010	89 45 fc	 mov	 DWORD PTR __Meta$[ebp], eax
  00013	83 7d fc ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  00017	75 06		 jne	 SHORT $LN2@Fgetc

; 62   : 		return (false);

  00019	32 c0		 xor	 al, al
  0001b	eb 0c		 jmp	 SHORT $LN1@Fgetc

; 63   : 	else

  0001d	eb 0a		 jmp	 SHORT $LN1@Fgetc
$LN2@Fgetc:

; 64   : 		{	// got one, convert to char
; 65   : 		_Byte = (char)_Meta;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00022	8a 55 fc	 mov	 dl, BYTE PTR __Meta$[ebp]
  00025	88 11		 mov	 BYTE PTR [ecx], dl

; 66   : 		return (true);

  00027	b0 01		 mov	 al, 1
$LN1@Fgetc:

; 67   : 		}
; 68   : 	}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\color.hpp
;	COMDAT ??0Color@core@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t_color$ = 8						; size = 4
??0Color@core@@QAE@ABV01@@Z PROC			; core::Color::Color, COMDAT
; _this$ = ecx

; 19   :         Color(const Color& t_color)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   :         {
; 21   :             *this = t_color;

  00007	8b 45 08	 mov	 eax, DWORD PTR _t_color$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0000f	89 0a		 mov	 DWORD PTR [edx], ecx

; 22   :         }

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??0Color@core@@QAE@ABV01@@Z ENDP			; core::Color::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
_recordsShown$ = -52					; size = 4
_header$1 = -48						; size = 4
_this$ = -44						; size = 4
_i$2 = -40						; size = 4
_buffer$3 = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?Render@Highscores@core@@QAEXHH@Z PROC			; core::Highscores::Render
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 103  :     Graphics::Instance()->DrawText(m_font, "Highscores", t_xOffset, t_yOffset, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00013	51		 push	 ecx
  00014	8b cc		 mov	 ecx, esp
  00016	68 00 00 00 00	 push	 OFFSET ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
  0001b	e8 00 00 00 00	 call	 ??0Color@core@@QAE@ABV01@@Z ; core::Color::Color
  00020	6a 01		 push	 1
  00022	8b 45 0c	 mov	 eax, DWORD PTR _t_yOffset$[ebp]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _t_xOffset$[ebp]
  00029	51		 push	 ecx
  0002a	68 00 00 00 00	 push	 OFFSET $SG57460
  0002f	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 104  :     t_yOffset += 50;

  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _t_yOffset$[ebp]
  00045	83 c1 32	 add	 ecx, 50			; 00000032H
  00048	89 4d 0c	 mov	 DWORD PTR _t_yOffset$[ebp], ecx

; 105  :     i32 recordsShown = 0;

  0004b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _recordsShown$[ebp], 0

; 106  :     
; 107  :     for (size_t i = 0; i < m_records.size(); ++i)

  00052	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@Render
$LN2@Render:
  0005b	8b 55 d8	 mov	 edx, DWORD PTR _i$2[ebp]
  0005e	83 c2 01	 add	 edx, 1
  00061	89 55 d8	 mov	 DWORD PTR _i$2[ebp], edx
$LN4@Render:
  00064	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 10	 add	 ecx, 16			; 00000010H
  0006a	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  0006f	39 45 d8	 cmp	 DWORD PTR _i$2[ebp], eax
  00072	0f 83 8e 00 00
	00		 jae	 $LN3@Render

; 108  :     {
; 109  :         HighscoreHeader *header = m_records[i];

  00078	8b 45 d8	 mov	 eax, DWORD PTR _i$2[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 10	 add	 ecx, 16			; 00000010H
  00082	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	89 4d d0	 mov	 DWORD PTR _header$1[ebp], ecx

; 110  :         if (header && header->score)

  0008c	83 7d d0 00	 cmp	 DWORD PTR _header$1[ebp], 0
  00090	74 66		 je	 SHORT $LN5@Render
  00092	8b 55 d0	 mov	 edx, DWORD PTR _header$1[ebp]
  00095	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00099	74 5d		 je	 SHORT $LN5@Render

; 111  :         {
; 112  :             char buffer[32];
; 113  :             snprintf(buffer, sizeof(buffer), "%d.%s %d", i + 1, header->name, header->score);

  0009b	8b 45 d0	 mov	 eax, DWORD PTR _header$1[ebp]
  0009e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a1	51		 push	 ecx
  000a2	8b 55 d0	 mov	 edx, DWORD PTR _header$1[ebp]
  000a5	83 c2 04	 add	 edx, 4
  000a8	52		 push	 edx
  000a9	8b 45 d8	 mov	 eax, DWORD PTR _i$2[ebp]
  000ac	83 c0 01	 add	 eax, 1
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET $SG57462
  000b5	6a 20		 push	 32			; 00000020H
  000b7	8d 4d dc	 lea	 ecx, DWORD PTR _buffer$3[ebp]
  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 _snprintf
  000c0	83 c4 18	 add	 esp, 24			; 00000018H

; 114  :             Graphics::Instance()->DrawText(m_font, buffer, 30, t_yOffset, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  000c3	51		 push	 ecx
  000c4	8b cc		 mov	 ecx, esp
  000c6	68 00 00 00 00	 push	 OFFSET ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
  000cb	e8 00 00 00 00	 call	 ??0Color@core@@QAE@ABV01@@Z ; core::Color::Color
  000d0	6a 00		 push	 0
  000d2	8b 55 0c	 mov	 edx, DWORD PTR _t_yOffset$[ebp]
  000d5	52		 push	 edx
  000d6	6a 1e		 push	 30			; 0000001eH
  000d8	8d 45 dc	 lea	 eax, DWORD PTR _buffer$3[ebp]
  000db	50		 push	 eax
  000dc	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  000e8	8b c8		 mov	 ecx, eax
  000ea	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 115  :             ++recordsShown;

  000ef	8b 45 cc	 mov	 eax, DWORD PTR _recordsShown$[ebp]
  000f2	83 c0 01	 add	 eax, 1
  000f5	89 45 cc	 mov	 DWORD PTR _recordsShown$[ebp], eax
$LN5@Render:

; 116  :         }
; 117  :         
; 118  :         t_yOffset += 30;

  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _t_yOffset$[ebp]
  000fb	83 c1 1e	 add	 ecx, 30			; 0000001eH
  000fe	89 4d 0c	 mov	 DWORD PTR _t_yOffset$[ebp], ecx

; 119  :     }

  00101	e9 55 ff ff ff	 jmp	 $LN2@Render
$LN3@Render:

; 120  :     
; 121  :     if (!recordsShown)

  00106	83 7d cc 00	 cmp	 DWORD PTR _recordsShown$[ebp], 0
  0010a	75 2f		 jne	 SHORT $LN1@Render

; 122  :     {
; 123  :         Graphics::Instance()->DrawText(m_font, "No highscores yet", t_xOffset, t_yOffset, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  0010c	51		 push	 ecx
  0010d	8b cc		 mov	 ecx, esp
  0010f	68 00 00 00 00	 push	 OFFSET ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
  00114	e8 00 00 00 00	 call	 ??0Color@core@@QAE@ABV01@@Z ; core::Color::Color
  00119	6a 01		 push	 1
  0011b	8b 55 0c	 mov	 edx, DWORD PTR _t_yOffset$[ebp]
  0011e	52		 push	 edx
  0011f	8b 45 08	 mov	 eax, DWORD PTR _t_xOffset$[ebp]
  00122	50		 push	 eax
  00123	68 00 00 00 00	 push	 OFFSET $SG57464
  00128	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	52		 push	 edx
  0012f	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00134	8b c8		 mov	 ecx, eax
  00136	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText
$LN1@Render:

; 124  :     }
; 125  : }

  0013b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013e	33 cd		 xor	 ecx, ebp
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 08 00	 ret	 8
?Render@Highscores@core@@QAEXHH@Z ENDP			; core::Highscores::Render
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Update@Highscores@core@@QAE?AW4GamePhase@@XZ PROC	; core::Highscores::Update
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   :     if (m_input->descape > 0)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	0f be 51 0f	 movsx	 edx, BYTE PTR [ecx+15]
  00010	85 d2		 test	 edx, edx
  00012	7e 04		 jle	 SHORT $LN2@Update

; 81   :     {
; 82   :         return GAME_PHASE_MENU;

  00014	33 c0		 xor	 eax, eax
  00016	eb 05		 jmp	 SHORT $LN1@Update
$LN2@Update:

; 83   :     }
; 84   :     
; 85   :     return GAME_PHASE_HIGHSCORES;

  00018	b8 05 00 00 00	 mov	 eax, 5
$LN1@Update:

; 86   : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?Update@Highscores@core@@QAE?AW4GamePhase@@XZ ENDP	; core::Highscores::Update
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_t_score$ = 8						; size = 4
?IsHighscore@Highscores@core@@QAE_NH@Z PROC		; core::Highscores::IsHighscore
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 90   :     for (size_t i = 0; i < m_records.size(); ++i)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@IsHighscor
$LN2@IsHighscor:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@IsHighscor:
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 10	 add	 ecx, 16			; 00000010H
  00021	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  00026	39 45 fc	 cmp	 DWORD PTR _i$1[ebp], eax
  00029	73 1f		 jae	 SHORT $LN3@IsHighscor

; 91   :     {
; 92   :         if (t_score > m_records[i]->score)

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 10	 add	 ecx, 16			; 00000010H
  00035	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  0003a	8b 10		 mov	 edx, DWORD PTR [eax]
  0003c	8b 45 08	 mov	 eax, DWORD PTR _t_score$[ebp]
  0003f	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  00042	7e 04		 jle	 SHORT $LN5@IsHighscor

; 93   :         {
; 94   :             return true;

  00044	b0 01		 mov	 al, 1
  00046	eb 04		 jmp	 SHORT $LN1@IsHighscor
$LN5@IsHighscor:

; 95   :         }
; 96   :     }

  00048	eb c8		 jmp	 SHORT $LN2@IsHighscor
$LN3@IsHighscor:

; 97   :     
; 98   :     return false;

  0004a	32 c0		 xor	 al, al
$LN1@IsHighscor:

; 99   : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
?IsHighscore@Highscores@core@@QAE_NH@Z ENDP		; core::Highscores::IsHighscore
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
tv170 = -52						; size = 4
tv138 = -48						; size = 4
tv161 = -44						; size = 4
tv233 = -40						; size = 4
tv163 = -36						; size = 4
tv131 = -32						; size = 4
tv169 = -28						; size = 4
tv137 = -24						; size = 4
tv230 = -20						; size = 4
_i$1 = -16						; size = 4
_j$2 = -12						; size = 4
_this$ = -8						; size = 4
_ret$ = -4						; size = 1
tv236 = -3						; size = 1
tv171 = -2						; size = 1
tv139 = -1						; size = 1
_t_name$ = 8						; size = 4
_t_score$ = 12						; size = 4
?WriteRecord@Highscores@core@@QAE_NPBDH@Z PROC		; core::Highscores::WriteRecord
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 54   :     bool ret = false;

  0000a	c6 45 fc 00	 mov	 BYTE PTR _ret$[ebp], 0

; 55   :     for (size_t i = 0; i < m_records.size(); ++i)

  0000e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00015	eb 09		 jmp	 SHORT $LN4@WriteRecor
$LN2@WriteRecor:
  00017	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 45 f0	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@WriteRecor:
  00020	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 c1 10	 add	 ecx, 16			; 00000010H
  00026	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  0002b	39 45 f0	 cmp	 DWORD PTR _i$1[ebp], eax
  0002e	0f 83 b0 01 00
	00		 jae	 $LN3@WriteRecor

; 56   :     {
; 57   :         if (t_score > m_records[i]->score)

  00034	8b 4d f0	 mov	 ecx, DWORD PTR _i$1[ebp]
  00037	51		 push	 ecx
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	83 c1 10	 add	 ecx, 16			; 00000010H
  0003e	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	8b 45 0c	 mov	 eax, DWORD PTR _t_score$[ebp]
  00048	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  0004b	0f 8e 8e 01 00
	00		 jle	 $LN8@WriteRecor

; 58   :         {
; 59   :             for (size_t j = m_records.size() - 1; j > i; --j)

  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  0005c	83 e8 01	 sub	 eax, 1
  0005f	89 45 f4	 mov	 DWORD PTR _j$2[ebp], eax
  00062	eb 09		 jmp	 SHORT $LN7@WriteRecor
$LN5@WriteRecor:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR _j$2[ebp]
  00067	83 e9 01	 sub	 ecx, 1
  0006a	89 4d f4	 mov	 DWORD PTR _j$2[ebp], ecx
$LN7@WriteRecor:
  0006d	8b 55 f4	 mov	 edx, DWORD PTR _j$2[ebp]
  00070	3b 55 f0	 cmp	 edx, DWORD PTR _i$1[ebp]
  00073	0f 86 b8 00 00
	00		 jbe	 $LN6@WriteRecor

; 60   :             {
; 61   :                 m_records[j]->nameLength = m_records[j - 1]->nameLength;

  00079	8b 45 f4	 mov	 eax, DWORD PTR _j$2[ebp]
  0007c	83 e8 01	 sub	 eax, 1
  0007f	50		 push	 eax
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 10	 add	 ecx, 16			; 00000010H
  00086	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  0008b	8b 30		 mov	 esi, DWORD PTR [eax]
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR _j$2[ebp]
  00090	51		 push	 ecx
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	83 c1 10	 add	 ecx, 16			; 00000010H
  00097	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  0009c	8b 10		 mov	 edx, DWORD PTR [eax]
  0009e	8b 06		 mov	 eax, DWORD PTR [esi]
  000a0	89 02		 mov	 DWORD PTR [edx], eax

; 62   :                 strcpy(m_records[j]->name, m_records[j - 1]->name);

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR _j$2[ebp]
  000a5	83 e9 01	 sub	 ecx, 1
  000a8	51		 push	 ecx
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	83 c1 10	 add	 ecx, 16			; 00000010H
  000af	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000b4	8b 10		 mov	 edx, DWORD PTR [eax]
  000b6	83 c2 04	 add	 edx, 4
  000b9	89 55 e0	 mov	 DWORD PTR tv131[ebp], edx
  000bc	8b 45 f4	 mov	 eax, DWORD PTR _j$2[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	83 c1 10	 add	 ecx, 16			; 00000010H
  000c6	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cd	83 c1 04	 add	 ecx, 4
  000d0	89 4d e8	 mov	 DWORD PTR tv137[ebp], ecx
  000d3	8b 55 e8	 mov	 edx, DWORD PTR tv137[ebp]
  000d6	89 55 d0	 mov	 DWORD PTR tv138[ebp], edx
$LN10@WriteRecor:
  000d9	8b 45 e0	 mov	 eax, DWORD PTR tv131[ebp]
  000dc	8a 08		 mov	 cl, BYTE PTR [eax]
  000de	88 4d ff	 mov	 BYTE PTR tv139[ebp], cl
  000e1	8b 55 e8	 mov	 edx, DWORD PTR tv137[ebp]
  000e4	8a 45 ff	 mov	 al, BYTE PTR tv139[ebp]
  000e7	88 02		 mov	 BYTE PTR [edx], al
  000e9	8b 4d e0	 mov	 ecx, DWORD PTR tv131[ebp]
  000ec	83 c1 01	 add	 ecx, 1
  000ef	89 4d e0	 mov	 DWORD PTR tv131[ebp], ecx
  000f2	8b 55 e8	 mov	 edx, DWORD PTR tv137[ebp]
  000f5	83 c2 01	 add	 edx, 1
  000f8	89 55 e8	 mov	 DWORD PTR tv137[ebp], edx
  000fb	80 7d ff 00	 cmp	 BYTE PTR tv139[ebp], 0
  000ff	75 d8		 jne	 SHORT $LN10@WriteRecor

; 63   :                 m_records[j]->score = m_records[j - 1]->score;

  00101	8b 45 f4	 mov	 eax, DWORD PTR _j$2[ebp]
  00104	83 e8 01	 sub	 eax, 1
  00107	50		 push	 eax
  00108	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	83 c1 10	 add	 ecx, 16			; 00000010H
  0010e	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00113	8b 30		 mov	 esi, DWORD PTR [eax]
  00115	8b 4d f4	 mov	 ecx, DWORD PTR _j$2[ebp]
  00118	51		 push	 ecx
  00119	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	83 c1 10	 add	 ecx, 16			; 00000010H
  0011f	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00124	8b 10		 mov	 edx, DWORD PTR [eax]
  00126	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00129	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 64   :             }

  0012c	e9 33 ff ff ff	 jmp	 $LN5@WriteRecor
$LN6@WriteRecor:

; 65   :             
; 66   :             m_records[i]->nameLength = strlen(t_name);

  00131	8b 4d 08	 mov	 ecx, DWORD PTR _t_name$[ebp]
  00134	89 4d ec	 mov	 DWORD PTR tv230[ebp], ecx
  00137	8b 55 ec	 mov	 edx, DWORD PTR tv230[ebp]
  0013a	83 c2 01	 add	 edx, 1
  0013d	89 55 d8	 mov	 DWORD PTR tv233[ebp], edx
$LL12@WriteRecor:
  00140	8b 45 ec	 mov	 eax, DWORD PTR tv230[ebp]
  00143	8a 08		 mov	 cl, BYTE PTR [eax]
  00145	88 4d fd	 mov	 BYTE PTR tv236[ebp], cl
  00148	83 45 ec 01	 add	 DWORD PTR tv230[ebp], 1
  0014c	80 7d fd 00	 cmp	 BYTE PTR tv236[ebp], 0
  00150	75 ee		 jne	 SHORT $LL12@WriteRecor
  00152	8b 55 ec	 mov	 edx, DWORD PTR tv230[ebp]
  00155	2b 55 d8	 sub	 edx, DWORD PTR tv233[ebp]
  00158	89 55 d4	 mov	 DWORD PTR tv161[ebp], edx
  0015b	8b 45 f0	 mov	 eax, DWORD PTR _i$1[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	83 c1 10	 add	 ecx, 16			; 00000010H
  00165	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  0016a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016c	8b 55 d4	 mov	 edx, DWORD PTR tv161[ebp]
  0016f	89 11		 mov	 DWORD PTR [ecx], edx

; 67   :             strcpy(m_records[i]->name, t_name);

  00171	8b 45 08	 mov	 eax, DWORD PTR _t_name$[ebp]
  00174	89 45 dc	 mov	 DWORD PTR tv163[ebp], eax
  00177	8b 4d f0	 mov	 ecx, DWORD PTR _i$1[ebp]
  0017a	51		 push	 ecx
  0017b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017e	83 c1 10	 add	 ecx, 16			; 00000010H
  00181	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00186	8b 10		 mov	 edx, DWORD PTR [eax]
  00188	83 c2 04	 add	 edx, 4
  0018b	89 55 e4	 mov	 DWORD PTR tv169[ebp], edx
  0018e	8b 45 e4	 mov	 eax, DWORD PTR tv169[ebp]
  00191	89 45 cc	 mov	 DWORD PTR tv170[ebp], eax
$LN11@WriteRecor:
  00194	8b 4d dc	 mov	 ecx, DWORD PTR tv163[ebp]
  00197	8a 11		 mov	 dl, BYTE PTR [ecx]
  00199	88 55 fe	 mov	 BYTE PTR tv171[ebp], dl
  0019c	8b 45 e4	 mov	 eax, DWORD PTR tv169[ebp]
  0019f	8a 4d fe	 mov	 cl, BYTE PTR tv171[ebp]
  001a2	88 08		 mov	 BYTE PTR [eax], cl
  001a4	8b 55 dc	 mov	 edx, DWORD PTR tv163[ebp]
  001a7	83 c2 01	 add	 edx, 1
  001aa	89 55 dc	 mov	 DWORD PTR tv163[ebp], edx
  001ad	8b 45 e4	 mov	 eax, DWORD PTR tv169[ebp]
  001b0	83 c0 01	 add	 eax, 1
  001b3	89 45 e4	 mov	 DWORD PTR tv169[ebp], eax
  001b6	80 7d fe 00	 cmp	 BYTE PTR tv171[ebp], 0
  001ba	75 d8		 jne	 SHORT $LN11@WriteRecor

; 68   :             m_records[i]->score = t_score;

  001bc	8b 4d f0	 mov	 ecx, DWORD PTR _i$1[ebp]
  001bf	51		 push	 ecx
  001c0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	83 c1 10	 add	 ecx, 16			; 00000010H
  001c6	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  001cb	8b 10		 mov	 edx, DWORD PTR [eax]
  001cd	8b 45 0c	 mov	 eax, DWORD PTR _t_score$[ebp]
  001d0	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 69   :             DumpRecords();

  001d3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d6	e8 00 00 00 00	 call	 ?DumpRecords@Highscores@core@@QAEXXZ ; core::Highscores::DumpRecords

; 70   :             
; 71   :             return true;

  001db	b0 01		 mov	 al, 1
  001dd	eb 07		 jmp	 SHORT $LN1@WriteRecor
$LN8@WriteRecor:

; 72   :         }
; 73   :     }

  001df	e9 33 fe ff ff	 jmp	 $LN2@WriteRecor
$LN3@WriteRecor:

; 74   :     
; 75   :     return false;

  001e4	32 c0		 xor	 al, al
$LN1@WriteRecor:

; 76   : }

  001e6	5e		 pop	 esi
  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	c2 08 00	 ret	 8
?WriteRecord@Highscores@core@@QAE_NPBDH@Z ENDP		; core::Highscores::WriteRecord
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
_highscoreFile$ = -208					; size = 176
_score$2 = -32						; size = 4
_name$3 = -28						; size = 4
_nameLength$4 = -24					; size = 4
_this$ = -20						; size = 4
_i$5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DumpRecords@Highscores@core@@QAEXXZ PROC		; core::Highscores::DumpRecords
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?DumpRecords@Highscores@core@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :     std::ofstream highscoreFile(m_filename, std::ios::out | std::ios::binary);

  0002b	6a 01		 push	 1
  0002d	6a 40		 push	 64			; 00000040H
  0002f	6a 22		 push	 34			; 00000022H
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00037	51		 push	 ecx
  00038	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 40   :     for (size_t i = 0; i < m_records.size(); ++i)

  0004a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  00051	eb 09		 jmp	 SHORT $LN4@DumpRecord
$LN2@DumpRecord:
  00053	8b 55 f0	 mov	 edx, DWORD PTR _i$5[ebp]
  00056	83 c2 01	 add	 edx, 1
  00059	89 55 f0	 mov	 DWORD PTR _i$5[ebp], edx
$LN4@DumpRecord:
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	83 c1 10	 add	 ecx, 16			; 00000010H
  00062	e8 00 00 00 00	 call	 ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
  00067	39 45 f0	 cmp	 DWORD PTR _i$5[ebp], eax
  0006a	0f 83 84 00 00
	00		 jae	 $LN3@DumpRecord

; 41   :     {
; 42   :         i32 nameLength = m_records[i]->nameLength;

  00070	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  00073	50		 push	 eax
  00074	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	83 c1 10	 add	 ecx, 16			; 00000010H
  0007a	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	89 55 e8	 mov	 DWORD PTR _nameLength$4[ebp], edx

; 43   :         char *name = m_records[i]->name;

  00086	8b 45 f0	 mov	 eax, DWORD PTR _i$5[ebp]
  00089	50		 push	 eax
  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	83 c1 10	 add	 ecx, 16			; 00000010H
  00090	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	83 c1 04	 add	 ecx, 4
  0009a	89 4d e4	 mov	 DWORD PTR _name$3[ebp], ecx

; 44   :         i32 score = m_records[i]->score;

  0009d	8b 55 f0	 mov	 edx, DWORD PTR _i$5[ebp]
  000a0	52		 push	 edx
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	83 c1 10	 add	 ecx, 16			; 00000010H
  000a7	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000ac	8b 00		 mov	 eax, DWORD PTR [eax]
  000ae	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b1	89 4d e0	 mov	 DWORD PTR _score$2[ebp], ecx

; 45   :         
; 46   :         highscoreFile.write(reinterpret_cast<char*>(&nameLength), sizeof(nameLength));

  000b4	6a 00		 push	 0
  000b6	6a 04		 push	 4
  000b8	8d 55 e8	 lea	 edx, DWORD PTR _nameLength$4[ebp]
  000bb	52		 push	 edx
  000bc	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  000c2	e8 00 00 00 00	 call	 ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z ; std::basic_ostream<char,std::char_traits<char> >::write

; 47   :         highscoreFile.write(name, nameLength);

  000c7	8b 45 e8	 mov	 eax, DWORD PTR _nameLength$4[ebp]
  000ca	99		 cdq
  000cb	52		 push	 edx
  000cc	50		 push	 eax
  000cd	8b 45 e4	 mov	 eax, DWORD PTR _name$3[ebp]
  000d0	50		 push	 eax
  000d1	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  000d7	e8 00 00 00 00	 call	 ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z ; std::basic_ostream<char,std::char_traits<char> >::write

; 48   :         highscoreFile.write(reinterpret_cast<char*>(&score), sizeof(score));

  000dc	6a 00		 push	 0
  000de	6a 04		 push	 4
  000e0	8d 4d e0	 lea	 ecx, DWORD PTR _score$2[ebp]
  000e3	51		 push	 ecx
  000e4	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  000ea	e8 00 00 00 00	 call	 ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBD_J@Z ; std::basic_ostream<char,std::char_traits<char> >::write

; 49   :     }

  000ef	e9 5f ff ff ff	 jmp	 $LN2@DumpRecord
$LN3@DumpRecord:

; 50   : }

  000f4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fb	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  00101	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00106	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00109	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00110	59		 pop	 ecx
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DumpRecords@Highscores@core@@QAEXXZ$0:
  00000	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoreFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?DumpRecords@Highscores@core@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 38 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-200]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DumpRecords@Highscores@core@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DumpRecords@Highscores@core@@QAEXXZ ENDP		; core::Highscores::DumpRecords
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
_highscoresFile$ = -208					; size = 184
_nameLength$2 = -24					; size = 4
_this$ = -20						; size = 4
_recordIndex$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LoadRecords@Highscores@core@@QAEXXZ PROC		; core::Highscores::LoadRecords
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadRecords@Highscores@core@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 22   :     std::ifstream highscoresFile(m_filename, std::ios::in | std::ios::binary);

  0002b	6a 01		 push	 1
  0002d	6a 40		 push	 64			; 00000040H
  0002f	6a 21		 push	 33			; 00000021H
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00037	51		 push	 ecx
  00038	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 23   :     size_t recordIndex = 0;

  0004a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _recordIndex$[ebp], 0
$LN2@LoadRecord:

; 24   :     
; 25   :     while (highscoresFile.peek() != EOF && recordIndex < m_numberOfRecords)

  00051	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  00057	e8 00 00 00 00	 call	 ?peek@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_istream<char,std::char_traits<char> >::peek
  0005c	83 f8 ff	 cmp	 eax, -1
  0005f	0f 84 a9 00 00
	00		 je	 $LN3@LoadRecord
  00065	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00068	8b 45 f0	 mov	 eax, DWORD PTR _recordIndex$[ebp]
  0006b	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  0006e	0f 83 9a 00 00
	00		 jae	 $LN3@LoadRecord

; 26   :     {
; 27   :         i32 nameLength;
; 28   :         highscoresFile.read(reinterpret_cast<char*>(&nameLength), sizeof(i32));

  00074	6a 00		 push	 0
  00076	6a 04		 push	 4
  00078	8d 4d e8	 lea	 ecx, DWORD PTR _nameLength$2[ebp]
  0007b	51		 push	 ecx
  0007c	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  00082	e8 00 00 00 00	 call	 ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read

; 29   :         m_records[recordIndex]->nameLength = nameLength;

  00087	8b 55 f0	 mov	 edx, DWORD PTR _recordIndex$[ebp]
  0008a	52		 push	 edx
  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 c1 10	 add	 ecx, 16			; 00000010H
  00091	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	8b 4d e8	 mov	 ecx, DWORD PTR _nameLength$2[ebp]
  0009b	89 08		 mov	 DWORD PTR [eax], ecx

; 30   :         highscoresFile.read(m_records[recordIndex]->name, nameLength);

  0009d	8b 45 e8	 mov	 eax, DWORD PTR _nameLength$2[ebp]
  000a0	99		 cdq
  000a1	52		 push	 edx
  000a2	50		 push	 eax
  000a3	8b 55 f0	 mov	 edx, DWORD PTR _recordIndex$[ebp]
  000a6	52		 push	 edx
  000a7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	83 c1 10	 add	 ecx, 16			; 00000010H
  000ad	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000b2	8b 00		 mov	 eax, DWORD PTR [eax]
  000b4	83 c0 04	 add	 eax, 4
  000b7	50		 push	 eax
  000b8	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  000be	e8 00 00 00 00	 call	 ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read

; 31   :         m_records[recordIndex]->name[nameLength] = '\0';

  000c3	8b 4d f0	 mov	 ecx, DWORD PTR _recordIndex$[ebp]
  000c6	51		 push	 ecx
  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	83 c1 10	 add	 ecx, 16			; 00000010H
  000cd	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000d2	8b 10		 mov	 edx, DWORD PTR [eax]
  000d4	8b 45 e8	 mov	 eax, DWORD PTR _nameLength$2[ebp]
  000d7	c6 44 02 04 00	 mov	 BYTE PTR [edx+eax+4], 0

; 32   :         highscoresFile.read(reinterpret_cast<char*>(&m_records[recordIndex]->score), sizeof(i32));

  000dc	6a 00		 push	 0
  000de	6a 04		 push	 4
  000e0	8b 4d f0	 mov	 ecx, DWORD PTR _recordIndex$[ebp]
  000e3	51		 push	 ecx
  000e4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	83 c1 10	 add	 ecx, 16			; 00000010H
  000ea	e8 00 00 00 00	 call	 ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
  000ef	8b 10		 mov	 edx, DWORD PTR [eax]
  000f1	83 c2 14	 add	 edx, 20			; 00000014H
  000f4	52		 push	 edx
  000f5	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  000fb	e8 00 00 00 00	 call	 ?read@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PAD_J@Z ; std::basic_istream<char,std::char_traits<char> >::read

; 33   :         ++recordIndex;

  00100	8b 45 f0	 mov	 eax, DWORD PTR _recordIndex$[ebp]
  00103	83 c0 01	 add	 eax, 1
  00106	89 45 f0	 mov	 DWORD PTR _recordIndex$[ebp], eax

; 34   :     }

  00109	e9 43 ff ff ff	 jmp	 $LN2@LoadRecord
$LN3@LoadRecord:

; 35   : }

  0010e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00115	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  0011b	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00120	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00123	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012a	59		 pop	 ecx
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?LoadRecords@Highscores@core@@QAEXXZ$0:
  00000	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _highscoresFile$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__ehhandler$?LoadRecords@Highscores@core@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 38 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-200]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadRecords@Highscores@core@@QAEXXZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadRecords@Highscores@core@@QAEXXZ ENDP		; core::Highscores::LoadRecords
; Function compile flags: /Odtp
; File c:\dev\tetris\src\highscores.cpp
; File c:\dev\tetris\src\highscores.hpp
; File c:\dev\tetris\src\highscores.cpp
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv84 = -28						; size = 4
$T3 = -24						; size = 4
_i$4 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_t_input$ = 8						; size = 4
_t_font$ = 12						; size = 4
_t_filename$ = 16					; size = 4
??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z PROC ; core::Highscores::Highscores
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : : m_input(t_input), m_font(t_font), m_filename(t_filename) 

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _t_input$[ebp]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx
  00030	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 45 0c	 mov	 eax, DWORD PTR _t_font$[ebp]
  00036	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 55 10	 mov	 edx, DWORD PTR _t_filename$[ebp]
  0003f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
; File c:\dev\tetris\src\highscores.hpp

; 28   :         size_t m_numberOfRecords = 5;

  00042	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 0c 05 00
	00 00		 mov	 DWORD PTR [eax+12], 5

; 29   :         std::vector<HighscoreHeader*> m_records = std::vector<HighscoreHeader*>();

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 10	 add	 ecx, 16			; 00000010H
  00052	e8 00 00 00 00	 call	 ??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\dev\tetris\src\highscores.cpp

; 14   :     for (size_t i = 0; i < m_numberOfRecords; ++i)

  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00065	eb 09		 jmp	 SHORT $LN4@Highscores
$LN2@Highscores:
  00067	8b 4d ec	 mov	 ecx, DWORD PTR _i$4[ebp]
  0006a	83 c1 01	 add	 ecx, 1
  0006d	89 4d ec	 mov	 DWORD PTR _i$4[ebp], ecx
$LN4@Highscores:
  00070	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 45 ec	 mov	 eax, DWORD PTR _i$4[ebp]
  00076	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00079	73 4f		 jae	 SHORT $LN1@Highscores

; 15   :     {
; 16   :         m_records.push_back(new HighscoreHeader());

  0007b	6a 18		 push	 24			; 00000018H
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00082	83 c4 04	 add	 esp, 4
  00085	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
  00088	83 7d e8 00	 cmp	 DWORD PTR $T3[ebp], 0
  0008c	74 1e		 je	 SHORT $LN6@Highscores
  0008e	33 c9		 xor	 ecx, ecx
  00090	8b 55 e8	 mov	 edx, DWORD PTR $T3[ebp]
  00093	89 0a		 mov	 DWORD PTR [edx], ecx
  00095	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00098	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  0009b	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0009e	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  000a1	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000a4	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  000a7	89 45 e4	 mov	 DWORD PTR tv84[ebp], eax
  000aa	eb 07		 jmp	 SHORT $LN7@Highscores
$LN6@Highscores:
  000ac	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN7@Highscores:
  000b3	8b 4d e4	 mov	 ecx, DWORD PTR tv84[ebp]
  000b6	89 4d e0	 mov	 DWORD PTR $T2[ebp], ecx
  000b9	8d 55 e0	 lea	 edx, DWORD PTR $T2[ebp]
  000bc	52		 push	 edx
  000bd	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	83 c1 10	 add	 ecx, 16			; 00000010H
  000c3	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::push_back

; 17   :     }

  000c8	eb 9d		 jmp	 SHORT $LN2@Highscores
$LN1@Highscores:

; 18   : }

  000ca	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000de	59		 pop	 ecx
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 10	 add	 ecx, 16			; 00000010H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::~vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
__ehhandler$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Highscores@core@@QAE@PAUInputState@@PAU_TTF_Font@@PBD@Z ENDP ; core::Highscores::Highscores
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEXPAPAUHighscoreHeader@core@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEXPAPAUHighscoreHeader@core@@0@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1959 : 		{	// orphan iterators within specified (inclusive) range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1960 : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEXPAPAUHighscoreHeader@core@@0@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@CAXXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@CAXXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00017	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001a	74 6b		 je	 SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	50		 push	 eax
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	51		 push	 ecx
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	52		 push	 edx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00073	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?_Tidy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXQAPAUHighscoreHeader@core@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXQAPAUHighscoreHeader@core@@II@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00018	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001b	74 41		 je	 SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
  00027	50		 push	 eax
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	51		 push	 ecx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity
  00043	50		 push	 eax
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	52		 push	 edx
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  00057	8b c8		 mov	 ecx, eax
  00059	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z ; std::allocator<core::HighscoreHeader *>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00069	89 08		 mov	 DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0006b	8b 55 0c	 mov	 edx, DWORD PTR __Newsize$[ebp]
  0006e	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00071	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  0007c	89 30		 mov	 DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  0007e	8b 4d 10	 mov	 ecx, DWORD PTR __Newcapacity$[ebp]
  00081	8b 55 08	 mov	 edx, DWORD PTR __Newvec$[ebp]
  00084	8d 34 8a	 lea	 esi, DWORD PTR [edx+ecx*4]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
  0008f	89 30		 mov	 DWORD PTR [eax], esi

; 1907 : 		}

  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXQAPAUHighscoreHeader@core@@II@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
_this$ = -8						; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEII@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity
  00011	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::max_size
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR __Oldcapacity$[ebp]
  0001f	d1 e9		 shr	 ecx, 1
  00021	2b c1		 sub	 eax, ecx
  00023	39 45 fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], eax
  00026	76 05		 jbe	 SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  00028	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002b	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR __Oldcapacity$[ebp]
  00030	d1 ea		 shr	 edx, 1
  00032	03 55 fc	 add	 edx, DWORD PTR __Oldcapacity$[ebp]
  00035	89 55 f4	 mov	 DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  00038	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0003b	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0003e	73 05		 jae	 SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00040	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00043	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

  00045	8b 45 f4	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABEII@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  0000f	50		 push	 eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAXPAPAUHighscoreHeader@core@@0AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ; std::_Destroy_range<std::allocator<core::HighscoreHeader *> >
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1850 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@0@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

  00009	33 c0		 xor	 eax, eax
  0000b	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  0000e	0f b6 4d ff	 movzx	 ecx, BYTE PTR $T1[ebp]
  00012	51		 push	 ecx
  00013	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp]
  00016	52		 push	 edx
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Umove_if_noexcept1@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00U?$integral_constant@_N$00@2@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  0000f	50		 push	 eax
  00010	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ; std::_Uninitialized_move<core::HighscoreHeader * *,core::HighscoreHeader * *,std::allocator<core::HighscoreHeader *> >
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 1834 : 		}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXPAPAUHighscoreHeader@core@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  0000f	50		 push	 eax
  00010	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00013	50		 push	 eax
  00014	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAUHighscoreHeader@core@@PAPAU12@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@YAPAPAUHighscoreHeader@core@@QAPAU12@0PAPAU12@AAV?$allocator@PAUHighscoreHeader@core@@@0@@Z ; std::_Uninitialized_move<core::HighscoreHeader * *,core::HighscoreHeader * *,std::allocator<core::HighscoreHeader *> >
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 1829 : 		}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEPAPAUHighscoreHeader@core@@PAPAU34@00@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");
; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]
  00014	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1737 : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??A?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEAAPAUHighscoreHeader@core@@I@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABE_NXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
  00012	8b f0		 mov	 esi, eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  0001c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00020	74 09		 je	 SHORT $LN3@Has_unused
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN4@Has_unused
$LN3@Has_unused:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
  00032	8a 45 f8	 mov	 al, BYTE PTR tv77[ebp]

; 1727 : 		}

  00035	5e		 pop	 esi
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?_Has_unused_capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@ABE_NXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
  00010	8b f0		 mov	 esi, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	2b 08		 sub	 ecx, DWORD PTR [eax]
  0001e	c1 f9 02	 sar	 ecx, 2
  00021	8b c1		 mov	 eax, ecx

; 1716 : 		}

  00023	5e		 pop	 esi
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?capacity@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAIABV?$allocator@PAUHighscoreHeader@core@@@2@@Z ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::max_size
  00017	83 c4 04	 add	 esp, 4
  0001a	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
  0001d	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00022	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00025	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  00028	50		 push	 eax
  00029	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00032	83 c4 08	 add	 esp, 8
  00035	8b 00		 mov	 eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?max_size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
  00010	8b f0		 mov	 esi, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	2b 08		 sub	 ecx, DWORD PTR [eax]
  0001e	c1 f9 02	 sar	 ecx, 2
  00021	8b c1		 mov	 eax, ecx

; 1705 : 		}

  00023	5e		 pop	 esi
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?size@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QBEIXZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$move@AAPAUHighscoreHeader@core@@@std@@YA$$QAPAUHighscoreHeader@core@@AAPAU12@@Z ; std::move<core::HighscoreHeader * &>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ??$emplace_back@PAUHighscoreHeader@core@@@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::emplace_back<core::HighscoreHeader *>

; 938  : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?push_back@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAEX$$QAPAUHighscoreHeader@core@@@Z ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::~vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@AAEXXZ ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::_Tidy

; 895  : 		}

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::~vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ PROC ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >

; 652  : 		}

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00034	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003b	59		 pop	 ecx
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ENDP ; std::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >::vector<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 389  : 		: _Myfirst(),

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 390  : 		_Mylast(),

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 393  : 		}

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
  0000f	83 c0 08	 add	 eax, 8

; 602  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
  0000f	83 c0 08	 add	 eax, 8

; 597  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
  0000f	83 c0 04	 add	 eax, 4

; 592  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
  0000f	83 c0 04	 add	 eax, 4

; 587  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data

; 582  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABQAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data

; 577  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAPAPAUHighscoreHeader@core@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second

; 561  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_second

; 556  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first

; 551  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QBEABV?$allocator@PAUHighscoreHeader@core@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Get_first

; 546  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$allocator@PAUHighscoreHeader@core@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Get_data
  0000f	8b c8		 mov	 ecx, eax
  00011	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 536  : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >, COMDAT
; _this$ = ecx

; 422  : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 421  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@PAUHighscoreHeader@core@@@std@@V?$_Vector_val@U?$_Simple_types@PAUHighscoreHeader@core@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1>::_Compressed_pair<std::allocator<core::HighscoreHeader *>,std::_Vector_val<std::_Simple_types<core::HighscoreHeader *> >,1><>

; 423  : 		}

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@PAUHighscoreHeader@core@@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >::_Vector_alloc<std::_Vec_base_types<core::HighscoreHeader *,std::allocator<core::HighscoreHeader *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAIABV?$allocator@PAUHighscoreHeader@core@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAIABV?$allocator@PAUHighscoreHeader@core@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::max_size, COMDAT

; 891  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00003	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 893  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PAUHighscoreHeader@core@@@std@@@std@@SAIABV?$allocator@PAUHighscoreHeader@core@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<core::HighscoreHeader *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEPAPAUHighscoreHeader@core@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEPAPAUHighscoreHeader@core@@I@Z PROC ; std::allocator<core::HighscoreHeader *>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$03@std@@YAII@Z ; std::_Get_size_of_n<4>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00019	83 c4 04	 add	 esp, 4

; 998  : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?allocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEPAPAUHighscoreHeader@core@@I@Z ENDP ; std::allocator<core::HighscoreHeader *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z PROC ; std::allocator<core::HighscoreHeader *>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	c1 e0 02	 shl	 eax, 2
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00017	83 c4 08	 add	 esp, 8

; 993  : 		}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUHighscoreHeader@core@@@std@@QAEXQAPAUHighscoreHeader@core@@I@Z ENDP ; std::allocator<core::HighscoreHeader *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@PAUHighscoreHeader@core@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAUHighscoreHeader@core@@@std@@QAE@XZ PROC ; std::allocator<core::HighscoreHeader *>::allocator<core::HighscoreHeader *>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0?$allocator@PAUHighscoreHeader@core@@@std@@QAE@XZ ENDP ; std::allocator<core::HighscoreHeader *>::allocator<core::HighscoreHeader *>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gios_base@std@@UAEPAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1ios_base@std@@UAE@XZ	; std::ios_base::~ios_base
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 38		 push	 56			; 00000038H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gios_base@std@@UAEPAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IAEXXZ
_TEXT	SEGMENT
tv83 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Init@ios_base@std@@IAEXXZ PROC			; std::ios_base::_Init, COMDAT
; _this$ = ecx

; 548  : 		{	// initialize a new ios_base

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 549  : 		_Ploc = nullptr;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 550  : 		_Stdstr = 0;

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 551  : 		_Except = goodbit;

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 552  : 		_Fmtfl = (fmtflags)(skipws | dec);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 40 14 01 02
	00 00		 mov	 DWORD PTR [eax+20], 513	; 00000201H

; 553  : 		_Prec = 6;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	c7 41 18 06 00
	00 00		 mov	 DWORD PTR [ecx+24], 6
  0003b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 554  : 		_Wide = 0;

  00042	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00045	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0004c	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0

; 555  : 		_Arr = nullptr;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 556  : 		_Calls = nullptr;

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 557  : 		clear(goodbit);

  00067	6a 00		 push	 0
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH@Z ; std::ios_base::clear

; 558  : 		_Ploc = new locale;

  00071	6a 08		 push	 8
  00073	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00078	83 c4 04	 add	 esp, 4
  0007b	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0007e	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00082	74 0d		 je	 SHORT $LN3@Init
  00084	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00087	e8 00 00 00 00	 call	 ??0locale@std@@QAE@XZ	; std::locale::locale
  0008c	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  0008f	eb 07		 jmp	 SHORT $LN4@Init
$LN3@Init:
  00091	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@Init:
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	8b 45 f4	 mov	 eax, DWORD PTR tv83[ebp]
  0009e	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 559  : 		}

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?_Init@ios_base@std@@IAEXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??0ios_base@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ios_base@std@@IAE@XZ PROC				; std::ios_base::ios_base, COMDAT
; _this$ = ecx

; 543  : 	__CLR_OR_THIS_CALL ios_base()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 544  : 		{	// default constructor
; 545  : 		}

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0ios_base@std@@IAE@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??1ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ios_base@std@@UAE@XZ PROC				; std::ios_base::~ios_base, COMDAT
; _this$ = ecx

; 533  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ios_base@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ios_base@std@@6B@

; 534  : 		_Ios_base_dtor(this);

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPAV12@@Z ; std::ios_base::_Ios_base_dtor
  00038	83 c4 04	 add	 esp, 4

; 535  : 		}

  0003b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00045	59		 pop	 ecx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ios_base@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ios_base@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ios_base@std@@UAE@XZ ENDP				; std::ios_base::~ios_base
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 444  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 445  : 		return (*_Ploc);

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00016	51		 push	 ecx
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??0locale@std@@QAE@ABV01@@Z ; std::locale::locale
  0001f	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00022	83 ca 01	 or	 edx, 1
  00025	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00028	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 446  : 		}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 389  : 		{	// return format flags

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 390  : 		return (_Fmtfl);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 391  : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 351  : 		{	// test if no state bits are set

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 352  : 		return (rdstate() == ios_base::goodbit);

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QBEHXZ ; std::ios_base::rdstate
  00011	85 c0		 test	 eax, eax
  00013	75 09		 jne	 SHORT $LN3@good
  00015	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@good
$LN3@good:
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@good:
  00025	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 353  : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 329  : 		{	// return stream state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 		return (_Mystate);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 331  : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
?clear@ios_base@std@@QAEXH@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 317  : 		{	// set state to argument

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 318  : 		clear(_State, false);

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 319  : 		}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?clear@ios_base@std@@QAEXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -40						; size = 20
$T2 = -20						; size = 8
_this$ = -12						; size = 4
__Msg$3 = -8						; size = 4
__Filtered$ = -4					; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 287  : 		{	// set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 288  : 		_State &= _Statmask;

  00009	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  0000c	83 e0 17	 and	 eax, 23			; 00000017H
  0000f	89 45 08	 mov	 DWORD PTR __State$[ebp], eax

; 289  : 		_Mystate = _State;

  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  00018	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 290  : 		const auto _Filtered = _State & _Except;

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR __State$[ebp]
  00021	23 48 10	 and	 ecx, DWORD PTR [eax+16]
  00024	89 4d fc	 mov	 DWORD PTR __Filtered$[ebp], ecx

; 291  : 		if (_Filtered)

  00027	74 63		 je	 SHORT $LN8@clear

; 292  : 			{
; 293  : 			if (_Reraise)

  00029	0f b6 55 0c	 movzx	 edx, BYTE PTR __Reraise$[ebp]
  0002d	85 d2		 test	 edx, edx
  0002f	74 09		 je	 SHORT $LN3@clear

; 294  : 				{
; 295  : 				_RERAISE;

  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 296  : 				}
; 297  : 
; 298  : 			const char * _Msg;
; 299  : 			if (_Filtered & ios_base::badbit)

  0003a	8b 45 fc	 mov	 eax, DWORD PTR __Filtered$[ebp]
  0003d	83 e0 04	 and	 eax, 4
  00040	74 09		 je	 SHORT $LN4@clear

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00042	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00049	eb 18		 jmp	 SHORT $LN5@clear
$LN4@clear:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __Filtered$[ebp]
  0004e	83 e1 02	 and	 ecx, 2
  00051	74 09		 je	 SHORT $LN6@clear

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";

  00053	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@

; 306  : 				}
; 307  : 			else

  0005a	eb 07		 jmp	 SHORT $LN5@clear
$LN6@clear:

; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";

  0005c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
$LN5@clear:

; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  00063	6a 01		 push	 1
  00065	8d 55 ec	 lea	 edx, DWORD PTR $T2[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0006e	83 c4 08	 add	 esp, 8
  00071	50		 push	 eax
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Msg$3[ebp]
  00075	50		 push	 eax
  00076	8d 4d d8	 lea	 ecx, DWORD PTR $T1[ebp]
  00079	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0007e	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00083	8d 4d d8	 lea	 ecx, DWORD PTR $T1[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@clear:

; 313  : 			}
; 314  : 		}

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1failure@ios_base@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 14		 push	 20			; 00000014H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@ABV01@@Z
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7failure@ios_base@std@@6B@
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1system_error@std@@UAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 237  : 			: system_error(_Errcode, _Message)

  00007	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  0000e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00011	52		 push	 edx
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	50		 push	 eax
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error

; 238  : 			{	// construct with message

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 607  : 	{	// return a reference to an object that will live forever

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 608  : 	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
; 609  : 	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
; 610  : 	static void * _Flag = nullptr;
; 611  : 	static aligned_union_t<1, _Ty> _Storage;
; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00003	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00008	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000d	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  00012	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001a	85 c0		 test	 eax, eax
  0001c	75 05		 jne	 SHORT $LN2@Immortaliz

; 613  : 		{	// _Execute_once should never fail if the callback never fails
; 614  : 		_STD terminate();

  0001e	e8 00 00 00 00	 call	 _terminate
$LN2@Immortaliz:

; 615  : 		}
; 616  : 
; 617  : 	return (reinterpret_cast<_Ty&>(_Storage));

  00023	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
$LN3@Immortaliz:

; 618  : 	}

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Iostream_error_category@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Generic_error_category@std@@UAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 516  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 517  : 		if (_Errcode == (int)io_errc::stream)

  00010	83 7d 0c 01	 cmp	 DWORD PTR __Errcode$[ebp], 1
  00014	75 1d		 jne	 SHORT $LN2@message

; 518  : 			{
; 519  : 			return ("iostream stream error");

  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00023	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00026	83 c8 01	 or	 eax, 1
  00029	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	eb 1e		 jmp	 SHORT $LN1@message

; 520  : 			}
; 521  : 		else

  00031	eb 1c		 jmp	 SHORT $LN1@message
$LN2@message:

; 522  : 			{
; 523  : 			return (_Generic_error_category::message(_Errcode));

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	52		 push	 edx
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
  00043	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00046	83 c8 01	 or	 eax, 1
  00049	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@message:

; 524  : 			}
; 525  : 		}

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 511  : 		{	// get name of category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 512  : 		return ("iostream");

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 513  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 505  : 	_Iostream_error_category() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 05 00
	00 00		 mov	 DWORD PTR [ecx+4], 5

; 508  : 		}

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Generic_error_category@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1error_category@std@@UAE@XZ ; std::error_category::~error_category
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 495  : 		{	// convert to name of error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 496  : 		return (_Syserror_map(_Errcode));

  00010	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00020	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00025	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00028	83 c9 01	 or	 ecx, 1
  0002b	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 497  : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 490  : 		{	// get name of category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 491  : 		return ("generic");

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07DCLBNMLN@generic@

; 492  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 484  : 	_Generic_error_category() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0error_category@std@@QAE@XZ ; std::error_category::error_category
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 485  : 		{	// default constructor
; 486  : 		_Addr = _Generic_addr;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 03 00
	00 00		 mov	 DWORD PTR [ecx+4], 3

; 487  : 		}

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1system_error@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 14		 push	 20			; 00000014H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0_System_error@std@@QAE@ABV01@@Z
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_System_error@std@@UAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 440  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 439  : 		: _Mybase(_Errcode, _Message)

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  0002e	50		 push	 eax
  0002f	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00032	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00041	51		 push	 ecx
  00042	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  00045	52		 push	 edx
  00046	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  00052	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00059	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0005c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 440  : 		{	// construct from error code and message string

  00061	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@

; 441  : 		}

  0006a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007b	33 cd		 xor	 ecx, ebp
  0007d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_System_error@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 14		 push	 20			; 00000014H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV01@@Z
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_System_error@std@@6B@
  0001c	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0001f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00022	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00025	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00028	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0002b	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1runtime_error@std@@UAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 4
tv137 = -52						; size = 4
tv135 = -48						; size = 4
_this$ = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 415  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 413  : 		: runtime_error(_Makestr(_Errcode, _Message)),

  0002b	83 ec 18	 sub	 esp, 24			; 00000018H
  0002e	8b cc		 mov	 ecx, esp
  00030	89 65 c8	 mov	 DWORD PTR $T2[ebp], esp
  00033	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  0003f	51		 push	 ecx
  00040	8b 55 08	 mov	 edx, DWORD PTR __Errcode$[ebp]
  00043	52		 push	 edx
  00044	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
  0004d	83 c4 24	 add	 esp, 36			; 00000024H
  00050	89 45 d0	 mov	 DWORD PTR tv135[ebp], eax
  00053	8b 4d d0	 mov	 ecx, DWORD PTR tv135[ebp]
  00056	89 4d cc	 mov	 DWORD PTR tv137[ebp], ecx
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00060	8b 55 cc	 mov	 edx, DWORD PTR tv137[ebp]
  00063	52		 push	 edx
  00064	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0006c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 415  : 		{	// construct from error code and message string

  0007b	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_System_error@std@@6B@

; 414  : 		_Mycode(_Errcode)

  00084	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 55 08	 mov	 edx, DWORD PTR __Errcode$[ebp]
  0008a	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0008d	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp+4]
  00090	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 416  : 		}

  00093	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
tv84 = -52						; size = 4
tv79 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 24
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 401  : 		{	// compose error message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 		if (!_Message.empty())

  00036	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00039	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	75 0d		 jne	 SHORT $LN2@Makestr

; 403  : 			{
; 404  : 			_Message.append(": ");

  00045	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  0004a	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  0004d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 405  : 			}
; 406  : 
; 407  : 		_Message.append(_Errcode.message());

  00052	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00055	51		 push	 ecx
  00056	8d 4d 0c	 lea	 ecx, DWORD PTR __Errcode$[ebp]
  00059	e8 00 00 00 00	 call	 ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
  0005e	89 45 d0	 mov	 DWORD PTR tv79[ebp], eax
  00061	8b 55 d0	 mov	 edx, DWORD PTR tv79[ebp]
  00064	89 55 cc	 mov	 DWORD PTR tv84[ebp], edx
  00067	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006b	8b 45 cc	 mov	 eax, DWORD PTR tv84[ebp]
  0006e	50		 push	 eax
  0006f	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00072	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00077	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0007e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 408  : 		return (_Message);

  00083	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00086	51		 push	 ecx
  00087	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0008a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0008f	8b 55 d4	 mov	 edx, DWORD PTR $T2[ebp]
  00092	83 ca 01	 or	 edx, 1
  00095	89 55 d4	 mov	 DWORD PTR $T2[ebp], edx
  00098	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009f	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  000a2	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 409  : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	33 cd		 xor	 ecx, ebp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
tv78 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 285  : 	{	// test errors for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 286  : 	return (_Left.category() == _Right.category()

  00005	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00008	e8 00 00 00 00	 call	 ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
  0000d	50		 push	 eax
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00011	e8 00 00 00 00	 call	 ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	74 1f		 je	 SHORT $LN3@operator
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00027	e8 00 00 00 00	 call	 ?value@error_condition@std@@QBEHXZ ; std::error_condition::value
  0002c	8b f0		 mov	 esi, eax
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00031	e8 00 00 00 00	 call	 ?value@error_condition@std@@QBEHXZ ; std::error_condition::value
  00036	3b f0		 cmp	 esi, eax
  00038	75 09		 jne	 SHORT $LN3@operator
  0003a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00041	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN4@operator:
  0004a	8a 45 fc	 mov	 al, BYTE PTR tv78[ebp]

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

  0004d	5e		 pop	 esi
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 246  : 		{	// get category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		return (*_Mycat);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 248  : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 241  : 		{	// get error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  : 		return (_Myval);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 243  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 208  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 206  : 		: _Myval(_Val),

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 207  : 		_Mycat(&_Cat)

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 209  : 		}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 181  : 		{	// get name of error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 182  : 		return (category().message(value()));

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
  00018	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?value@error_code@std@@QBEHXZ ; std::error_code::value
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00027	50		 push	 eax
  00028	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  0002b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  00030	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00033	ff d0		 call	 eax
  00035	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00038	83 c9 01	 or	 ecx, 1
  0003b	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  0003e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 183  : 		}

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 174  : 		{	// get category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 175  : 		return (*_Mycat);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 176  : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 169  : 		{	// get error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 		return (_Myval);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 171  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 136  : 		{	// construct from error code and category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 134  : 		: _Myval(_Val),

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 135  : 		_Mycat(&_Cat)

  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Cat$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 137  : 		}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 94   : 		{	// compare categories for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 		return (_Addr == _Right._Addr);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00012	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00015	75 09		 jne	 SHORT $LN3@operator
  00017	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001e	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00020	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@operator:
  00027	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 96   : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 338  : 	{	// test if conditions same for this category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Code$[ebp]
  0000c	e8 00 00 00 00	 call	 ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
  00011	50		 push	 eax
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	85 c0		 test	 eax, eax
  0001f	74 16		 je	 SHORT $LN3@equivalent
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Code$[ebp]
  00024	e8 00 00 00 00	 call	 ?value@error_code@std@@QBEHXZ ; std::error_code::value
  00029	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  0002c	75 09		 jne	 SHORT $LN3@equivalent
  0002e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  00035	eb 07		 jmp	 SHORT $LN4@equivalent
$LN3@equivalent:
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@equivalent:
  0003e	8a 45 fc	 mov	 al, BYTE PTR tv74[ebp]

; 340  : 	}

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 333  : 	{	// test if error code same condition

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  : 	return (default_error_condition(_Errval) == _Cond);

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Cond$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Errval$[ebp]
  00010	51		 push	 ecx
  00011	8d 55 f4	 lea	 edx, DWORD PTR $T1[ebp]
  00014	52		 push	 edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00020	ff d0		 call	 eax
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??8std@@YA_NABVerror_condition@0@0@Z ; std::operator==
  00028	83 c4 08	 add	 esp, 8

; 335  : 	}

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 328  : 	{	// make error_condition for error code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  : 	return (error_condition(_Errval, *this));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Errval$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	e8 00 00 00 00	 call	 ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
  00017	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 330  : 	}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 80   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 81   : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 74   : 	/* constexpr */ error_category() noexcept	// TRANSITION

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 		{	// default constructor
; 76   : 		_Addr = reinterpret_cast<uintptr_t>(this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 77   : 		}

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 627  : 	{	// get iostream_category

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?iostream_category@std@@YAABVerror_category@1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 628  : 	return (_Immortalize<_Iostream_error_category>());

  00022	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>

; 629  : 	}

  00027	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0002a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00031	59		 pop	 ecx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?iostream_category@std@@YAABVerror_category@1@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?iostream_category@std@@YAABVerror_category@1@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 355  : 	{	// make an error_code

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  : 	return (error_code((int)_Errno, iostream_category()));

  00003	e8 00 00 00 00	 call	 ?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
  00008	50		 push	 eax
  00009	8b 45 0c	 mov	 eax, DWORD PTR __Errno$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00010	e8 00 00 00 00	 call	 ??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code
  00015	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 357  : 	}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Lock$4 = -36						; size = 4
__Id$5 = -32						; size = 4
__Psave_guard$6 = -28					; size = 4
__Pf$7 = -24						; size = 4
__Pfmod$8 = -20						; size = 4
__Psave$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00025	6a 00		 push	 0
  00027	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  0003b	89 45 f0	 mov	 DWORD PTR __Psave$9[ebp], eax

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;

  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00043	e8 00 00 00 00	 call	 ??Bid@locale@std@@QAEIXZ ; std::locale::id::operator unsigned int
  00048	89 45 e0	 mov	 DWORD PTR __Id$5[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0004b	8b 4d e0	 mov	 ecx, DWORD PTR __Id$5[ebp]
  0004e	51		 push	 ecx
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00052	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  00057	89 45 e8	 mov	 DWORD PTR __Pf$7[ebp], eax

; 512  : 
; 513  : 		if (_Pf == nullptr)

  0005a	83 7d e8 00	 cmp	 DWORD PTR __Pf$7[ebp], 0
  0005e	0f 85 8d 00 00
	00		 jne	 $LN2@use_facet

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  00064	83 7d f0 00	 cmp	 DWORD PTR __Psave$9[ebp], 0
  00068	74 08		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  0006a	8b 55 f0	 mov	 edx, DWORD PTR __Psave$9[ebp]
  0006d	89 55 e8	 mov	 DWORD PTR __Pf$7[ebp], edx
  00070	eb 7f		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

  00072	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00075	50		 push	 eax
  00076	8d 4d f0	 lea	 ecx, DWORD PTR __Psave$9[ebp]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
  0007f	83 c4 08	 add	 esp, 8
  00082	83 f8 ff	 cmp	 eax, -1
  00085	75 18		 jne	 SHORT $LN5@use_facet

; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed

  00087	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0008a	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0008f	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00094	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 __CxxThrowException@8

; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else

  0009d	eb 52		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);

  0009f	8b 45 f0	 mov	 eax, DWORD PTR __Psave$9[ebp]
  000a2	89 45 ec	 mov	 DWORD PTR __Pfmod$8[ebp], eax

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

  000a5	8b 4d ec	 mov	 ecx, DWORD PTR __Pfmod$8[ebp]
  000a8	51		 push	 ecx
  000a9	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000ac	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
  000b1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

  000b5	8b 55 ec	 mov	 edx, DWORD PTR __Pfmod$8[ebp]
  000b8	52		 push	 edx
  000b9	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000be	83 c4 04	 add	 esp, 4

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  000c1	8b 45 ec	 mov	 eax, DWORD PTR __Pfmod$8[ebp]
  000c4	8b 10		 mov	 edx, DWORD PTR [eax]
  000c6	8b 4d ec	 mov	 ecx, DWORD PTR __Pfmod$8[ebp]
  000c9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000cc	ff d0		 call	 eax

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  000ce	8b 4d f0	 mov	 ecx, DWORD PTR __Psave$9[ebp]
  000d1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::ctype<char> >::_Psave

; 540  : 				_Pf = _Psave;

  000d7	8b 55 f0	 mov	 edx, DWORD PTR __Psave$9[ebp]
  000da	89 55 e8	 mov	 DWORD PTR __Pf$7[ebp], edx

; 541  : 
; 542  : 				(void) _Psave_guard.release();

  000dd	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000e0	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 543  : 				}

  000e5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000e9	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  000ec	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  000f1	8b 45 e8	 mov	 eax, DWORD PTR __Pf$7[ebp]
  000f4	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
  000f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fe	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00101	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00106	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
$LN7@use_facet:

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00109	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00113	59		 pop	 ecx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$ctype@D@std@@MAE@XZ ; std::ctype<char>::~ctype<char>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 18		 push	 24			; 00000018H
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2713 : 		{	// narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2714 : 		_Adl_verify_range(_First, _Last);

  00007	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000a	50		 push	 eax
  0000b	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  00014	83 c4 08	 add	 esp, 8

; 2715 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	2b 55 08	 sub	 edx, DWORD PTR __First$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 14	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _memcpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2716 : 		return (_Last);

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 2717 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2707 : 		{	// narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2708 : 		return (_Ch);

  00007	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2709 : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2700 : 		{	// widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2701 : 		_Adl_verify_range(_First, _Last);

  00007	8d 45 0c	 lea	 eax, DWORD PTR __Last$[ebp]
  0000a	50		 push	 eax
  0000b	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  00014	83 c4 08	 add	 esp, 8

; 2702 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00017	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0001a	2b 55 08	 sub	 edx, DWORD PTR __First$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _memcpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2703 : 		return (_Last);

  0002e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 2704 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2694 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2695 : 		return (_Byte);

  00007	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2696 : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2683 : 		{	// convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2684 : 		_Adl_verify_range((const _Elem *)_First, _Last);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0000f	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  00012	51		 push	 ecx
  00013	8d 55 fc	 lea	 edx, DWORD PTR $T1[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  0001c	83 c4 08	 add	 esp, 8

; 2685 : 		for (; _First != _Last; ++_First)

  0001f	eb 09		 jmp	 SHORT $LN4@do_toupper
$LN2@do_toupper:
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@do_toupper:
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002d	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00030	74 1d		 je	 SHORT $LN3@do_toupper

; 2686 : 			{
; 2687 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00032	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00035	83 c2 08	 add	 edx, 8
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 __Toupper
  00045	83 c4 08	 add	 esp, 8
  00048	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0004b	88 02		 mov	 BYTE PTR [edx], al

; 2688 : 			}

  0004d	eb d2		 jmp	 SHORT $LN2@do_toupper
$LN3@do_toupper:

; 2689 : 
; 2690 : 		return ((const _Elem *)_First);

  0004f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 2691 : 		}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2677 : 		{	// convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2678 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 08	 add	 eax, 8
  0000d	50		 push	 eax
  0000e	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __Toupper
  00018	83 c4 08	 add	 esp, 8

; 2679 : 		}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2666 : 		{	// convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2667 : 		_Adl_verify_range((const _Elem *)_First, _Last);

  00009	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0000f	8d 4d 0c	 lea	 ecx, DWORD PTR __Last$[ebp]
  00012	51		 push	 ecx
  00013	8d 55 fc	 lea	 edx, DWORD PTR $T1[ebp]
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
  0001c	83 c4 08	 add	 esp, 8

; 2668 : 		for (; _First != _Last; ++_First)

  0001f	eb 09		 jmp	 SHORT $LN4@do_tolower
$LN2@do_tolower:
  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@do_tolower:
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0002d	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00030	74 1d		 je	 SHORT $LN3@do_tolower

; 2669 : 			{
; 2670 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00032	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00035	83 c2 08	 add	 edx, 8
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 __Tolower
  00045	83 c4 08	 add	 esp, 8
  00048	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0004b	88 02		 mov	 BYTE PTR [edx], al

; 2671 : 			}

  0004d	eb d2		 jmp	 SHORT $LN2@do_tolower
$LN3@do_tolower:

; 2672 : 
; 2673 : 		return ((const _Elem *)_First);

  0004f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 2674 : 		}

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2660 : 		{	// convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2661 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 08	 add	 eax, 8
  0000d	50		 push	 eax
  0000e	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 __Tolower
  00018	83 c4 08	 add	 esp, 8

; 2662 : 		}

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2650 : 		{	// free any allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2651 : 		if (0 < _Ctype._Delfl)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00010	7e 11		 jle	 SHORT $LN2@Tidy

; 2652 : 			_CSTD free((void *)_Ctype._Table);

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00018	52		 push	 edx
  00019	e8 00 00 00 00	 call	 _free
  0001e	83 c4 04	 add	 esp, 4
  00021	eb 1e		 jmp	 SHORT $LN3@Tidy
$LN2@Tidy:

; 2653 : 		else if (_Ctype._Delfl < 0)

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002a	7d 15		 jge	 SHORT $LN3@Tidy

; 2654 : 			delete[] _Ctype._Table;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  00035	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003e	83 c4 04	 add	 esp, 4
$LN3@Tidy:

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 _free
  0004d	83 c4 04	 add	 esp, 4

; 2657 : 		}

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2645 : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2646 : 		_Ctype = _Lobj._Getctype();

  00009	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __Lobj$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	83 c1 08	 add	 ecx, 8
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	89 11		 mov	 DWORD PTR [ecx], edx
  0001f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00022	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00025	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00028	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0002b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0002e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 2647 : 		}

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2640 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ctype@D@std@@MAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$ctype@D@std@@6B@

; 2641 : 		_Tidy();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IAEXXZ ; std::ctype<char>::_Tidy

; 2642 : 		}

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ctype@D@std@@MAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ctype@D@std@@MAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv128 = -32						; size = 4
tv133 = -28						; size = 4
tv89 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2618 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 2619 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0002c	83 7d 08 00	 cmp	 DWORD PTR __Ppf$[ebp], 0
  00030	0f 84 97 00 00
	00		 je	 $LN2@Getcat
  00036	8b 45 08	 mov	 eax, DWORD PTR __Ppf$[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	0f 85 8b 00 00
	00		 jne	 $LN2@Getcat

; 2620 : 			*_Ppf = new ctype<_Elem>(

  00042	6a 18		 push	 24			; 00000018H
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	83 7d ec 00	 cmp	 DWORD PTR $T4[ebp], 0
  0005a	74 3a		 je	 SHORT $LN4@Getcat
  0005c	6a 00		 push	 0
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00061	e8 00 00 00 00	 call	 ?c_str@locale@std@@QBEPBDXZ ; std::locale::c_str
  00066	50		 push	 eax
  00067	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006a	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  0006f	89 45 e4	 mov	 DWORD PTR tv133[ebp], eax
  00072	8b 4d e4	 mov	 ecx, DWORD PTR tv133[ebp]
  00075	89 4d e0	 mov	 DWORD PTR tv128[ebp], ecx
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0007c	8b 55 f0	 mov	 edx, DWORD PTR $T5[ebp]
  0007f	83 ca 01	 or	 edx, 1
  00082	89 55 f0	 mov	 DWORD PTR $T5[ebp], edx
  00085	8b 45 e0	 mov	 eax, DWORD PTR tv128[ebp]
  00088	50		 push	 eax
  00089	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  0008c	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ; std::ctype<char>::ctype<char>
  00091	89 45 e8	 mov	 DWORD PTR tv89[ebp], eax
  00094	eb 07		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00096	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN5@Getcat:
  0009d	8b 4d e8	 mov	 ecx, DWORD PTR tv89[ebp]
  000a0	89 4d dc	 mov	 DWORD PTR $T3[ebp], ecx
  000a3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ppf$[ebp]
  000ad	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  000b0	89 02		 mov	 DWORD PTR [edx], eax
  000b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
  000bc	83 e1 01	 and	 ecx, 1
  000bf	74 0c		 je	 SHORT $LN2@Getcat
  000c1	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  000c5	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  000c8	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 2621 : 				_Locinfo(_Ploc->c_str()));
; 2622 : 		return (_X_CTYPE);

  000cd	b8 02 00 00 00	 mov	 eax, 2

; 2623 : 		}

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  0001f	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2612 : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2611 : 		: ctype_base(_Refs)

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0ctype_base@std@@QAE@I@Z ; std::ctype_base::ctype_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2612 : 		{	// construct from current locale

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$ctype@D@std@@6B@

; 2613 : 		_Init(_Lobj);

  00042	8b 55 08	 mov	 edx, DWORD PTR __Lobj$[ebp]
  00045	52		 push	 edx
  00046	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<char>::_Init

; 2614 : 		}

  0004e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?widen@?$ctype@D@std@@QBEDD@Z PROC			; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2565 : 		{	// widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2566 : 		return (do_widen(_Byte));

  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Byte$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00017	ff d0		 call	 eax

; 2567 : 		}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?widen@?$ctype@D@std@@QBEDD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?is@?$ctype@D@std@@QBE_NFD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 1
?is@?$ctype@D@std@@QBE_NFD@Z PROC			; std::ctype<char>::is, COMDAT
; _this$ = ecx

; 2507 : 		{	// test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2508 : 		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);

  00009	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00013	0f bf 04 42	 movsx	 eax, WORD PTR [edx+eax*2]
  00017	0f bf 4d 08	 movsx	 ecx, WORD PTR __Maskval$[ebp]
  0001b	23 c1		 and	 eax, ecx
  0001d	74 09		 je	 SHORT $LN3@is
  0001f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00026	eb 07		 jmp	 SHORT $LN4@is
$LN3@is:
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@is:
  0002f	8a 45 fc	 mov	 al, BYTE PTR tv73[ebp]

; 2509 : 		}

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?is@?$ctype@D@std@@QBE_NFD@Z ENDP			; std::ctype<char>::is
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1ctype_base@std@@UAE@XZ ; std::ctype_base::~ctype_base
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2217 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2213 : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2212 : 		: locale::facet(_Refs)

  00007	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet

; 2213 : 		{	// default constructor

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2214 : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 615  : 	{	// check that [_First, _Last) forms an iterator range

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});

  00004	33 c0		 xor	 eax, eax
  00006	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00009	0f b6 4d ff	 movzx	 ecx, BYTE PTR $T1[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 617  : 	}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
  0000e	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00010	73 08		 jae	 SHORT $LN3@Min_value
  00012	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00015	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00018	eb 06		 jmp	 SHORT $LN4@Min_value
$LN3@Min_value:
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001d	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
  00020	8b 55 fc	 mov	 edx, DWORD PTR tv65[ebp]
  00023	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  00026	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 25   : 	}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gcodecvt_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gcodecvt_base@std@@UAEPAXI@Z PROC			; std::codecvt_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1codecvt_base@std@@UAE@XZ ; std::codecvt_base::~codecvt_base
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gcodecvt_base@std@@UAEPAXI@Z ENDP			; std::codecvt_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_encoding@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_encoding@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_encoding, COMDAT
; _this$ = ecx

; 809  : 		{	// return length of code sequence (from codecvt)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 810  : 		return (1);	// -1 ==> state dependent, 0 ==> varying length

  00007	b8 01 00 00 00	 mov	 eax, 1

; 811  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?do_encoding@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_encoding
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_max_length@codecvt_base@std@@MBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_max_length@codecvt_base@std@@MBEHXZ PROC		; std::codecvt_base::do_max_length, COMDAT
; _this$ = ecx

; 804  : 		{	// return maximum length required for a conversion (from codecvt)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 805  : 		return (1);

  00007	b8 01 00 00 00	 mov	 eax, 1

; 806  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?do_max_length@codecvt_base@std@@MBEHXZ ENDP		; std::codecvt_base::do_max_length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_always_noconv@codecvt_base@std@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_always_noconv@codecvt_base@std@@MBE_NXZ PROC	; std::codecvt_base::do_always_noconv, COMDAT
; _this$ = ecx

; 799  : 		{	// return true if conversions never change input (from codecvt)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 800  : 		return (false);

  00007	32 c0		 xor	 al, al

; 801  : 		}

  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?do_always_noconv@codecvt_base@std@@MBE_NXZ ENDP	; std::codecvt_base::do_always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1codecvt_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1codecvt_base@std@@UAE@XZ PROC			; std::codecvt_base::~codecvt_base, COMDAT
; _this$ = ecx

; 794  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7codecvt_base@std@@6B@

; 795  : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1codecvt_base@std@@UAE@XZ ENDP			; std::codecvt_base::~codecvt_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?always_noconv@codecvt_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?always_noconv@codecvt_base@std@@QBE_NXZ PROC		; std::codecvt_base::always_noconv, COMDAT
; _this$ = ecx

; 779  : 		{	// return true if conversions never change input (from codecvt)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 780  : 		return (do_always_noconv());

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00012	ff d0		 call	 eax

; 781  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?always_noconv@codecvt_base@std@@QBE_NXZ ENDP		; std::codecvt_base::always_noconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0codecvt_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0codecvt_base@std@@QAE@I@Z PROC			; std::codecvt_base::codecvt_base, COMDAT
; _this$ = ecx

; 775  : 		{	// default constructor

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 774  : 		: locale::facet(_Refs)

  00007	8b 45 08	 mov	 eax, DWORD PTR __Refs$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0facet@locale@std@@IAE@I@Z ; std::locale::facet::facet

; 775  : 		{	// default constructor

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7codecvt_base@std@@6B@

; 776  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0codecvt_base@std@@QAE@I@Z ENDP			; std::codecvt_base::codecvt_base
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glocale@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glocale@std@@QAEPAXI@Z PROC				; std::locale::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Glocale@std@@QAEPAXI@Z ENDP				; std::locale::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -20						; size = 4
__Ptr0$1 = -16						; size = 4
__Facptr$ = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 435  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000f	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00012	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00015	73 14		 jae	 SHORT $LN6@Getfacet
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00020	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  00023	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00026	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
  00029	eb 07		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00032	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00035	89 55 f4	 mov	 DWORD PTR __Facptr$[ebp], edx

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00038	83 7d f4 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0003c	75 0e		 jne	 SHORT $LN4@Getfacet
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00044	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00048	85 d2		 test	 edx, edx
  0004a	75 07		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:

; 439  : 			return (_Facptr);	// found facet or not transparent

  0004c	8b 45 f4	 mov	 eax, DWORD PTR __Facptr$[ebp]
  0004f	eb 30		 jmp	 SHORT $LN1@Getfacet

; 440  : 		else

  00051	eb 2e		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00053	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00058	89 45 f0	 mov	 DWORD PTR __Ptr0$1[ebp], eax

; 443  : 			return (_Id < _Ptr0->_Facetcount

  0005b	8b 45 f0	 mov	 eax, DWORD PTR __Ptr0$1[ebp]
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  00061	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00064	73 11		 jae	 SHORT $LN8@Getfacet
  00066	8b 55 f0	 mov	 edx, DWORD PTR __Ptr0$1[ebp]
  00069	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006f	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00072	89 55 ec	 mov	 DWORD PTR tv83[ebp], edx
  00075	eb 07		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  00077	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
  0007e	8b 45 ec	 mov	 eax, DWORD PTR tv83[ebp]
$LN1@Getfacet:

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 430  : 		{	// return locale name as NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $LN3@c_str
  00012	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@@
  00019	eb 11		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00021	83 c1 18	 add	 ecx, 24			; 00000018H
  00024	e8 00 00 00 00	 call	 ?c_str@?$_Yarn@D@std@@QBEPBDXZ ; std::_Yarn<char>::c_str
  00029	89 45 f8	 mov	 DWORD PTR tv70[ebp], eax
$LN4@c_str:
  0002c	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]

; 432  : 		}

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 408  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 409  : 		if (_Ptr != nullptr)

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0002f	74 3c		 je	 SHORT $LN3@locale

; 410  : 			delete _Ptr->_Decref();

  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 12		 mov	 edx, DWORD PTR [edx]
  0003c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00042	ff d0		 call	 eax
  00044	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00047	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0004a	89 4d ec	 mov	 DWORD PTR $T3[ebp], ecx
  0004d	83 7d ec 00	 cmp	 DWORD PTR $T3[ebp], 0
  00051	74 13		 je	 SHORT $LN4@locale
  00053	6a 01		 push	 1
  00055	8b 55 ec	 mov	 edx, DWORD PTR $T3[ebp]
  00058	8b 02		 mov	 eax, DWORD PTR [edx]
  0005a	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	ff d2		 call	 edx
  00061	89 45 e4	 mov	 DWORD PTR tv84[ebp], eax
  00064	eb 07		 jmp	 SHORT $LN3@locale
$LN4@locale:
  00066	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN3@locale:

; 411  : 		}

  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0locale@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0locale@std@@QAE@XZ PROC				; std::locale::locale, COMDAT
; _this$ = ecx

; 309  : 		{	// construct from current locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 308  : 		: _Ptr(_Init(true))

  00026	6a 01		 push	 1
  00028	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPAV_Locimp@12@_N@Z ; std::locale::_Init
  0002d	83 c4 04	 add	 esp, 4
  00030	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 310  : 		}

  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@XZ ENDP				; std::locale::locale
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 303  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		: _Ptr(_Right._Ptr)

  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 304  : 		_Ptr->_Incref();

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00038	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00040	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00043	ff d2		 call	 edx

; 305  : 		}

  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Odtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 08		 push	 8
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 176  : 			{	// ensure that derived classes can be destroyed properly

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 172  : 			{	// construct with initial reference count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0_Facet_base@std@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 08	 mov	 edx, DWORD PTR __Initrefs$[ebp]
  0001e	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 173  : 			}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 157  : 			{	// decrement use count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 			if (_MT_DECR(_Myrefs) == 0)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	83 c9 ff	 or	 ecx, -1
  00010	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00014	49		 dec	 ecx
  00015	75 05		 jne	 SHORT $LN2@Decref

; 159  : 				{
; 160  : 				return (this);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	eb 02		 jmp	 SHORT $LN1@Decref
$LN2@Decref:

; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);

  0001c	33 c0		 xor	 eax, eax
$LN1@Decref:

; 164  : 			}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 152  : 			{	// increment use count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 153  : 			_MT_INCR(_Myrefs);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	f0 ff 00	 lock	  inc	 DWORD PTR [eax]

; 154  : 			}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -8						; size = 4
_this$ = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 115  : 			{	// get stamp, with lazy allocation

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 116  : 			if (_Id == 0)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	75 34		 jne	 SHORT $LN2@operator

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00011	6a 00		 push	 0
  00013	8d 4d f8	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00016	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00021	75 1a		 jne	 SHORT $LN3@operator

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00029	83 c2 01	 add	 edx, 1
  0002c	89 15 00 00 00
	00		 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, edx ; std::locale::id::_Id_cnt
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0003b	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@operator:

; 122  : 						}
; 123  : 				_END_LOCK()

  0003d	8d 4d f8	 lea	 ecx, DWORD PTR __Lock$1[ebp]
  00040	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 124  : 				}
; 125  : 			return (_Id);

  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]

; 126  : 			}

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 111  : 			{	// construct with specified stamp value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 			: _Id(_Val)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 112  : 			}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UAE@XZ ; std::_Facet_base::~_Facet_base
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 04		 push	 4
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@

; 27   : 		}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4169 : 		if (_Myptr != nullptr)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0e		 je	 SHORT $LN2@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN2@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4179 : 		}

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Yarn@_W@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4143 : 		_Tidy();

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@_W@std@@AAEXXZ ; std::_Yarn<wchar_t>::_Tidy

; 4144 : 		}

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@_W@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4087 : 		{	// default construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	33 c9		 xor	 ecx, ecx
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	66 89 4a 04	 mov	 WORD PTR [edx+4], cx

; 4088 : 		}

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4169 : 		if (_Myptr != nullptr)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0e		 je	 SHORT $LN2@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN2@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 4179 : 		}

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 4152 : 		{	// return NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 0a		 je	 SHORT $LN3@c_str
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 55 f8	 mov	 DWORD PTR tv68[ebp], edx
  00019	eb 09		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 c0 04	 add	 eax, 4
  00021	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
$LN4@c_str:
  00024	8b 45 f8	 mov	 eax, DWORD PTR tv68[ebp]

; 4154 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$_Yarn@D@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 4143 : 		_Tidy();

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@D@std@@AAEXXZ ; std::_Yarn<char>::_Tidy

; 4144 : 		}

  0002e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00031	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00038	59		 pop	 ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@D@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 4087 : 		{	// default construct

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 4088 : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 16
$T2 = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 		return (::_Getctype());

  00009	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 __Getctype
  00012	83 c4 04	 add	 esp, 4
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
  0001a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001d	89 55 f0	 mov	 DWORD PTR $T2[ebp+4], edx
  00020	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00023	89 4d f4	 mov	 DWORD PTR $T2[ebp+8], ecx
  00026	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00029	89 55 f8	 mov	 DWORD PTR $T2[ebp+12], edx
  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	8b 55 f0	 mov	 edx, DWORD PTR $T2[ebp+4]
  00037	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR $T2[ebp+8]
  0003d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00040	8b 55 f8	 mov	 edx, DWORD PTR $T2[ebp+12]
  00043	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 118  : 		}

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 		_Locinfo_dtor(this);

  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
  0002f	83 c4 04	 add	 esp, 4

; 96   : 		}

  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00038	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 c1 24	 add	 ecx, 36			; 00000024H
  00043	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0004e	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	83 c1 14	 add	 ecx, 20			; 00000014H
  00059	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00069	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	83 c1 04	 add	 ecx, 4
  0006f	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  00074	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00086	59		 pop	 ecx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 73   : 		: _Lock(_LOCK_LOCALE)

  00028	6a 00		 push	 0
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 76   : 		{	// construct from NTBS

  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 04	 add	 ecx, 4
  0003f	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004e	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00053	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	83 c1 14	 add	 ecx, 20			; 00000014H
  0005d	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00062	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00066	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0006c	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00071	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	83 c1 24	 add	 ecx, 36			; 00000024H
  0007b	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  00080	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0008a	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::_Yarn<char>
  0008f	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6

; 77   : 		if (_Pch == nullptr)

  00093	83 7d 08 00	 cmp	 DWORD PTR __Pch$[ebp], 0
  00097	75 1b		 jne	 SHORT $LN2@Locinfo

; 78   : 			_THROW(runtime_error("bad locale name"));

  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009e	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  000a1	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error
  000a6	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  000ab	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

  000b4	8b 4d 08	 mov	 ecx, DWORD PTR __Pch$[ebp]
  000b7	51		 push	 ecx
  000b8	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  000c1	83 c4 08	 add	 esp, 8

; 80   : 		}

  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@Locinfo:
  000ce	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d8	59		 pop	 ecx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1bad_cast@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 0c		 push	 12			; 0000000cH
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 131  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 130  :         : exception("bad cast", 1)

  00007	6a 01		 push	 1
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast@
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBDH@Z ; std::exception::exception

; 131  :     {

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 132  :     }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1runtime_error@std@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 0c		 push	 12			; 0000000cH
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 		: _Mybase(_Message)

  00007	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBD@Z ; std::exception::exception

; 170  : 		{	// construct from message string

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 165  : 		{	// construct from message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		: _Mybase(_Message.c_str())

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  0000a	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??0exception@std@@QAE@QBD@Z ; std::exception::exception

; 165  : 		{	// construct from message string

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@

; 166  : 		}

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4003 : 		{	// report a length_error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4004 : 		_Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 4005 : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Ptr$1 = -20						; size = 4
__Al$2 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T3 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3985 : 		this->_Orphan_all();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3986 : 		auto& _My_data = this->_Get_data();

  00011	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00019	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3987 : 		if (_My_data._Large_string_engaged())

  0001c	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	74 42		 je	 SHORT $LN2@Tidy_deall

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 55 ec	 mov	 DWORD PTR __Ptr$1[ebp], edx

; 3990 : 			auto& _Al = this->_Getal();

  00033	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0003b	89 45 f0	 mov	 DWORD PTR __Al$2[ebp], eax

; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

  0003e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  00047	83 c4 04	 add	 esp, 4
  0004a	50		 push	 eax
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR __Al$2[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
  00054	83 c4 08	 add	 esp, 8

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00057	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0005a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005d	83 c0 01	 add	 eax, 1
  00060	50		 push	 eax
  00061	8b 4d ec	 mov	 ecx, DWORD PTR __Ptr$1[ebp]
  00064	51		 push	 ecx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR __Al$2[ebp]
  00068	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3993 : 			}
; 3994 : 
; 3995 : 		_My_data._Mysize = 0;

  0006d	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00070	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00077	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007a	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 3997 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3998 : 		// write can alias this
; 3999 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00081	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0
  00085	8d 4d ff	 lea	 ecx, DWORD PTR $T3[ebp]
  00088	51		 push	 ecx
  00089	ba 01 00 00 00	 mov	 edx, 1
  0008e	6b c2 00	 imul	 eax, edx, 0
  00091	03 45 f8	 add	 eax, DWORD PTR __My_data$[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0009a	83 c4 08	 add	 esp, 8

; 4000 : 		}

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3974 : 		{	// initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3975 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3976 : 		_My_data._Mysize = 0;

  00014	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001e	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00021	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 3978 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3979 : 		// write can alias this
; 3980 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00028	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0002c	8d 55 ff	 lea	 edx, DWORD PTR $T1[ebp]
  0002f	52		 push	 edx
  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	6b c8 00	 imul	 ecx, eax, 0
  00038	03 4d f8	 add	 ecx, DWORD PTR __My_data$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00041	83 c4 08	 add	 esp, 8

; 3981 : 		}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
__My_data$ = -20					; size = 4
__Masked$ = -16						; size = 4
_this$ = -12						; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3867 : 		const size_type _Max = max_size();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax

; 3868 : 		auto& _My_data = this->_Get_data();

  00014	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0001c	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0001f	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00022	83 c8 0f	 or	 eax, 15			; 0000000fH
  00025	89 45 f0	 mov	 DWORD PTR __Masked$[ebp], eax

; 3870 : 		if (_Masked > _Max)

  00028	8b 4d f0	 mov	 ecx, DWORD PTR __Masked$[ebp]
  0002b	3b 4d fc	 cmp	 ecx, DWORD PTR __Max$[ebp]
  0002e	76 05		 jbe	 SHORT $LN2@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00030	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00033	eb 3a		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00035	8b 55 ec	 mov	 edx, DWORD PTR __My_data$[ebp]
  00038	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0003b	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 3876 : 		if (_Old > _Max - _Old / 2)

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR __Old$[ebp]
  00041	d1 e9		 shr	 ecx, 1
  00043	8b 55 fc	 mov	 edx, DWORD PTR __Max$[ebp]
  00046	2b d1		 sub	 edx, ecx
  00048	39 55 f8	 cmp	 DWORD PTR __Old$[ebp], edx
  0004b	76 05		 jbe	 SHORT $LN3@Calculate_

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00050	eb 1d		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00052	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00055	d1 e8		 shr	 eax, 1
  00057	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  0005a	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
  0005d	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00060	51		 push	 ecx
  00061	8d 55 f0	 lea	 edx, DWORD PTR __Masked$[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  0006a	83 c4 08	 add	 esp, 8
  0006d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3882 : 		}

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3370 : 		{	// test if sequence is empty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3371 : 		return (size() == 0);

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00011	85 c0		 test	 eax, eax
  00013	75 09		 jne	 SHORT $LN3@empty
  00015	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@empty:
  00025	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 3372 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Storage_max$ = -16					; size = 4
__Alloc_max$ = -12					; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3306 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  00017	83 c4 04	 add	 esp, 4
  0001a	89 45 f4	 mov	 DWORD PTR __Alloc_max$[ebp], eax

; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

  0001d	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR $T3[ebp], 16	; 00000010H
  00024	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  00027	50		 push	 eax
  00028	8d 4d f4	 lea	 ecx, DWORD PTR __Alloc_max$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 ??$_Max_value@I@std@@YAABIABI0@Z ; std::_Max_value<unsigned int>
  00031	83 c4 08	 add	 esp, 8
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	89 55 f0	 mov	 DWORD PTR __Storage_max$[ebp], edx

; 3310 : 		return (_Min_value(

  00039	8b 45 f0	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00042	e8 00 00 00 00	 call	 ?max@?$numeric_limits@H@std@@SAHXZ ; std::numeric_limits<int>::max
  00047	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
  0004a	8d 4d ec	 lea	 ecx, DWORD PTR $T2[ebp]
  0004d	51		 push	 ecx
  0004e	8d 55 e8	 lea	 edx, DWORD PTR $T1[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00057	83 c4 08	 add	 esp, 8
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3301 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0000f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 3303 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 3284 : 		{	// return pointer to immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3285 : 		return (this->_Get_data()._Myptr());

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3286 : 		}

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3279 : 		{	// return pointer to null-terminated immutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3280 : 		return (this->_Get_data()._Myptr());

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0002e	8b c8		 mov	 ecx, eax
  00030	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3281 : 		}

  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front, COMDAT
; _this$ = ecx

; 3259 : 		{	// return first element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3260 : 		return (*begin());

  00009	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 3261 : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::front
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Ptr$1 = -16						; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Ch$ = 8						; size = 1
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back, COMDAT
; _this$ = ecx

; 3227 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3228 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 3229 : 		const size_type _Old_size = _My_data._Mysize;

  00014	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001a	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 3230 : 		if (_Old_size < _My_data._Myres)

  0001d	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00020	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00023	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  00026	73 47		 jae	 SHORT $LN2@push_back

; 3231 : 			{
; 3232 : 			_My_data._Mysize = _Old_size + 1;

  00028	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0002b	83 c1 01	 add	 ecx, 1
  0002e	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00031	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 3233 : 			_Elem * const _Ptr = _My_data._Myptr();

  00034	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00037	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003c	89 45 f0	 mov	 DWORD PTR __Ptr$1[ebp], eax

; 3234 : 			_Traits::assign(_Ptr[_Old_size], _Ch);

  0003f	8d 45 08	 lea	 eax, DWORD PTR __Ch$[ebp]
  00042	50		 push	 eax
  00043	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$1[ebp]
  00046	03 4d f4	 add	 ecx, DWORD PTR __Old_size$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0004f	83 c4 08	 add	 esp, 8

; 3235 : 			_Traits::assign(_Ptr[_Old_size + 1], _Elem());

  00052	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0
  00056	8d 55 ff	 lea	 edx, DWORD PTR $T3[ebp]
  00059	52		 push	 edx
  0005a	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  0005d	8b 4d f0	 mov	 ecx, DWORD PTR __Ptr$1[ebp]
  00060	8d 54 01 01	 lea	 edx, DWORD PTR [ecx+eax+1]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0006a	83 c4 08	 add	 esp, 8

; 3236 : 			return;

  0006d	eb 19		 jmp	 SHORT $LN1@push_back
$LN2@push_back:

; 3237 : 			}
; 3238 : 
; 3239 : 		_Reallocate_grow_by(1,

  0006f	33 c0		 xor	 eax, eax
  00071	88 45 fe	 mov	 BYTE PTR $T2[ebp], al
  00074	0f b6 4d 08	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  00078	51		 push	 ecx
  00079	0f b6 55 fe	 movzx	 edx, BYTE PTR $T2[ebp]
  0007d	52		 push	 edx
  0007e	6a 01		 push	 1
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_15711c68e099a15a58f4d77303cb286d>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_15711c68e099a15a58f4d77303cb286d>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_15711c68e099a15a58f4d77303cb286d>,char>
$LN1@push_back:

; 3240 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 3241 : 				const _Elem _Ch) {
; 3242 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3243 : 			_Traits::assign(_New_ptr[_Old_size], _Ch);
; 3244 : 			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
; 3245 : 			}, _Ch);
; 3246 : 		}

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__My_data$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 3072 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3073 : 		auto _My_data = _STD addressof(this->_Get_data());

  00028	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f0	 mov	 DWORD PTR __My_data$[ebp], eax

; 3074 : 		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));

  0003c	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003f	50		 push	 eax
  00040	8b 4d f0	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00043	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??$_Refancy@PAD$0A@@std@@YAPADPAD@Z ; std::_Refancy<char *,0>
  0004e	83 c4 04	 add	 esp, 4
  00051	50		 push	 eax
  00052	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00055	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  0005a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3075 : 		}

  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Old_size$ = -24					; size = 4
__My_ptr$ = -20						; size = 4
_this$ = -16						; size = 4
__Erase_at$ = -12					; size = 4
__New_size$ = -8					; size = 4
__My_data$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2841 : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2842 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 2843 : 		_My_data._Check_offset(_Off);

  00014	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2844 : 		_Count = _My_data._Clamp_suffix_size(_Off, _Count);

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 08	 mov	 edx, DWORD PTR __Off$[ebp]
  00027	52		 push	 edx
  00028	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00030	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax

; 2845 : 		const size_type _Old_size = _My_data._Mysize;

  00033	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00036	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00039	89 4d e8	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2846 : 		_Elem * const _My_ptr = _My_data._Myptr();

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00044	89 45 ec	 mov	 DWORD PTR __My_ptr$[ebp], eax

; 2847 : 		_Elem * const _Erase_at = _My_ptr + _Off;

  00047	8b 55 ec	 mov	 edx, DWORD PTR __My_ptr$[ebp]
  0004a	03 55 08	 add	 edx, DWORD PTR __Off$[ebp]
  0004d	89 55 f4	 mov	 DWORD PTR __Erase_at$[ebp], edx

; 2848 : 		const size_type _New_size = _Old_size - _Count;

  00050	8b 45 e8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00053	2b 45 0c	 sub	 eax, DWORD PTR __Count$[ebp]
  00056	89 45 f8	 mov	 DWORD PTR __New_size$[ebp], eax

; 2849 : 		_My_data._Mysize = _New_size;

  00059	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0005c	8b 55 f8	 mov	 edx, DWORD PTR __New_size$[ebp]
  0005f	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 2850 : 		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  00062	8b 45 f8	 mov	 eax, DWORD PTR __New_size$[ebp]
  00065	2b 45 08	 sub	 eax, DWORD PTR __Off$[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR __Erase_at$[ebp]
  0006f	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00072	51		 push	 ecx
  00073	8b 55 f4	 mov	 edx, DWORD PTR __Erase_at$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2851 : 		return (*this);

  0007f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]

; 2852 : 		}

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00020	51		 push	 ecx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2677 : 		}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -16					; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2658 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 2659 : 		if (_Count <= _My_data._Myres)

  00014	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001a	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  0001d	77 44		 ja	 SHORT $LN2@assign

; 2660 : 			{
; 2661 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00022	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00027	89 45 f0	 mov	 DWORD PTR __Old_ptr$1[ebp], eax

; 2662 : 			_My_data._Mysize = _Count;

  0002a	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  0002d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00030	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2663 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

  00033	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0003a	52		 push	 edx
  0003b	8b 45 f0	 mov	 eax, DWORD PTR __Old_ptr$1[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2664 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

  00047	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0
  0004b	8d 4d ff	 lea	 ecx, DWORD PTR $T3[ebp]
  0004e	51		 push	 ecx
  0004f	8b 55 f0	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  00052	03 55 0c	 add	 edx, DWORD PTR __Count$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  0005b	83 c4 08	 add	 esp, 8

; 2665 : 			return (*this);

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00061	eb 1a		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 2666 : 			}
; 2667 : 
; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00063	33 c0		 xor	 eax, eax
  00065	88 45 fe	 mov	 BYTE PTR $T2[ebp], al
  00068	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0006b	51		 push	 ecx
  0006c	0f b6 55 fe	 movzx	 edx, BYTE PTR $T2[ebp]
  00070	52		 push	 edx
  00071	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00074	50		 push	 eax
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2669 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2670 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2671 : 			}, _Ptr));
; 2672 : 		}

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2591 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIQBD@Z ; std::char_traits<char>::length
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Convert_size@I@std@@YAII@Z ; std::_Convert_size<unsigned int>
  00019	83 c4 04	 add	 esp, 4
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00020	51		 push	 ecx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2593 : 		}

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -20					; size = 4
_this$ = -16						; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2569 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2570 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 2571 : 		const size_type _Old_size = _My_data._Mysize;

  00014	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00017	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001a	89 4d f4	 mov	 DWORD PTR __Old_size$[ebp], ecx

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  0001d	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00020	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00023	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00026	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  00029	77 4d		 ja	 SHORT $LN2@append

; 2573 : 			{
; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  0002b	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  0002e	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00031	8b 55 f8	 mov	 edx, DWORD PTR __My_data$[ebp]
  00034	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 2575 : 			_Elem * const _Old_ptr = _My_data._Myptr();

  00037	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003f	89 45 ec	 mov	 DWORD PTR __Old_ptr$1[ebp], eax

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00042	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 ec	 mov	 edx, DWORD PTR __Old_ptr$1[ebp]
  0004d	03 55 f4	 add	 edx, DWORD PTR __Old_size$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2577 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00059	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0
  0005d	8d 45 ff	 lea	 eax, DWORD PTR $T3[ebp]
  00060	50		 push	 eax
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$[ebp]
  00064	03 4d 0c	 add	 ecx, DWORD PTR __Count$[ebp]
  00067	03 4d ec	 add	 ecx, DWORD PTR __Old_ptr$1[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00070	83 c4 08	 add	 esp, 8

; 2578 : 			return (*this);

  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	eb 1e		 jmp	 SHORT $LN1@append
$LN2@append:

; 2579 : 			}
; 2580 : 
; 2581 : 		return (_Reallocate_grow_by(_Count,

  00078	33 d2		 xor	 edx, edx
  0007a	88 55 fe	 mov	 BYTE PTR $T2[ebp], dl
  0007d	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00084	51		 push	 ecx
  00085	0f b6 55 fe	 movzx	 edx, BYTE PTR $T2[ebp]
  00089	52		 push	 edx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0008d	50		 push	 eax
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2582 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2587 : 			}, _Ptr, _Count));
; 2588 : 		}

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right_data$ = -4					; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2537 : 		{	// append _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2538 : 		auto& _Right_data = _Right._Get_data();

  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 fc	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00014	8b 45 fc	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00017	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001a	51		 push	 ecx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0001e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2540 : 		}

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2460 : 		_Tidy_deallocate();

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2461 : 		}

  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -36						; size = 4
__New_capacity$ = -32					; size = 4
__New_array$ = -28					; size = 4
__Right_ptr$ = -24					; size = 4
__Al$ = -20						; size = 4
__Right_data$ = -16					; size = 4
_this$ = -12						; size = 4
__Right_size$ = -8					; size = 4
__My_data$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00011	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 2398 : 		auto& _Right_data = _Right._Get_data();

  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0001c	89 45 f0	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0001f	8b 45 f0	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00022	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00025	89 4d f8	 mov	 DWORD PTR __Right_size$[ebp], ecx

; 2400 : 		const _Elem * const _Right_ptr = _Right_data._Myptr();

  00028	8b 4d f0	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00030	89 45 e8	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00033	83 7d f8 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  00037	73 2a		 jae	 SHORT $LN2@Construct_

; 2402 : 			{	// stay small, don't allocate
; 2403 : 			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);

  00039	6a 10		 push	 16			; 00000010H
  0003b	8b 55 e8	 mov	 edx, DWORD PTR __Right_ptr$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 			_My_data._Mysize = _Right_size;

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0004e	8b 55 f8	 mov	 edx, DWORD PTR __Right_size$[ebp]
  00051	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  00054	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00057	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 2406 : 			return;

  0005e	e9 95 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();

  00063	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0006b	89 45 ec	 mov	 DWORD PTR __Al$[ebp], eax

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0006e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00076	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  00079	8b 4d f8	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0007c	83 c9 0f	 or	 ecx, 15			; 0000000fH
  0007f	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  00082	8d 55 dc	 lea	 edx, DWORD PTR $T2[ebp]
  00085	52		 push	 edx
  00086	8d 45 d8	 lea	 eax, DWORD PTR $T1[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  0008f	83 c4 08	 add	 esp, 8
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	89 4d e0	 mov	 DWORD PTR __New_capacity$[ebp], ecx

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00097	8b 55 e0	 mov	 edx, DWORD PTR __New_capacity$[ebp]
  0009a	83 c2 01	 add	 edx, 1
  0009d	52		 push	 edx
  0009e	8b 4d ec	 mov	 ecx, DWORD PTR __Al$[ebp]
  000a1	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000a6	89 45 e4	 mov	 DWORD PTR __New_array$[ebp], eax

; 2412 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);

  000a9	8d 45 e4	 lea	 eax, DWORD PTR __New_array$[ebp]
  000ac	50		 push	 eax
  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000b0	51		 push	 ecx
  000b1	e8 00 00 00 00	 call	 ??$addressof@PAD@std@@YAPAPADAAPAD@Z ; std::addressof<char *>
  000b6	83 c4 04	 add	 esp, 4
  000b9	50		 push	 eax
  000ba	8b 55 ec	 mov	 edx, DWORD PTR __Al$[ebp]
  000bd	52		 push	 edx
  000be	e8 00 00 00 00	 call	 ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000c6	8b 45 f8	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000c9	83 c0 01	 add	 eax, 1
  000cc	50		 push	 eax
  000cd	8b 4d e8	 mov	 ecx, DWORD PTR __Right_ptr$[ebp]
  000d0	51		 push	 ecx
  000d1	8b 55 e4	 mov	 edx, DWORD PTR __New_array$[ebp]
  000d4	52		 push	 edx
  000d5	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  000da	83 c4 04	 add	 esp, 4
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2414 : 		_My_data._Mysize = _Right_size;

  000e6	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000ec	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2415 : 		_My_data._Myres = _New_capacity;

  000ef	8b 55 fc	 mov	 edx, DWORD PTR __My_data$[ebp]
  000f2	8b 45 e0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  000f5	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN1@Construct_:

; 2416 : 		}

  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__My_data_mem$ = -28					; size = 4
__Right_data_mem$ = -24					; size = 4
__Right_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2344 : 		{	// assign by stealing _Right's buffer, memcpy optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();

  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00030	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())
; 2352 : 			{	// take ownership of _Right's iterators along with its buffer
; 2353 : 			this->_Swap_all(_Right);
; 2354 : 			}
; 2355 : 		else
; 2356 : 			{
; 2357 : 			_Right._Orphan_all();
; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;

  00033	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 e4	 mov	 DWORD PTR __My_data_mem$[ebp], eax

; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;

  00047	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00050	83 c4 04	 add	 esp, 4
  00053	89 45 e8	 mov	 DWORD PTR __Right_data_mem$[ebp], eax

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00056	8b 4d e8	 mov	 ecx, DWORD PTR __Right_data_mem$[ebp]
  00059	8b 55 e4	 mov	 edx, DWORD PTR __My_data_mem$[ebp]
  0005c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005e	89 02		 mov	 DWORD PTR [edx], eax
  00060	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00063	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00066	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00069	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0006c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0006f	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00072	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00075	89 42 10	 mov	 DWORD PTR [edx+16], eax
  00078	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0007b	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 2366 : 		_Right._Tidy_init();

  0007e	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00081	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2367 : 		}

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 : 		{	// construct by moving _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2267 : 		: _Mybase(_STD move(_Right._Getal()))

  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
  00036	83 c4 04	 add	 esp, 4
  00039	50		 push	 eax
  0003a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

  00042	33 c0		 xor	 eax, eax
  00044	88 45 f3	 mov	 BYTE PTR $T2[ebp], al
  00047	0f b6 4d f3	 movzx	 ecx, BYTE PTR $T2[ebp]
  0004b	51		 push	 ecx
  0004c	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  0004f	52		 push	 edx
  00050	e8 00 00 00 00	 call	 ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00055	83 c4 04	 add	 esp, 4
  00058	50		 push	 eax
  00059	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2270 : 		}

  00061	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2182 : 		: _Mybase()

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2184 : 		_Tidy_init();

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2185 : 		assign(_Ptr);

  0003d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00040	50		 push	 eax
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2186 : 		}

  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2142 : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2141 : 		: _Mybase()

  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >

; 2143 : 		_Tidy_init();

  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2144 : 		}

  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00043	59		 pop	 ecx
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

  00028	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00030	50		 push	 eax
  00031	8d 45 f3	 lea	 eax, DWORD PTR $T2[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  0003a	83 c4 08	 add	 esp, 8
  0003d	50		 push	 eax
  0003e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2131 : 		_Construct_lv_contents(_Right);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00050	51		 push	 ecx
  00051	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2132 : 		}

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 308  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 303  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 298  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  : 		}

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2047 : 		{	// return const reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2048 : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 2049 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2042 : 		{	// return reference to _String_val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2043 : 		return (_Mypair._Get_second());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 2044 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2037 : 		{	// return const reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2038 : 		return (_Mypair._Get_first());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 2039 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2032 : 		{	// return reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2033 : 		return (_Mypair._Get_first());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 2034 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2022 : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2023 : 		_Get_data()._Orphan_all();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  0000f	8b c8		 mov	 ecx, eax
  00011	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 2024 : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1910 : 		{	// default construct allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1909 : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0000d	50		 push	 eax
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 1911 : 		}

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1861 : 			{	// user-provided, for fancy pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1862 : 			}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1856 : 		_Bxty()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 1850 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000f	2b 4d 08	 sub	 ecx, DWORD PTR __Off$[ebp]
  00012	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00015	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00018	52		 push	 edx
  00019	8d 45 0c	 lea	 eax, DWORD PTR __Size$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$_Min_value@I@std@@YAABIABI0@Z ; std::_Min_value<unsigned int>
  00022	83 c4 08	 add	 esp, 8
  00025	8b 00		 mov	 eax, DWORD PTR [eax]

; 1852 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEIII@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1845 : 		{	// report an out_of_range error

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1846 : 		_Xout_of_range("invalid string position");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 1847 : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1829 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1830 : 		if (_Mysize < _Off)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	3b 4d 08	 cmp	 ecx, DWORD PTR __Off$[ebp]
  00010	73 05		 jae	 SHORT $LN3@Check_offs

; 1831 : 			{
; 1832 : 			_Xran();

  00012	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 1833 : 			}
; 1834 : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1824 : 		{	// returns whether the large string mode (allocated memory) is engaged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN3@Large_stri
  00012	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
  00022	8a 45 fc	 mov	 al, BYTE PTR tv66[ebp]

; 1826 : 		}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1813 : 		{	// determine current pointer to buffer for immutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1815 : 		if (_Large_string_engaged())

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00017	0f b6 c8	 movzx	 ecx, al
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 11		 je	 SHORT $LN2@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1821 : 		}

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1802 : 		{	// determine current pointer to buffer for mutable string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1804 : 		if (_Large_string_engaged())

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00017	0f b6 c8	 movzx	 ecx, al
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 11		 je	 SHORT $LN2@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPADPAD@Z ; std::_Unfancy<char>
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1810 : 		}

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1786 : 		{	// initialize values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1783 : 		: _Bx(),

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1784 : 		_Mysize(0),

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1785 : 		_Myres(0)

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1787 : 		}

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 897  : 		return (_Al);

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 891  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00003	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YAII@Z ; std::_Get_size_of_n<1>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00019	83 c4 04	 add	 esp, 4

; 998  : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	83 c4 08	 add	 esp, 8

; 993  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1204 : 	return (_Len);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 115  : 	_Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	83 c1 23	 add	 ecx, 35			; 00000023H
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Bytes$[ebp]
  00011	89 0a		 mov	 DWORD PTR [edx], ecx

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	89 4d f4	 mov	 DWORD PTR __Ptr_user$[ebp], ecx

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001b	ba 04 00 00 00	 mov	 edx, 4
  00020	6b c2 ff	 imul	 eax, edx, -1
  00023	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00026	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00029	89 55 f8	 mov	 DWORD PTR __Ptr_container$[ebp], edx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);

  0002c	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00036	8b 08		 mov	 ecx, DWORD PTR [eax]
  00038	2b 4d f8	 sub	 ecx, DWORD PTR __Ptr_container$[ebp]
  0003b	89 4d fc	 mov	 DWORD PTR __Back_shift$[ebp], ecx
$LN4@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003e	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00042	72 08		 jb	 SHORT $LN7@Adjust_man
  00044	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00048	77 02		 ja	 SHORT $LN7@Adjust_man
  0004a	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00051	33 d2		 xor	 edx, edx
  00053	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00055	33 c0		 xor	 eax, eax
  00057	75 e5		 jne	 SHORT $LN4@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00059	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0005c	8b 55 f8	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  0005f	89 11		 mov	 DWORD PTR [ecx], edx
$LN10@Adjust_man:

; 134  : 	}

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 		return (::operator new(_Bytes));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000c	83 c4 04	 add	 esp, 4

; 53   : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   : 	{	// gets the size of _Count copies of a type with size 1

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	return (_Count);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]

; 39   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 53   : 		{	// adopt this iterator by parent

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 42   : 		{	// orphan all iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 540  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return (EOF);

  00003	83 c8 ff	 or	 eax, -1

; 542  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
tv68 = -4						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 535  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 536  : 		return (_Meta != eof() ? _Meta : !eof());

  00006	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0000e	39 01		 cmp	 DWORD PTR [ecx], eax
  00010	74 0a		 je	 SHORT $LN5@not_eof
  00012	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 1f		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  0001c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00021	85 c0		 test	 eax, eax
  00023	75 09		 jne	 SHORT $LN3@not_eof
  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@not_eof:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR tv68[ebp]
  00038	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
  0003b	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 537  : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 530  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 531  : 		return (_Left == _Right);

  00004	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000e	75 09		 jne	 SHORT $LN3@eq_int_typ
  00010	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00017	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00020	8a 45 fc	 mov	 al, BYTE PTR tv65[ebp]

; 532  : 		}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 525  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 527  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 520  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 521  : 		return (static_cast<char>(_Meta));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 522  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 505  : 		{	// assign an element

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 506  : 		_Left = _Right;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8a 11		 mov	 dl, BYTE PTR [ecx]
  0000b	88 10		 mov	 BYTE PTR [eax], dl

; 507  : 		}

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 494  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 496  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 470  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00003	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __First2$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 08	 mov	 edx, DWORD PTR __First1$[ebp]
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memcpy
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 472  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
tv66 = -16						; size = 4
tv71 = -12						; size = 4
tv68 = -8						; size = 4
tv74 = -1						; size = 1
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR tv68[ebp], eax
  0000c	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  0000f	83 c1 01	 add	 ecx, 1
  00012	89 4d f4	 mov	 DWORD PTR tv71[ebp], ecx
$LL3@length:
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv68[ebp]
  00018	8a 02		 mov	 al, BYTE PTR [edx]
  0001a	88 45 ff	 mov	 BYTE PTR tv74[ebp], al
  0001d	83 45 f8 01	 add	 DWORD PTR tv68[ebp], 1
  00021	80 7d ff 00	 cmp	 BYTE PTR tv74[ebp], 0
  00025	75 ee		 jne	 SHORT $LL3@length
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv68[ebp]
  0002a	2b 4d f4	 sub	 ecx, DWORD PTR tv71[ebp]
  0002d	89 4d f0	 mov	 DWORD PTR tv66[ebp], ecx
  00030	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00013	52		 push	 edx
  00014	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _vsnprintf
  00021	83 c4 10	 add	 esp, 16			; 00000010H
  00024	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1954 :         __crt_va_end(_ArgList);

  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1955 :         return _Result;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1956 :     }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsnprintf PROC						; COMDAT

; 1439 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00013	52		 push	 edx
  00014	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	83 c9 02	 or	 ecx, 2
  00022	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00025	52		 push	 edx
  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  0002c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002f	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00032	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00036	7d 09		 jge	 SHORT $LN3@vsnprintf
  00038	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0003f	eb 06		 jmp	 SHORT $LN4@vsnprintf
$LN3@vsnprintf:
  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00044	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf:
  00047	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1445 :     }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0e		 je	 SHORT $LN2@scalar
  00017	6a 0c		 push	 12			; 0000000cH
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 0b		 je	 SHORT $LN3@what
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  0001b	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00024	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	51		 push	 ecx
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	83 c4 04	 add	 esp, 4

; 87   :     }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 68   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 67   :         : _Data()

  00010	33 c9		 xor	 ecx, ecx
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	83 c2 04	 add	 edx, 4
  00018	89 0a		 mov	 DWORD PTR [edx], ecx
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR __Other$[ebp]
  00027	83 c1 04	 add	 ecx, 4
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	83 c4 08	 add	 esp, 8

; 70   :     }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 62   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 61   :         : _Data()

  00010	33 c9		 xor	 ecx, ecx
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	83 c2 04	 add	 edx, 4
  00018	89 0a		 mov	 DWORD PTR [edx], ecx
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 63   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
  00023	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 64   :     }

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -12					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 55   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 54   :         : _Data()

  00012	33 c9		 xor	 ecx, ecx
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	83 c2 04	 add	 edx, 4
  0001a	89 0a		 mov	 DWORD PTR [edx], ecx
  0001c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 56   :         __std_exception_data _InitData = { _Message, true };

  0001f	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00022	89 45 f4	 mov	 DWORD PTR __InitData$[ebp], eax
  00025	c6 45 f8 01	 mov	 BYTE PTR __InitData$[ebp+4], 1

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	51		 push	 ecx
  00030	8d 55 f4	 lea	 edx, DWORD PTR __InitData$[ebp]
  00033	52		 push	 edx
  00034	e8 00 00 00 00	 call	 ___std_exception_copy
  00039	83 c4 08	 add	 esp, 8

; 58   :     }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 616  : 		{	// return maximum value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 		return (INT_MAX);

  00003	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 188  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
