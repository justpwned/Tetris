; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27030.1 

	TITLE	c:\Dev\Tetris\src\stats.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?FRAMES_PER_DROP@@3QBHB DD 030H				; FRAMES_PER_DROP
	DD	02bH
	DD	026H
	DD	021H
	DD	01cH
	DD	017H
	DD	012H
	DD	0dH
	DD	08H
	DD	06H
	DD	05H
	DD	05H
	DD	05H
	DD	04H
	DD	04H
	DD	04H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
CONST	ENDS
PUBLIC	?ComputePoints@Stats@gameplay@core@@QAEXXZ	; core::gameplay::Stats::ComputePoints
PUBLIC	?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ; core::gameplay::Stats::GetLinesForNextLevel
PUBLIC	?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ	; core::gameplay::Stats::GetTimeToNextDrop
PUBLIC	__real@3c888889
EXTRN	__fltused:DWORD
;	COMDAT __real@3c888889
CONST	SEGMENT
__real@3c888889 DD 03c888889r			; 0.0166667
CONST	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\stats.cpp
_TEXT	SEGMENT
tv79 = -20						; size = 4
_targetSecondsPerFrame$ = -16				; size = 4
_level$ = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ PROC	; core::gameplay::Stats::GetTimeToNextDrop
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 40   :     i32 level = MIN(29, m_level);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 20 1d	 cmp	 DWORD PTR [eax+32], 29	; 0000001dH
  00010	7e 09		 jle	 SHORT $LN3@GetTimeToN
  00012	c7 45 f8 1d 00
	00 00		 mov	 DWORD PTR tv67[ebp], 29	; 0000001dH
  00019	eb 09		 jmp	 SHORT $LN4@GetTimeToN
$LN3@GetTimeToN:
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00021	89 55 f8	 mov	 DWORD PTR tv67[ebp], edx
$LN4@GetTimeToN:
  00024	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  00027	89 45 f4	 mov	 DWORD PTR _level$[ebp], eax

; 41   :     f32 targetSecondsPerFrame = 1.0f / 60.0f;

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c888889
  00032	f3 0f 11 45 f0	 movss	 DWORD PTR _targetSecondsPerFrame$[ebp], xmm0

; 42   :     return FRAMES_PER_DROP[level] * targetSecondsPerFrame;

  00037	8b 4d f4	 mov	 ecx, DWORD PTR _level$[ebp]
  0003a	f3 0f 2a 04 8d
	00 00 00 00	 cvtsi2ss xmm0, DWORD PTR ?FRAMES_PER_DROP@@3QBHB[ecx*4]
  00043	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _targetSecondsPerFrame$[ebp]
  00048	f3 0f 11 45 ec	 movss	 DWORD PTR tv79[ebp], xmm0
  0004d	d9 45 ec	 fld	 DWORD PTR tv79[ebp]

; 43   : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ ENDP	; core::gameplay::Stats::GetTimeToNextDrop
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\stats.cpp
_TEXT	SEGMENT
_diff$ = -24						; size = 4
_firstLevelUpLimit$ = -20				; size = 4
tv87 = -16						; size = 4
tv86 = -12						; size = 4
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ PROC	; core::gameplay::Stats::GetLinesForNextLevel
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   :     i32 firstLevelUpLimit = MIN(m_startLevel * 10 + 10, 

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	6b 48 1c 0a	 imul	 ecx, DWORD PTR [eax+28], 10
  00010	83 e9 32	 sub	 ecx, 50			; 00000032H
  00013	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00016	7d 09		 jge	 SHORT $LN4@GetLinesFo
  00018	c7 45 f8 64 00
	00 00		 mov	 DWORD PTR tv74[ebp], 100 ; 00000064H
  0001f	eb 0d		 jmp	 SHORT $LN5@GetLinesFo
$LN4@GetLinesFo:
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	6b 42 1c 0a	 imul	 eax, DWORD PTR [edx+28], 10
  00028	83 e8 32	 sub	 eax, 50			; 00000032H
  0002b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN5@GetLinesFo:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	6b 51 1c 0a	 imul	 edx, DWORD PTR [ecx+28], 10
  00035	83 c2 0a	 add	 edx, 10			; 0000000aH
  00038	3b 55 f8	 cmp	 edx, DWORD PTR tv74[ebp]
  0003b	7d 0f		 jge	 SHORT $LN8@GetLinesFo
  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	6b 48 1c 0a	 imul	 ecx, DWORD PTR [eax+28], 10
  00044	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00047	89 4d f0	 mov	 DWORD PTR tv87[ebp], ecx
  0004a	eb 2b		 jmp	 SHORT $LN9@GetLinesFo
$LN8@GetLinesFo:
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	6b 42 1c 0a	 imul	 eax, DWORD PTR [edx+28], 10
  00053	83 e8 32	 sub	 eax, 50			; 00000032H
  00056	83 f8 64	 cmp	 eax, 100		; 00000064H
  00059	7d 09		 jge	 SHORT $LN6@GetLinesFo
  0005b	c7 45 f4 64 00
	00 00		 mov	 DWORD PTR tv86[ebp], 100 ; 00000064H
  00062	eb 0d		 jmp	 SHORT $LN7@GetLinesFo
$LN6@GetLinesFo:
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	6b 51 1c 0a	 imul	 edx, DWORD PTR [ecx+28], 10
  0006b	83 ea 32	 sub	 edx, 50			; 00000032H
  0006e	89 55 f4	 mov	 DWORD PTR tv86[ebp], edx
$LN7@GetLinesFo:
  00071	8b 45 f4	 mov	 eax, DWORD PTR tv86[ebp]
  00074	89 45 f0	 mov	 DWORD PTR tv87[ebp], eax
$LN9@GetLinesFo:
  00077	8b 4d f0	 mov	 ecx, DWORD PTR tv87[ebp]
  0007a	89 4d ec	 mov	 DWORD PTR _firstLevelUpLimit$[ebp], ecx

; 74   :                                 MAX(100, (m_startLevel * 10 - 50)));
; 75   :     
; 76   :     if (m_level == m_startLevel)

  0007d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00086	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00089	75 05		 jne	 SHORT $LN2@GetLinesFo

; 77   :     {
; 78   :         return firstLevelUpLimit;

  0008b	8b 45 ec	 mov	 eax, DWORD PTR _firstLevelUpLimit$[ebp]
  0008e	eb 12		 jmp	 SHORT $LN1@GetLinesFo
$LN2@GetLinesFo:

; 79   :     }
; 80   :     
; 81   :     i32 diff = m_level - m_startLevel;

  00090	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  00099	2b 48 1c	 sub	 ecx, DWORD PTR [eax+28]
  0009c	89 4d e8	 mov	 DWORD PTR _diff$[ebp], ecx

; 82   :     return firstLevelUpLimit;

  0009f	8b 45 ec	 mov	 eax, DWORD PTR _firstLevelUpLimit$[ebp]
$LN1@GetLinesFo:

; 83   : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ENDP	; core::gameplay::Stats::GetLinesForNextLevel
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\stats.cpp
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?ComputePoints@Stats@gameplay@core@@QAEXXZ PROC		; core::gameplay::Stats::ComputePoints
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   :     switch (m_lineCount)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0000f	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
  00012	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00015	83 ea 01	 sub	 edx, 1
  00018	89 55 f8	 mov	 DWORD PTR tv65[ebp], edx
  0001b	83 7d f8 03	 cmp	 DWORD PTR tv65[ebp], 3
  0001f	77 76		 ja	 SHORT $LN1@ComputePoi
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv65[ebp]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN9@ComputePoi[eax*4]
$LN4@ComputePoi:

; 48   :     {
; 49   :         case 1:
; 50   :         {
; 51   :             m_points += 40 * (m_level + 1);

  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00031	83 c2 01	 add	 edx, 1
  00034	6b c2 28	 imul	 eax, edx, 40
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	03 41 28	 add	 eax, DWORD PTR [ecx+40]
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 52   :         } break;

  00043	eb 52		 jmp	 SHORT $LN1@ComputePoi
$LN5@ComputePoi:

; 53   :         
; 54   :         case 2:
; 55   :         {
; 56   :             m_points += 100 * (m_level + 1);

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0004b	83 c1 01	 add	 ecx, 1
  0004e	6b d1 64	 imul	 edx, ecx, 100
  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	03 50 28	 add	 edx, DWORD PTR [eax+40]
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 57   :         } break;

  0005d	eb 38		 jmp	 SHORT $LN1@ComputePoi
$LN6@ComputePoi:

; 58   :         
; 59   :         case 3: 
; 60   :         {
; 61   :             m_points += 300 * (m_level + 1);

  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00065	83 c0 01	 add	 eax, 1
  00068	69 c8 2c 01 00
	00		 imul	 ecx, eax, 300
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00071	03 4a 28	 add	 ecx, DWORD PTR [edx+40]
  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	89 48 28	 mov	 DWORD PTR [eax+40], ecx

; 62   :         } break;

  0007a	eb 1b		 jmp	 SHORT $LN1@ComputePoi
$LN7@ComputePoi:

; 63   :         
; 64   :         case 4:
; 65   :         {
; 66   :             m_points += 1200 * (m_level + 1);

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00082	83 c2 01	 add	 edx, 1
  00085	69 c2 b0 04 00
	00		 imul	 eax, edx, 1200
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	03 41 28	 add	 eax, DWORD PTR [ecx+40]
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00094	89 42 28	 mov	 DWORD PTR [edx+40], eax
$LN1@ComputePoi:

; 67   :         } break;
; 68   :     }
; 69   : }

  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
  0009b	90		 npad	 1
$LN9@ComputePoi:
  0009c	00 00 00 00	 DD	 $LN4@ComputePoi
  000a0	00 00 00 00	 DD	 $LN5@ComputePoi
  000a4	00 00 00 00	 DD	 $LN6@ComputePoi
  000a8	00 00 00 00	 DD	 $LN7@ComputePoi
?ComputePoints@Stats@gameplay@core@@QAEXXZ ENDP		; core::gameplay::Stats::ComputePoints
_TEXT	ENDS
END
