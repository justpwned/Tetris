; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	C:\Dev\Tetris\src\game.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_fabsl
PUBLIC	_frexpl
PUBLIC	___local_stdio_printf_options
PUBLIC	_vsnprintf
PUBLIC	__vsprintf_s_l
PUBLIC	_sprintf_s
PUBLIC	_snprintf
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z	; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z		; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NABVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UAE@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	??0Color@core@@QAE@ABV01@@Z			; core::Color::Color
PUBLIC	??0Color@core@@QAE@EEEE@Z			; core::Color::Color
PUBLIC	?SetRenderer@Graphics@graphics@core@@QAEXPAUSDL_Renderer@@@Z ; core::graphics::Graphics::SetRenderer
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	?Clear@Matrix@math@core@@QAEXXZ			; core::math::Matrix::Clear
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unwrapped
PUBLIC	??$fill@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0ABH@Z ; std::fill<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,int>
PUBLIC	??0Stats@gameplay@core@@QAE@XZ			; core::gameplay::Stats::Stats
PUBLIC	?GetLines@Stats@gameplay@core@@QAEPA_NXZ	; core::gameplay::Stats::GetLines
PUBLIC	?GetPendingLineCount@Stats@gameplay@core@@QAEHXZ ; core::gameplay::Stats::GetPendingLineCount
PUBLIC	?GetStartLevel@Stats@gameplay@core@@QAEHXZ	; core::gameplay::Stats::GetStartLevel
PUBLIC	?GetLevel@Stats@gameplay@core@@QAEHXZ		; core::gameplay::Stats::GetLevel
PUBLIC	?GetLineCount@Stats@gameplay@core@@QAEHXZ	; core::gameplay::Stats::GetLineCount
PUBLIC	?GetPoints@Stats@gameplay@core@@QAEHXZ		; core::gameplay::Stats::GetPoints
PUBLIC	?SetStartLevel@Stats@gameplay@core@@QAEXH@Z	; core::gameplay::Stats::SetStartLevel
PUBLIC	?SetLevel@Stats@gameplay@core@@QAEXH@Z		; core::gameplay::Stats::SetLevel
PUBLIC	?SetLineCount@Stats@gameplay@core@@QAEXH@Z	; core::gameplay::Stats::SetLineCount
PUBLIC	?SetPoints@Stats@gameplay@core@@QAEXH@Z		; core::gameplay::Stats::SetPoints
PUBLIC	?Clear@Board@gameplay@core@@QAEXXZ		; core::gameplay::Board::Clear
PUBLIC	??0Piece@gameplay@core@@QAE@PAVBoard@12@PAUGameTime@@PAVStats@12@HHHH@Z ; core::gameplay::Piece::Piece
PUBLIC	?GetRowOffset@Piece@gameplay@core@@QBEHXZ	; core::gameplay::Piece::GetRowOffset
PUBLIC	?GetColOffset@Piece@gameplay@core@@QBEHXZ	; core::gameplay::Piece::GetColOffset
PUBLIC	?GetRotation@Piece@gameplay@core@@QBEHXZ	; core::gameplay::Piece::GetRotation
PUBLIC	?SetRowOffset@Piece@gameplay@core@@QAEXH@Z	; core::gameplay::Piece::SetRowOffset
PUBLIC	?SetColOffset@Piece@gameplay@core@@QAEXH@Z	; core::gameplay::Piece::SetColOffset
PUBLIC	?SetRotation@Piece@gameplay@core@@QAEXH@Z	; core::gameplay::Piece::SetRotation
PUBLIC	?UpdateGameStart@Game@core@@AAEXXZ		; core::Game::UpdateGameStart
PUBLIC	?UpdateGamePlay@Game@core@@AAEXXZ		; core::Game::UpdateGamePlay
PUBLIC	?UpdateGameLine@Game@core@@AAEXXZ		; core::Game::UpdateGameLine
PUBLIC	?UpdateGameOver@Game@core@@AAEXXZ		; core::Game::UpdateGameOver
PUBLIC	?RenderGameStart@Game@core@@AAEXHH@Z		; core::Game::RenderGameStart
PUBLIC	?RenderGamePlay@Game@core@@AAEXHH@Z		; core::Game::RenderGamePlay
PUBLIC	?RenderGameLine@Game@core@@AAEXHH@Z		; core::Game::RenderGameLine
PUBLIC	?RenderGameOver@Game@core@@AAEXHH@Z		; core::Game::RenderGameOver
PUBLIC	?RenderGameStats@Game@core@@AAEXHH@Z		; core::Game::RenderGameStats
PUBLIC	??0Game@core@@QAE@PBDHHHH0H@Z			; core::Game::Game
PUBLIC	?HandleEvents@Game@core@@QAEXXZ			; core::Game::HandleEvents
PUBLIC	?HandleInput@Game@core@@QAEXXZ			; core::Game::HandleInput
PUBLIC	?Update@Game@core@@QAEXXZ			; core::Game::Update
PUBLIC	?Render@Game@core@@QAEXXZ			; core::Game::Render
PUBLIC	?MainLoop@Game@core@@QAEXXZ			; core::Game::MainLoop
PUBLIC	?Clean@Game@core@@QAEXXZ			; core::Game::Clean
PUBLIC	?Quit@Game@core@@QAEXXZ				; core::Game::Quit
PUBLIC	?Running@Game@core@@QBE_NXZ			; core::Game::Running
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<int> > >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
PUBLIC	??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0@Z ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@$0A@@std@@YAPAHABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,0>
PUBLIC	??$_Fill_unchecked@PAHH@std@@YAXPAH0ABH@Z	; std::_Fill_unchecked<int *,int>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
PUBLIC	??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
PUBLIC	??$_Adl_verify_range1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ; std::_Adl_verify_range1<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
PUBLIC	??$_Fill_memset_is_safe@PAHH@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAHABH@Z ; std::_Fill_memset_is_safe<int *,int>
PUBLIC	??$_Fill_unchecked1@PAHH@std@@YAXPAH0ABHU?$integral_constant@_N$0A@@0@@Z ; std::_Fill_unchecked1<int *,int>
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error@	; `string'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_C@_0CH@EGGHBPKB@SDL?5has?5been?5initialized?5succes@ ; `string'
PUBLIC	??_C@_0CK@LKCLDMPA@SDL?5window?5has?5been?5created?5suc@ ; `string'
PUBLIC	??_C@_0CM@MFFAMOBJ@SDL?5renderer?5has?5been?5created?5s@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0CL@MNJLHHGI@Renderer?5could?5not?5be?5created?4?5@ ; `string'
PUBLIC	??_C@_0CJ@PIFBGGOL@Window?5could?5not?5be?5created?4?5SD@ ; `string'
PUBLIC	??_C@_0CF@DAJCNOPK@Unable?5to?5intialize?5SDL?4?5SDL?5er@ ; `string'
PUBLIC	??_C@_0CL@CGIGHLCG@SDL_TTF?5has?5been?5initialized?5su@ ; `string'
PUBLIC	??_C@_0BD@GIEFJDI@?$CJ?5has?5been?5loaded?6@	; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_05JBNLDDKP@Font?5@			; `string'
PUBLIC	??_C@_0BH@IMMMKLFB@?$CJ?5has?5not?5been?5loaded?6@ ; `string'
PUBLIC	??_C@_0CO@CJNDLNMC@Unable?5to?5initialize?5SDL_TTF?4?5S@ ; `string'
PUBLIC	??_C@_0M@EGEHIPLI@Game?5seed?3?5@		; `string'
PUBLIC	??_C@_0BF@LKPPLCNE@Press?5Enter?5to?5start@	; `string'
PUBLIC	??_C@_0BD@CFKFPENJ@STARTING?5LEVEL?3?5?$CFd@	; `string'
PUBLIC	??_C@_09MAOEPLNL@GAME?5OVER@			; `string'
PUBLIC	??_C@_09IFKCHJNG@LEVEL?3?5?$CFd@		; `string'
PUBLIC	??_C@_09DOEIBABC@LINES?3?5?$CFd@		; `string'
PUBLIC	??_C@_0L@OEGFDINF@POINTS?3?5?$CFd@		; `string'
PUBLIC	??_C@_0CP@DGBGMEIB@Closing?5the?5game?4?5Cleaning?5up?5a@ ; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_02BBAHNLBA@?$CFp@				; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu@				; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld@				; `string'
PUBLIC	??_C@_02BDDLJJBK@lu@				; `string'
PUBLIC	??_C@_02EAOCLKAK@ld@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_02MDKMJEGG@eE@				; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
PUBLIC	?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3eb33333
PUBLIC	__real@4202a05f20000000
PUBLIC	__real@447a0000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	_exit:PROC
EXTRN	_srand:PROC
EXTRN	_frexp:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	_strcspn:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	_terminate:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	_localeconv:PROC
EXTRN	__Getctype:PROC
EXTRN	__Getcvt:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z:PROC ; std::_Execute_once
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	__time64:PROC
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_DestroyWindow:PROC
EXTRN	_SDL_GetKeyboardState:PROC
EXTRN	_SDL_PollEvent:PROC
EXTRN	_SDL_CreateRenderer:PROC
EXTRN	_SDL_RenderPresent:PROC
EXTRN	_SDL_DestroyRenderer:PROC
EXTRN	_SDL_GetTicks:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_SDL_Quit:PROC
EXTRN	_TTF_Init:PROC
EXTRN	_TTF_OpenFont:PROC
EXTRN	_TTF_CloseFont:PROC
EXTRN	_TTF_Quit:PROC
EXTRN	?Instance@Graphics@graphics@core@@SAPAV123@XZ:PROC ; core::graphics::Graphics::Instance
EXTRN	?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z:PROC ; core::graphics::Graphics::DrawFillRect
EXTRN	?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z:PROC ; core::graphics::Graphics::DrawText
EXTRN	?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z:PROC ; core::graphics::Graphics::FillBackground
EXTRN	?ComputePoints@Stats@gameplay@core@@QAEXXZ:PROC	; core::gameplay::Stats::ComputePoints
EXTRN	?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ:PROC ; core::gameplay::Stats::GetLinesForNextLevel
EXTRN	??0Board@gameplay@core@@QAE@HHHH@Z:PROC		; core::gameplay::Board::Board
EXTRN	?DrawBoard@Board@gameplay@core@@QAEXHH@Z:PROC	; core::gameplay::Board::DrawBoard
EXTRN	?IsRowEmpty@Board@gameplay@core@@QAE_NH@Z:PROC	; core::gameplay::Board::IsRowEmpty
EXTRN	?FindLines@Board@gameplay@core@@QAEXPAVStats@23@@Z:PROC ; core::gameplay::Board::FindLines
EXTRN	?ClearLines@Board@gameplay@core@@QAEXPAVStats@23@@Z:PROC ; core::gameplay::Board::ClearLines
EXTRN	?IsValid@Piece@gameplay@core@@QAE_NXZ:PROC	; core::gameplay::Piece::IsValid
EXTRN	?HardDrop@Piece@gameplay@core@@QAEXXZ:PROC	; core::gameplay::Piece::HardDrop
EXTRN	?SoftDrop@Piece@gameplay@core@@QAE_NXZ:PROC	; core::gameplay::Piece::SoftDrop
EXTRN	?SpawnNewPiece@Piece@gameplay@core@@QAEXXZ:PROC	; core::gameplay::Piece::SpawnNewPiece
EXTRN	?DrawPiece@Piece@gameplay@core@@QAEXHH_N@Z:PROC	; core::gameplay::Piece::DrawPiece
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cout
EXTRN	?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cerr
EXTRN	?s_highlightColor@Palette@core@@2VColor@2@B:DWORD ; core::Palette::s_highlightColor
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA
_BSS	SEGMENT
?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA DD 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
_BSS	ENDS
;	COMDAT ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A DQ 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$r	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp@ DB '%p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_C@_0CP@DGBGMEIB@Closing?5the?5game?4?5Cleaning?5up?5a@
CONST	SEGMENT
??_C@_0CP@DGBGMEIB@Closing?5the?5game?4?5Cleaning?5up?5a@ DB 'Closing the'
	DB	' game. Cleaning up all the mess...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OEGFDINF@POINTS?3?5?$CFd@
CONST	SEGMENT
??_C@_0L@OEGFDINF@POINTS?3?5?$CFd@ DB 'POINTS: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DOEIBABC@LINES?3?5?$CFd@
CONST	SEGMENT
??_C@_09DOEIBABC@LINES?3?5?$CFd@ DB 'LINES: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IFKCHJNG@LEVEL?3?5?$CFd@
CONST	SEGMENT
??_C@_09IFKCHJNG@LEVEL?3?5?$CFd@ DB 'LEVEL: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MAOEPLNL@GAME?5OVER@
CONST	SEGMENT
??_C@_09MAOEPLNL@GAME?5OVER@ DB 'GAME OVER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CFKFPENJ@STARTING?5LEVEL?3?5?$CFd@
CONST	SEGMENT
??_C@_0BD@CFKFPENJ@STARTING?5LEVEL?3?5?$CFd@ DB 'STARTING LEVEL: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LKPPLCNE@Press?5Enter?5to?5start@
CONST	SEGMENT
??_C@_0BF@LKPPLCNE@Press?5Enter?5to?5start@ DB 'Press Enter to start', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGEHIPLI@Game?5seed?3?5@
CONST	SEGMENT
??_C@_0M@EGEHIPLI@Game?5seed?3?5@ DB 'Game seed: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CJNDLNMC@Unable?5to?5initialize?5SDL_TTF?4?5S@
CONST	SEGMENT
??_C@_0CO@CJNDLNMC@Unable?5to?5initialize?5SDL_TTF?4?5S@ DB 'Unable to in'
	DB	'itialize SDL_TTF. SDL_TTF error: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IMMMKLFB@?$CJ?5has?5not?5been?5loaded?6@
CONST	SEGMENT
??_C@_0BH@IMMMKLFB@?$CJ?5has?5not?5been?5loaded?6@ DB ') has not been loa'
	DB	'ded', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05JBNLDDKP@Font?5@
CONST	SEGMENT
??_C@_05JBNLDDKP@Font?5@ DB 'Font ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIEFJDI@?$CJ?5has?5been?5loaded?6@
CONST	SEGMENT
??_C@_0BD@GIEFJDI@?$CJ?5has?5been?5loaded?6@ DB ') has been loaded', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CGIGHLCG@SDL_TTF?5has?5been?5initialized?5su@
CONST	SEGMENT
??_C@_0CL@CGIGHLCG@SDL_TTF?5has?5been?5initialized?5su@ DB 'SDL_TTF has b'
	DB	'een initialized successfully', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DAJCNOPK@Unable?5to?5intialize?5SDL?4?5SDL?5er@
CONST	SEGMENT
??_C@_0CF@DAJCNOPK@Unable?5to?5intialize?5SDL?4?5SDL?5er@ DB 'Unable to i'
	DB	'ntialize SDL. SDL error: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PIFBGGOL@Window?5could?5not?5be?5created?4?5SD@
CONST	SEGMENT
??_C@_0CJ@PIFBGGOL@Window?5could?5not?5be?5created?4?5SD@ DB 'Window coul'
	DB	'd not be created. SDL error: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MNJLHHGI@Renderer?5could?5not?5be?5created?4?5@
CONST	SEGMENT
??_C@_0CL@MNJLHHGI@Renderer?5could?5not?5be?5created?4?5@ DB 'Renderer co'
	DB	'uld not be created. SDL error: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MFFAMOBJ@SDL?5renderer?5has?5been?5created?5s@
CONST	SEGMENT
??_C@_0CM@MFFAMOBJ@SDL?5renderer?5has?5been?5created?5s@ DB 'SDL renderer'
	DB	' has been created successfully', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LKCLDMPA@SDL?5window?5has?5been?5created?5suc@
CONST	SEGMENT
??_C@_0CK@LKCLDMPA@SDL?5window?5has?5been?5created?5suc@ DB 'SDL window h'
	DB	'as been created successfully', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EGGHBPKB@SDL?5has?5been?5initialized?5succes@
CONST	SEGMENT
??_C@_0CH@EGGHBPKB@SDL?5has?5been?5initialized?5succes@ DB 'SDL has been '
	DB	'initialized successfully', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error@ DB 'iostream stream error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2
	DD	03H
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1
	DD	00H
	DD	FLAT:___std_terminate
	DD	02H
	DD	FLAT:___std_terminate
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	03H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$9
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	06H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$9 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 04H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$9
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	FLAT:___std_terminate
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
	DD	06H
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Game@core@@QAE@PBDHHHH0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Game@core@@QAE@PBDHHHH0H@Z$0
__ehfuncinfo$??0Game@core@@QAE@PBDHHHH0H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Game@core@@QAE@PBDHHHH0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Arg$[esp-4]

; 1575 : 	}

  00004	c3		 ret	 0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _<_Val2_0>$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 279  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	c2 08 00	 ret	 8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Fill_unchecked1@PAHH@std@@YAXPAH0ABHU?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_unchecked1@PAHH@std@@YAXPAH0ABHU?$integral_constant@_N$0A@@0@@Z PROC ; std::_Fill_unchecked1<int *,int>, COMDAT

; 2901 : 	{	// copy _Val through [_First, _Last), no special optimization

  00000	53		 push	 ebx

; 2902 : 	for (; _First != _Last; ++_First)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	33 c9		 xor	 ecx, ecx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp+4]
  0000c	33 d2		 xor	 edx, edx
  0000e	2b eb		 sub	 ebp, ebx
  00010	83 c5 03	 add	 ebp, 3
  00013	c1 ed 02	 shr	 ebp, 2
  00016	3b 5c 24 10	 cmp	 ebx, DWORD PTR __Last$[esp+4]
  0001a	0f 47 e9	 cmova	 ebp, ecx
  0001d	85 ed		 test	 ebp, ebp
  0001f	74 52		 je	 SHORT $LN3@Fill_unche
  00021	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00025	57		 push	 edi
  00026	83 fd 04	 cmp	 ebp, 4
  00029	72 32		 jb	 SHORT $LN9@Fill_unche

; 2903 : 		*_First = _Val;

  0002b	8b 38		 mov	 edi, DWORD PTR [eax]
  0002d	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  00030	8d 0c a9	 lea	 ecx, DWORD PTR [ecx+ebp*4]
  00033	3b d8		 cmp	 ebx, eax
  00035	77 04		 ja	 SHORT $LN10@Fill_unche

; 2902 : 	for (; _First != _Last; ++_First)

  00037	3b c8		 cmp	 ecx, eax
  00039	73 22		 jae	 SHORT $LN9@Fill_unche
$LN10@Fill_unche:
  0003b	56		 push	 esi
  0003c	8b f5		 mov	 esi, ebp
  0003e	83 e6 fc	 and	 esi, -4			; fffffffcH
$LL4@Fill_unche:
  00041	83 c2 04	 add	 edx, 4
  00044	3b d6		 cmp	 edx, esi
  00046	75 f9		 jne	 SHORT $LL4@Fill_unche
  00048	c1 e6 02	 shl	 esi, 2
  0004b	8b c7		 mov	 eax, edi
  0004d	8b ce		 mov	 ecx, esi
  0004f	8b fb		 mov	 edi, ebx
  00051	c1 e9 02	 shr	 ecx, 2
  00054	03 de		 add	 ebx, esi
  00056	f3 ab		 rep stosd
  00058	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0005c	5e		 pop	 esi
$LN9@Fill_unche:
  0005d	5f		 pop	 edi
  0005e	3b d5		 cmp	 edx, ebp
  00060	74 11		 je	 SHORT $LN3@Fill_unche
$LL8@Fill_unche:

; 2903 : 		*_First = _Val;

  00062	8b 00		 mov	 eax, DWORD PTR [eax]
  00064	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]
  00067	42		 inc	 edx
  00068	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  0006b	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0006f	3b d5		 cmp	 edx, ebp
  00071	75 ef		 jne	 SHORT $LL8@Fill_unche
$LN3@Fill_unche:
  00073	5d		 pop	 ebp

; 2904 : 	}

  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
??$_Fill_unchecked1@PAHH@std@@YAXPAH0ABHU?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Fill_unchecked1<int *,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Fill_memset_is_safe@PAHH@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAHABH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Fill_memset_is_safe@PAHH@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAHABH@Z PROC ; std::_Fill_memset_is_safe<int *,int>, COMDAT

; 2895 : 	return {};

  00000	32 c0		 xor	 al, al

; 2896 : 	}

  00002	c3		 ret	 0
??$_Fill_memset_is_safe@PAHH@std@@YA?AU?$integral_constant@_N$0A@@0@ABQAHABH@Z ENDP ; std::_Fill_memset_is_safe<int *,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Adl_verify_range1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Adl_verify_range1<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT

; 610  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Adl_verify_range1<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory

; 2145 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Ptr$ = 12						; size = 4
__Cvt$ = 16						; size = 44
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT
; _this$ = ecx

; 189  : 		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00009	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 190  : 		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  0000c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000f	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00012	88 41 0d	 mov	 BYTE PTR [ecx+13], al

; 191  : 		}

  00015	c2 34 00	 ret	 52			; 00000034H
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 635  : 	return ((_Elem)(unsigned char)_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 636  : 	}

  00004	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

  00000	56		 push	 esi

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	57		 push	 edi
  00006	8b fe		 mov	 edi, esi
  00008	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000b	0f 1f 44 00 00	 npad	 5
$LL11@Maklocstr:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL11@Maklocstr
  00017	2b f9		 sub	 edi, ecx
  00019	47		 inc	 edi

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0001a	6a 01		 push	 1
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _calloc
  00022	8b d0		 mov	 edx, eax
  00024	83 c4 08	 add	 esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  00027	85 d2		 test	 edx, edx
  00029	74 1b		 je	 SHORT $LN14@Maklocstr

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  0002b	85 ff		 test	 edi, edi
  0002d	74 12		 je	 SHORT $LN3@Maklocstr
  0002f	8b ca		 mov	 ecx, edx
  00031	2b ce		 sub	 ecx, esi
$LL4@Maklocstr:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00033	8a 06		 mov	 al, BYTE PTR [esi]
  00035	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00038	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0003c	83 ef 01	 sub	 edi, 1
  0003f	75 f2		 jne	 SHORT $LL4@Maklocstr
$LN3@Maklocstr:
  00041	5f		 pop	 edi

; 675  : 
; 676  : 	return (_Ptrdest);

  00042	8b c2		 mov	 eax, edx

; 677  : 	}

  00044	5e		 pop	 esi
  00045	c3		 ret	 0
$LN14@Maklocstr:

; 671  : 		_Xbad_alloc();

  00046	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN12@Maklocstr:
  0004b	cc		 int	 3
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1089 : 	_Left = _STD move(_Right);
; 1090 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Bytes$[esp-4]

; 94   : 	if (_Block_size <= _Bytes)

  00004	83 ca ff	 or	 edx, -1
  00007	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0000a	3b c8		 cmp	 ecx, eax
  0000c	0f 46 ca	 cmovbe	 ecx, edx

; 52   : 		return (::operator new(_Bytes));

  0000f	51		 push	 ecx
  00010	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);
; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00015	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00017	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0001a	85 c9		 test	 ecx, ecx
  0001c	74 0a		 je	 SHORT $LN7@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0001e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00021	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00024	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;
; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);
; 110  : 	}

  00027	c3		 ret	 0
$LN7@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00028	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Arg$[esp-4]

; 1575 : 	}

  00004	c3		 ret	 0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 288  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 288  : 		}

  00010	c2 08 00	 ret	 8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Arg$[esp-4]

; 1575 : 	}

  00004	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Fill_unchecked@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill_unchecked@PAHH@std@@YAXPAH0ABH@Z PROC		; std::_Fill_unchecked<int *,int>, COMDAT

; 2916 : 	{	// copy _Val through [_First, _Last), choose optimization

  00000	53		 push	 ebx

; 2917 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  00005	33 c9		 xor	 ecx, ecx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp+4]
  0000c	33 d2		 xor	 edx, edx
  0000e	2b eb		 sub	 ebp, ebx
  00010	83 c5 03	 add	 ebp, 3
  00013	c1 ed 02	 shr	 ebp, 2
  00016	3b 5c 24 10	 cmp	 ebx, DWORD PTR __Last$[esp+4]
  0001a	0f 47 e9	 cmova	 ebp, ecx

; 2902 : 	for (; _First != _Last; ++_First)

  0001d	85 ed		 test	 ebp, ebp
  0001f	74 52		 je	 SHORT $LN7@Fill_unche
  00021	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00025	57		 push	 edi
  00026	83 fd 04	 cmp	 ebp, 4
  00029	72 32		 jb	 SHORT $LN13@Fill_unche

; 2903 : 		*_First = _Val;

  0002b	8b 38		 mov	 edi, DWORD PTR [eax]

; 2917 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  0002d	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  00030	8d 0c a9	 lea	 ecx, DWORD PTR [ecx+ebp*4]
  00033	3b d8		 cmp	 ebx, eax
  00035	77 04		 ja	 SHORT $LN14@Fill_unche
  00037	3b c8		 cmp	 ecx, eax
  00039	73 22		 jae	 SHORT $LN13@Fill_unche
$LN14@Fill_unche:
  0003b	56		 push	 esi
  0003c	8b f5		 mov	 esi, ebp
  0003e	83 e6 fc	 and	 esi, -4			; fffffffcH
$LL8@Fill_unche:

; 2902 : 	for (; _First != _Last; ++_First)

  00041	83 c2 04	 add	 edx, 4
  00044	3b d6		 cmp	 edx, esi
  00046	75 f9		 jne	 SHORT $LL8@Fill_unche

; 2917 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  00048	c1 e6 02	 shl	 esi, 2
  0004b	8b c7		 mov	 eax, edi
  0004d	8b ce		 mov	 ecx, esi
  0004f	8b fb		 mov	 edi, ebx
  00051	c1 e9 02	 shr	 ecx, 2
  00054	03 de		 add	 ebx, esi
  00056	f3 ab		 rep stosd
  00058	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0005c	5e		 pop	 esi
$LN13@Fill_unche:

; 2902 : 	for (; _First != _Last; ++_First)

  0005d	5f		 pop	 edi
  0005e	3b d5		 cmp	 edx, ebp
  00060	74 11		 je	 SHORT $LN7@Fill_unche
$LL12@Fill_unche:

; 2903 : 		*_First = _Val;

  00062	8b 00		 mov	 eax, DWORD PTR [eax]

; 2917 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  00064	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]

; 2902 : 	for (; _First != _Last; ++_First)

  00067	42		 inc	 edx

; 2903 : 		*_First = _Val;

  00068	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  0006b	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0006f	3b d5		 cmp	 edx, ebp
  00071	75 ef		 jne	 SHORT $LL12@Fill_unche
$LN7@Fill_unche:
  00073	5d		 pop	 ebp

; 2918 : 	}

  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
??$_Fill_unchecked@PAHH@std@@YAXPAH0ABH@Z ENDP		; std::_Fill_unchecked<int *,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@$0A@@std@@YAPAHABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@$0A@@std@@YAPAHABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,0>, COMDAT

; 643  : 	return (_It._Unwrapped());

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __It$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]

; 644  : 	}

  00006	c3		 ret	 0
??$_Get_unwrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@$0A@@std@@YAPAHABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >, COMDAT

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});
; 617  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V12@@std@@YAXABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Storage_ptr$ = 12					; size = 4
___formal$ = 16						; size = 4
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z PROC ; std::_Immortalize_impl<std::_Iostream_error_category>, COMDAT

; 505  : 	_Iostream_error_category() noexcept

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Storage_ptr$[esp-4]
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;

  0000a	c7 40 04 05 00
	00 00		 mov	 DWORD PTR [eax+4], 5

; 601  : 	::new (_Storage_ptr) _Ty();
; 602  : 	return (1);

  00011	b8 01 00 00 00	 mov	 eax, 1

; 603  : 	}

  00016	c2 0c 00	 ret	 12			; 0000000cH
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ENDP ; std::_Immortalize_impl<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory

; 2213 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 2312 : 		return (this->_Myptr());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2322 : 		pointer _Ans = get();
; 2323 : 		this->_Myptr() = pointer();

  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 2324 : 		return (_Ans);
; 2325 : 		}

  00008	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get, COMDAT
; _this$ = ecx

; 2312 : 		return (this->_Myptr());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2313 : 		}

  00002	c3		 ret	 0
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2294 : 		if (get() != pointer())

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN22@unique_ptr

; 2084 : 		delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN22@unique_ptr:

; 2295 : 			{
; 2296 : 			this->get_deleter()(get());
; 2297 : 			}
; 2298 : 		}

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2164 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2165 : 		}

  00002	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2159 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2160 : 		}

  00002	c3		 ret	 0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter, COMDAT
; _this$ = ecx

; 2149 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2150 : 		}

  00002	c3		 ret	 0
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 2082 : 		static_assert(0 < sizeof (_Ty),
; 2083 : 			"can't delete an incomplete type");
; 2084 : 		delete _Ptr;

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	74 0c		 je	 SHORT $LN3@operator
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR __Ptr$[esp-4], 1
  00012	ff 20		 jmp	 DWORD PTR [eax]
$LN3@operator:

; 2085 : 		}

  00014	c2 04 00	 ret	 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Adl_verify_range1<char const *,char const *>, COMDAT

; 610  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Adl_verify_range1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1100 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1101 : 	_Pocma(_Left, _Right, _Tag);
; 1102 : 	}

  00000	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 331  : 	}

  00004	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z
_TEXT	SEGMENT
tv523 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
tv524 = 16						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
tv526 = 24						; size = 4
_<_Args_2>$ = 24					; size = 1
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00004	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	8b 7c 24 10	 mov	 edi, DWORD PTR __Size_increase$[esp+8]
  00010	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00013	2b c2		 sub	 eax, edx
  00015	89 54 24 08	 mov	 DWORD PTR __Old_size$1$[esp+12], edx
  00019	3b c7		 cmp	 eax, edi
  0001b	0f 82 09 01 00
	00		 jb	 $LN105@Reallocate

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;
; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00021	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00024	55		 push	 ebp
  00025	8d 2c 3a	 lea	 ebp, DWORD PTR [edx+edi]
  00028	89 44 24 14	 mov	 DWORD PTR __Old$1$[esp+12], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002c	8b fd		 mov	 edi, ebp
  0002e	83 cf 0f	 or	 edi, 15			; 0000000fH
  00031	3b f9		 cmp	 edi, ecx

; 3870 : 		if (_Masked > _Max)

  00033	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00035	8b f9		 mov	 edi, ecx
  00037	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00039	8b d0		 mov	 edx, eax
  0003b	d1 ea		 shr	 edx, 1
  0003d	2b ca		 sub	 ecx, edx
  0003f	3b c1		 cmp	 eax, ecx
  00041	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00043	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00048	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004c	3b f8		 cmp	 edi, eax
  0004e	0f 42 f8	 cmovb	 edi, eax
$LN24@Reallocate:
  00051	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00052	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00055	8b ce		 mov	 ecx, esi
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0005d	8b d8		 mov	 ebx, eax

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;

  0005f	89 6e 10	 mov	 DWORD PTR [esi+16], ebp

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  00062	0f be 44 24 28	 movsx	 eax, BYTE PTR _<_Args_2>$[esp+16]
  00067	8b 6c 24 20	 mov	 ebp, DWORD PTR _<_Args_0>$[esp+16]
  0006b	89 44 24 28	 mov	 DWORD PTR tv526[esp+16], eax
  0006f	8b 44 24 10	 mov	 eax, DWORD PTR __Old_size$1$[esp+20]
  00073	2b c5		 sub	 eax, ebp
  00075	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00078	40		 inc	 eax
  00079	8d 3c 2b	 lea	 edi, DWORD PTR [ebx+ebp]
  0007c	89 44 24 20	 mov	 DWORD PTR tv524[esp+16], eax
  00080	8b 44 24 24	 mov	 eax, DWORD PTR _<_Args_1>$[esp+16]
  00084	03 c7		 add	 eax, edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00086	83 7c 24 18 10	 cmp	 DWORD PTR __Old$1$[esp+16], 16 ; 00000010H
  0008b	89 44 24 10	 mov	 DWORD PTR tv523[esp+20], eax
  0008f	55		 push	 ebp
  00090	72 63		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00092	8b 3e		 mov	 edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0009b	ff 74 24 30	 push	 DWORD PTR _<_Args_1>$[esp+28]
  0009f	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  000a2	ff 74 24 38	 push	 DWORD PTR tv526[esp+32]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ac	ff 74 24 38	 push	 DWORD PTR tv524[esp+40]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  000b0	8d 04 2f	 lea	 eax, DWORD PTR [edi+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b3	50		 push	 eax
  000b4	ff 74 24 30	 push	 DWORD PTR tv523[esp+52]
  000b8	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000bd	8b 4c 24 3c	 mov	 ecx, DWORD PTR __Old$1$[esp+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c1	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000c4	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cb	72 12		 jb	 SHORT $LN80@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000cd	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000d0	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d3	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d5	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000db	77 52		 ja	 SHORT $LN77@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000dd	8b fa		 mov	 edi, edx
$LN80@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000df	51		 push	 ecx
  000e0	57		 push	 edi
  000e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e6	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  000e9	89 1e		 mov	 DWORD PTR [esi], ebx
  000eb	8b c6		 mov	 eax, esi
  000ed	5b		 pop	 ebx
  000ee	5d		 pop	 ebp
  000ef	5f		 pop	 edi

; 3951 : 		}

  000f0	5e		 pop	 esi
  000f1	59		 pop	 ecx
  000f2	c2 14 00	 ret	 20			; 00000014H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000f5	56		 push	 esi
  000f6	53		 push	 ebx
  000f7	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000fc	ff 74 24 30	 push	 DWORD PTR _<_Args_1>$[esp+28]
  00100	ff 74 24 38	 push	 DWORD PTR tv526[esp+32]
  00104	57		 push	 edi
  00105	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0010a	ff 74 24 38	 push	 DWORD PTR tv524[esp+40]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0010e	8d 04 2e	 lea	 eax, DWORD PTR [esi+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00111	50		 push	 eax
  00112	ff 74 24 30	 push	 DWORD PTR tv523[esp+52]
  00116	e8 00 00 00 00	 call	 _memcpy
  0011b	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  0011e	89 1e		 mov	 DWORD PTR [esi], ebx
  00120	8b c6		 mov	 eax, esi
  00122	5b		 pop	 ebx
  00123	5d		 pop	 ebp
  00124	5f		 pop	 edi

; 3951 : 		}

  00125	5e		 pop	 esi
  00126	59		 pop	 ecx
  00127	c2 14 00	 ret	 20			; 00000014H
$LN105@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0012a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN77@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN106@Reallocate:
$LN102@Reallocate:
  00134	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__Count$ = 24						; size = 4
__Ch$ = 28						; size = 1
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z PROC ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator(), COMDAT
; _this$ = ecx

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  00000	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Old_ptr$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  00005	55		 push	 ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00006	8b 6c 24 18	 mov	 ebp, DWORD PTR __Off$[esp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0000b	8b 74 24 10	 mov	 esi, DWORD PTR __New_ptr$[esp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

  0000f	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00010	55		 push	 ebp
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00018	0f be 44 24 34	 movsx	 eax, BYTE PTR __Ch$[esp+24]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);

  0001d	8d 3c 2e	 lea	 edi, DWORD PTR [esi+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00020	8b 74 24 30	 mov	 esi, DWORD PTR __Count$[esp+24]
  00024	56		 push	 esi
  00025	50		 push	 eax
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0002c	8b 44 24 34	 mov	 eax, DWORD PTR __Old_size$[esp+36]
  00030	2b c5		 sub	 eax, ebp
  00032	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00033	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00034	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00037	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00038	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _memcpy
  00041	83 c4 24	 add	 esp, 36			; 00000024H
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	5b		 pop	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2806 : 			}, _Off, _Count, _Ch));

  00048	c2 18 00	 ret	 24			; 00000018H
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z ENDP ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$1$ = 8					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	53		 push	 ebx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __New_size$[esp]
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  0000e	0f 87 9e 00 00
	00		 ja	 $LN92@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00014	55		 push	 ebp
  00015	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]
  00018	56		 push	 esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00019	8b f3		 mov	 esi, ebx
  0001b	83 ce 0f	 or	 esi, 15			; 0000000fH
  0001e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00024	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00026	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0002b	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0002d	8b cd		 mov	 ecx, ebp
  0002f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	3b e8		 cmp	 ebp, eax
  0003a	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0003c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00041	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00043	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00046	3b f0		 cmp	 esi, eax
  00048	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0004b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0004e	8b cf		 mov	 ecx, edi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00056	53		 push	 ebx
  00057	ff 74 24 20	 push	 DWORD PTR _<_Args_0>$[esp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0005b	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0005e	8b f0		 mov	 esi, eax
  00060	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00061	89 44 24 20	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  00065	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00068	e8 00 00 00 00	 call	 _memcpy
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00070	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00074	83 fd 10	 cmp	 ebp, 16			; 00000010H
  00077	72 29		 jb	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00079	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  0007b	8d 4d 01	 lea	 ecx, DWORD PTR [ebp+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0007e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00084	72 12		 jb	 SHORT $LN76@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00086	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00089	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00091	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00094	77 17		 ja	 SHORT $LN73@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00096	8b c2		 mov	 eax, edx
$LN76@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00098	51		 push	 ecx
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009f	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3913 : 		return (*this);

  000a2	89 37		 mov	 DWORD PTR [edi], esi
  000a4	8b c7		 mov	 eax, edi
  000a6	5e		 pop	 esi
  000a7	5d		 pop	 ebp
  000a8	5f		 pop	 edi

; 3914 : 		}

  000a9	5b		 pop	 ebx
  000aa	c2 0c 00	 ret	 12			; 0000000cH
$LN73@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@Reallocate:
$LN92@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000b2	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN90@Reallocate:
  000b7	cc		 int	 3
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __New_ptr$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	57		 push	 edi
  0000b	ff 74 24 18	 push	 DWORD PTR __Ptr$[esp+8]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00018	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2671 : 			}, _Ptr));

  0001e	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 07		 je	 SHORT $LN3@Pnavail
  00008	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	99		 cdq

; 313  : 		}

  0000e	c3		 ret	 0
$LN3@Pnavail:

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0000f	33 c0		 xor	 eax, eax
  00011	99		 cdq

; 313  : 		}

  00012	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 306  : 		--*_IPcount;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	ff 08		 dec	 DWORD PTR [eax]

; 307  : 		return ((*_IPnext)++);

  00005	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00008	8b 02		 mov	 eax, DWORD PTR [edx]
  0000a	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0000d	89 0a		 mov	 DWORD PTR [edx], ecx

; 308  : 		}

  0000f	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 206  : 		return (xsputn(_Ptr, _Count));

  00000	ff 74 24 0c	 push	 DWORD PTR __Count$[esp]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	ff 74 24 0c	 push	 DWORD PTR __Count$[esp]
  0000a	ff 74 24 0c	 push	 DWORD PTR __Ptr$[esp+4]
  0000e	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00011	ff d0		 call	 eax

; 207  : 		}

  00013	c2 0c 00	 ret	 12			; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	83 38 00	 cmp	 DWORD PTR [eax], 0
  00006	74 22		 je	 SHORT $LN3@sputc
  00008	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0000b	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  0000d	85 c0		 test	 eax, eax
  0000f	7e 19		 jle	 SHORT $LN3@sputc

; 306  : 		--*_IPcount;

  00011	48		 dec	 eax
  00012	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00014	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0001c	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  0001e	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]
  00022	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00024	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 201  : 		}

  00027	c2 04 00	 ret	 4
$LN3@sputc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  0002a	0f b6 44 24 04	 movzx	 eax, BYTE PTR __Ch$[esp-4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0002f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00031	89 44 24 04	 mov	 DWORD PTR __Ch$[esp-4], eax
  00035	ff 62 0c	 jmp	 DWORD PTR [edx+12]
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 143  : 		return (sync());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 34	 jmp	 DWORD PTR [eax+52]
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Bytes$[esp-4]
  00004	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000a	72 19		 jb	 SHORT $LN15@Deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00010	83 c1 23	 add	 ecx, 35			; 00000023H
  00013	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00016	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00018	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001e	76 09		 jbe	 SHORT $LN13@Deallocate
  00020	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00025	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
$LN13@Deallocate:

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  00029	89 4c 24 08	 mov	 DWORD PTR __Bytes$[esp-4], ecx
  0002d	89 54 24 04	 mov	 DWORD PTR __Ptr$[esp-4], edx
  00031	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Bytes$[esp-4]
  00004	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000a	72 29		 jb	 SHORT $LN2@Allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000c	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0000f	83 ca ff	 or	 edx, -1
  00012	3b c1		 cmp	 eax, ecx
  00014	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001d	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  0001f	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00022	85 c9		 test	 ecx, ecx
  00024	74 0a		 je	 SHORT $LN11@Allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00026	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00029	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0002c	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 194  : 	}

  0002f	c3		 ret	 0
$LN11@Allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00030	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN2@Allocate:

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00035	85 c9		 test	 ecx, ecx
  00037	74 09		 je	 SHORT $LN3@Allocate

; 52   : 		return (::operator new(_Bytes));

  00039	89 4c 24 04	 mov	 DWORD PTR __Bytes$[esp-4], ecx
  0003d	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));
; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00042	33 c0		 xor	 eax, eax

; 194  : 	}

  00044	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 331  : 	}

  00004	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _<_Args_0>$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 44 24 08	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000c	c3		 ret	 0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
tv474 = -4						; size = 4
__New_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	51		 push	 ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00001	8b 54 24 08	 mov	 edx, DWORD PTR __Size_increase$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0000e	8b c1		 mov	 eax, ecx
  00010	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00013	2b c5		 sub	 eax, ebp
  00015	3b c2		 cmp	 eax, edx
  00017	0f 82 e4 00 00
	00		 jb	 $LN105@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0001d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00020	03 d5		 add	 edx, ebp
  00022	57		 push	 edi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00023	8b fa		 mov	 edi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00025	89 54 24 0c	 mov	 DWORD PTR __New_size$1$[esp+16], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00029	83 cf 0f	 or	 edi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0002c	89 44 24 14	 mov	 DWORD PTR __Old$1$[esp+12], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00030	3b f9		 cmp	 edi, ecx

; 3870 : 		if (_Masked > _Max)

  00032	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00034	8b f9		 mov	 edi, ecx
  00036	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00038	8b d0		 mov	 edx, eax
  0003a	d1 ea		 shr	 edx, 1
  0003c	2b ca		 sub	 ecx, edx
  0003e	3b c1		 cmp	 eax, ecx
  00040	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00042	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00047	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00049	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004b	3b f8		 cmp	 edi, eax
  0004d	0f 42 f8	 cmovb	 edi, eax
$LN24@Reallocate:
  00050	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00051	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00054	8b ce		 mov	 ecx, esi
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0005c	8b d8		 mov	 ebx, eax

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;

  0005e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00061	8b 44 24 10	 mov	 eax, DWORD PTR __New_size$1$[esp+20]
  00065	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  00068	8b 44 24 24	 mov	 eax, DWORD PTR _<_Args_1>$[esp+16]
  0006c	8d 3c 2b	 lea	 edi, DWORD PTR [ebx+ebp]
  0006f	03 c7		 add	 eax, edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00071	83 7c 24 18 10	 cmp	 DWORD PTR __Old$1$[esp+16], 16 ; 00000010H
  00076	89 44 24 10	 mov	 DWORD PTR tv474[esp+20], eax
  0007a	55		 push	 ebp
  0007b	72 59		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  0007d	8b 3e		 mov	 edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0007f	57		 push	 edi
  00080	53		 push	 ebx
  00081	e8 00 00 00 00	 call	 _memcpy
  00086	ff 74 24 30	 push	 DWORD PTR _<_Args_1>$[esp+28]
  0008a	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  0008d	ff 74 24 30	 push	 DWORD PTR _<_Args_0>$[esp+32]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  00097	8b 44 24 28	 mov	 eax, DWORD PTR tv474[esp+44]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0009b	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0009e	8b 4c 24 18	 mov	 ecx, DWORD PTR __Old$1$[esp+16]
  000a2	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000a3	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000a6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ac	72 12		 jb	 SHORT $LN80@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000ae	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000b1	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b4	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b6	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000b9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000bc	77 48		 ja	 SHORT $LN77@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000be	8b fa		 mov	 edi, edx
$LN80@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000c0	51		 push	 ecx
  000c1	57		 push	 edi
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c7	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  000ca	89 1e		 mov	 DWORD PTR [esi], ebx
  000cc	8b c6		 mov	 eax, esi
  000ce	5b		 pop	 ebx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi

; 3951 : 		}

  000d1	5d		 pop	 ebp
  000d2	59		 pop	 ecx
  000d3	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000d6	56		 push	 esi
  000d7	53		 push	 ebx
  000d8	e8 00 00 00 00	 call	 _memcpy
  000dd	ff 74 24 30	 push	 DWORD PTR _<_Args_1>$[esp+28]
  000e1	ff 74 24 30	 push	 DWORD PTR _<_Args_0>$[esp+32]
  000e5	57		 push	 edi
  000e6	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000eb	8b 44 24 28	 mov	 eax, DWORD PTR tv474[esp+44]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000ef	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  000f2	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  000f5	8b c6		 mov	 eax, esi
  000f7	89 1e		 mov	 DWORD PTR [esi], ebx
  000f9	5b		 pop	 ebx
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi

; 3951 : 		}

  000fc	5d		 pop	 ebp
  000fd	59		 pop	 ecx
  000fe	c2 10 00	 ret	 16			; 00000010H
$LN105@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  00101	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN77@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00106	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN106@Reallocate:
$LN102@Reallocate:
  0010b	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __New_ptr$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00006	8b 7c 24 14	 mov	 edi, DWORD PTR __Old_size$[esp+4]
  0000a	57		 push	 edi
  0000b	ff 74 24 14	 push	 DWORD PTR __Old_ptr$[esp+8]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00015	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00017	8b 74 24 28	 mov	 esi, DWORD PTR __Count$[esp+16]
  0001b	56		 push	 esi
  0001c	ff 74 24 28	 push	 DWORD PTR __Ptr$[esp+20]
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _memcpy
  00026	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00029	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2587 : 			}, _Ptr, _Count));

  0002f	c2 14 00	 ret	 20			; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
tv481 = -4						; size = 4
__New_size$1$ = -4					; size = 4
__Old$1$ = 8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
tv483 = 20						; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	51		 push	 ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00001	8b 54 24 08	 mov	 edx, DWORD PTR __Size_increase$[esp]
  00005	55		 push	 ebp
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0000e	8b c1		 mov	 eax, ecx
  00010	8b 6e 10	 mov	 ebp, DWORD PTR [esi+16]
  00013	2b c5		 sub	 eax, ebp
  00015	3b c2		 cmp	 eax, edx
  00017	0f 82 ed 00 00
	00		 jb	 $LN105@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0001d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00020	03 d5		 add	 edx, ebp
  00022	57		 push	 edi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00023	8b fa		 mov	 edi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00025	89 54 24 0c	 mov	 DWORD PTR __New_size$1$[esp+16], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00029	83 cf 0f	 or	 edi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  0002c	89 44 24 14	 mov	 DWORD PTR __Old$1$[esp+12], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00030	3b f9		 cmp	 edi, ecx

; 3870 : 		if (_Masked > _Max)

  00032	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00034	8b f9		 mov	 edi, ecx
  00036	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00038	8b d0		 mov	 edx, eax
  0003a	d1 ea		 shr	 edx, 1
  0003c	2b ca		 sub	 ecx, edx
  0003e	3b c1		 cmp	 eax, ecx
  00040	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00042	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00047	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00049	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0004b	3b f8		 cmp	 edi, eax
  0004d	0f 42 f8	 cmovb	 edi, eax
$LN24@Reallocate:
  00050	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00051	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00054	8b ce		 mov	 ecx, esi
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  0005c	8b d8		 mov	 ebx, eax

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;

  0005e	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  00061	8b 44 24 10	 mov	 eax, DWORD PTR __New_size$1$[esp+20]
  00065	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  00068	0f be 44 24 24	 movsx	 eax, BYTE PTR _<_Args_1>$[esp+16]
  0006d	89 44 24 24	 mov	 DWORD PTR tv483[esp+16], eax
  00071	8d 3c 2b	 lea	 edi, DWORD PTR [ebx+ebp]
  00074	8b 44 24 20	 mov	 eax, DWORD PTR _<_Args_0>$[esp+16]
  00078	03 c7		 add	 eax, edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0007a	83 7c 24 18 10	 cmp	 DWORD PTR __Old$1$[esp+16], 16 ; 00000010H
  0007f	89 44 24 10	 mov	 DWORD PTR tv481[esp+20], eax
  00083	55		 push	 ebp
  00084	72 59		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00086	8b 3e		 mov	 edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00088	57		 push	 edi
  00089	53		 push	 ebx
  0008a	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0008f	ff 74 24 2c	 push	 DWORD PTR _<_Args_0>$[esp+28]
  00093	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  00096	ff 74 24 34	 push	 DWORD PTR tv483[esp+32]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000a0	8b 44 24 28	 mov	 eax, DWORD PTR tv481[esp+44]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000a4	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000a7	8b 4c 24 18	 mov	 ecx, DWORD PTR __Old$1$[esp+16]
  000ab	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000ac	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000af	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b5	72 12		 jb	 SHORT $LN80@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000b7	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000ba	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000bd	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bf	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  000c2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c5	77 48		 ja	 SHORT $LN77@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c7	8b fa		 mov	 edi, edx
$LN80@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000c9	51		 push	 ecx
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  000d3	89 1e		 mov	 DWORD PTR [esi], ebx
  000d5	8b c6		 mov	 eax, esi
  000d7	5b		 pop	 ebx
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi

; 3951 : 		}

  000da	5d		 pop	 ebp
  000db	59		 pop	 ecx
  000dc	c2 10 00	 ret	 16			; 00000010H
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000df	56		 push	 esi
  000e0	53		 push	 ebx
  000e1	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000e6	ff 74 24 2c	 push	 DWORD PTR _<_Args_0>$[esp+28]
  000ea	ff 74 24 34	 push	 DWORD PTR tv483[esp+32]
  000ee	57		 push	 edi
  000ef	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000f4	8b 44 24 28	 mov	 eax, DWORD PTR tv481[esp+44]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000f8	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  000fb	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3950 : 		return (*this);

  000fe	8b c6		 mov	 eax, esi
  00100	89 1e		 mov	 DWORD PTR [esi], ebx
  00102	5b		 pop	 ebx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi

; 3951 : 		}

  00105	5d		 pop	 ebp
  00106	59		 pop	 ecx
  00107	c2 10 00	 ret	 16			; 00000010H
$LN105@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  0010a	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN77@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0010f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN106@Reallocate:
$LN102@Reallocate:
  00114	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$ = ecx

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __New_ptr$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2610 : 				const size_type _Count, const _Elem _Ch) {

  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00006	8b 7c 24 14	 mov	 edi, DWORD PTR __Old_size$[esp+4]
  0000a	57		 push	 edi
  0000b	ff 74 24 14	 push	 DWORD PTR __Old_ptr$[esp+8]
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00015	0f be 44 24 28	 movsx	 eax, BYTE PTR __Ch$[esp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  0001a	03 fe		 add	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001c	8b 74 24 24	 mov	 esi, DWORD PTR __Count$[esp+16]
  00020	56		 push	 esi
  00021	50		 push	 eax
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  0002b	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2614 : 			}, _Count, _Ch));

  00031	c2 14 00	 ret	 20			; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z
_TEXT	SEGMENT
__New_ptr$1$ = 8					; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	53		 push	 ebx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __New_size$[esp]
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  0000e	0f 87 a0 00 00
	00		 ja	 $LN92@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00014	55		 push	 ebp
  00015	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]
  00018	56		 push	 esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00019	8b f3		 mov	 esi, ebx
  0001b	83 ce 0f	 or	 esi, 15			; 0000000fH
  0001e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00024	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00026	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0002b	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0002d	8b cd		 mov	 ecx, ebp
  0002f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00034	d1 e9		 shr	 ecx, 1
  00036	2b c1		 sub	 eax, ecx
  00038	3b e8		 cmp	 ebp, eax
  0003a	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0003c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00041	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00043	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00046	3b f0		 cmp	 esi, eax
  00048	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0004b	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0004e	8b cf		 mov	 ecx, edi
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00056	0f be 4c 24 1c	 movsx	 ecx, BYTE PTR _<_Args_0>$[esp+12]
  0005b	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0005c	89 77 14	 mov	 DWORD PTR [edi+20], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0005f	8b f0		 mov	 esi, eax
  00061	51		 push	 ecx
  00062	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00063	89 44 24 20	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  00067	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0006a	e8 00 00 00 00	 call	 _memset
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00072	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00076	83 fd 10	 cmp	 ebp, 16			; 00000010H
  00079	72 29		 jb	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007b	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  0007d	8d 4d 01	 lea	 ecx, DWORD PTR [ebp+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00080	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00086	72 12		 jb	 SHORT $LN76@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00088	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0008b	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008e	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00090	83 c0 fc	 add	 eax, -4			; fffffffcH
  00093	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00096	77 17		 ja	 SHORT $LN73@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00098	8b c2		 mov	 eax, edx
$LN76@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0009a	51		 push	 ecx
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a1	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3913 : 		return (*this);

  000a4	89 37		 mov	 DWORD PTR [edi], esi
  000a6	8b c7		 mov	 eax, edi
  000a8	5e		 pop	 esi
  000a9	5d		 pop	 ebp
  000aa	5f		 pop	 edi

; 3914 : 		}

  000ab	5b		 pop	 ebx
  000ac	c2 0c 00	 ret	 12			; 0000000cH
$LN73@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000af	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN93@Reallocate:
$LN92@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000b4	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN90@Reallocate:
  000b9	cc		 int	 3
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z PROC ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator(), COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00000	0f be 44 24 0c	 movsx	 eax, BYTE PTR __Ch$[esp-4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  00005	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00006	8b 74 24 08	 mov	 esi, DWORD PTR __New_ptr$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0000b	8b 7c 24 10	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000f	57		 push	 edi
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 _memset
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0001a	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2694 : 			}, _Ch));

  00020	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ENDP ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00008	8b 10		 mov	 edx, DWORD PTR [eax]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 42 c1	 cmovb	 eax, ecx

; 34   : 	}

  0000f	c3		 ret	 0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 331  : 	}

  00004	c3		 ret	 0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 279  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 279  : 		}

  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 174  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 255  : 		_CSTD free((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]

; 174  : 		{	// destroy the object

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 255  : 		_CSTD free((void *)_Grouping);

  0000c	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  00011	ff 76 10	 push	 DWORD PTR [esi+16]
  00014	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002a	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0002f	74 0b		 je	 SHORT $LN14@scalar
  00031	6a 18		 push	 24			; 00000018H
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN14@scalar:
  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 254  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 255  : 		_CSTD free((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  0000b	ff 76 10	 push	 DWORD PTR [esi+16]
  0000e	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00013	ff 76 14	 push	 DWORD PTR [esi+20]
  00016	e8 00 00 00 00	 call	 _free
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001e	5e		 pop	 esi

; 258  : 		}

  0001f	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 249  : 		return (string_type(_Truename));

  00000	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00004	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]

; 2185 : 		assign(_Ptr);

  00008	51		 push	 ecx
  00009	8b ce		 mov	 ecx, esi

; 3976 : 		_My_data._Mysize = 0;

  0000b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00019	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 249  : 		return (string_type(_Truename));

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 250  : 		}

  00024	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 244  : 		return (string_type(_Falsename));

  00000	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00004	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]

; 2185 : 		assign(_Ptr);

  00008	51		 push	 ecx
  00009	8b ce		 mov	 ecx, esi

; 3976 : 		_My_data._Mysize = 0;

  0000b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00019	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 244  : 		return (string_type(_Falsename));

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 245  : 		}

  00024	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 239  : 		return (string(_Grouping));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00004	8b 74 24 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp]

; 2185 : 		assign(_Ptr);

  00008	51		 push	 ecx
  00009	8b ce		 mov	 ecx, esi

; 3976 : 		_My_data._Mysize = 0;

  0000b	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00012	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00019	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0001c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 239  : 		return (string(_Grouping));

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 240  : 		}

  00024	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 234  : 		return (_Kseparator);

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 235  : 		}

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 229  : 		return (_Dp);

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 230  : 		}

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T2 = -68						; size = 44
$T3 = -68						; size = 44
__Ptr$1$ = -24						; size = 4
_this$GSCopy$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 200  : 		{	// initialize from _Lobj

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 127  : 		return (localeconv());

  00030	e8 00 00 00 00	 call	 _localeconv
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 201  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00035	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 122  : 		return (::_Getcvt());

  00037	8d 45 bc	 lea	 eax, DWORD PTR $T3[ebp]
  0003a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 201  : 		const lconv *_Ptr = _Lobj._Getlconv();

  0003b	89 75 e8	 mov	 DWORD PTR __Ptr$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 122  : 		return (::_Getcvt());

  0003e	e8 00 00 00 00	 call	 __Getcvt
  00043	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 204  : 		_Grouping = nullptr;

  00046	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 209  : 		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());

  0004d	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  00051	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00058	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  0005f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00066	74 07		 je	 SHORT $LN6@Init
  00068	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_00CNPNBAHC@@
  0006d	eb 03		 jmp	 SHORT $LN7@Init
$LN6@Init:
  0006f	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
$LN7@Init:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 122  : 		return (::_Getcvt());

  00072	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __Getcvt
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  0007b	8b fe		 mov	 edi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 122  : 		return (::_Getcvt());

  0007d	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00080	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL63@Init:
  00083	8a 07		 mov	 al, BYTE PTR [edi]
  00085	47		 inc	 edi
  00086	84 c0		 test	 al, al
  00088	75 f9		 jne	 SHORT $LL63@Init
  0008a	2b f9		 sub	 edi, ecx
  0008c	47		 inc	 edi

; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  0008d	6a 01		 push	 1
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 _calloc
  00095	8b d0		 mov	 edx, eax
  00097	83 c4 08	 add	 esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  0009a	85 d2		 test	 edx, edx
  0009c	0f 84 cb 00 00
	00		 je	 $LN67@Init

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  000a2	85 ff		 test	 edi, edi
  000a4	74 18		 je	 SHORT $LN20@Init
  000a6	8b ca		 mov	 ecx, edx
  000a8	2b ce		 sub	 ecx, esi
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL21@Init:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  000b0	8a 06		 mov	 al, BYTE PTR [esi]
  000b2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000b5	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000b9	83 ef 01	 sub	 edi, 1
  000bc	75 f2		 jne	 SHORT $LL21@Init
$LN20@Init:

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  000be	bf 06 00 00 00	 mov	 edi, 6
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 209  : 		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());

  000c3	89 53 08	 mov	 DWORD PTR [ebx+8], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  000c6	6a 01		 push	 1
  000c8	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 210  : 		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);

  000c9	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_05LAPONLG@false@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  000ce	e8 00 00 00 00	 call	 _calloc
  000d3	8b d0		 mov	 edx, eax
  000d5	83 c4 08	 add	 esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  000d8	85 d2		 test	 edx, edx
  000da	0f 84 92 00 00
	00		 je	 $LN68@Init

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  000e0	8b ca		 mov	 ecx, edx
  000e2	2b ce		 sub	 ecx, esi
$LL30@Init:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  000e4	8a 06		 mov	 al, BYTE PTR [esi]
  000e6	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000e9	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000ed	83 ef 01	 sub	 edi, 1
  000f0	75 f2		 jne	 SHORT $LL30@Init

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  000f2	bf 05 00 00 00	 mov	 edi, 5
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 210  : 		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);

  000f7	89 53 10	 mov	 DWORD PTR [ebx+16], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  000fa	6a 01		 push	 1
  000fc	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 211  : 		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);

  000fd	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_04LOAJBDKD@true@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00102	e8 00 00 00 00	 call	 _calloc
  00107	8b d0		 mov	 edx, eax
  00109	83 c4 08	 add	 esp, 8

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

  0010c	85 d2		 test	 edx, edx
  0010e	74 67		 je	 SHORT $LN69@Init

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00110	8b ca		 mov	 ecx, edx
  00112	2b ce		 sub	 ecx, esi
$LL38@Init:

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00114	8a 06		 mov	 al, BYTE PTR [esi]
  00116	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00119	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  0011d	83 ef 01	 sub	 edi, 1
  00120	75 f2		 jne	 SHORT $LL38@Init
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 211  : 		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);

  00122	80 7d 0c 00	 cmp	 BYTE PTR __Isdef$[ebp], 0
  00126	89 53 14	 mov	 DWORD PTR [ebx+20], edx

; 215  : 		_CATCH_END
; 216  : 
; 217  : 		if (_Isdef)

  00129	74 1a		 je	 SHORT $LN3@Init

; 218  : 			{	// apply defaults for required facets
; 219  : //			_Grouping = _Maklocstr("", static_cast<char *>(nullptr), _Cvt);
; 220  : 			_Dp = _Maklocchr('.', static_cast<_Elem *>(nullptr), _Cvt);

  0012b	66 c7 43 0c 2e
	2c		 mov	 WORD PTR [ebx+12], 11310 ; 00002c2eH

; 221  : 			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);
; 222  : 			}
; 223  : 		else
; 224  : 			_Getvals((_Elem)0, _Ptr, _Cvt);
; 225  : 		}

  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 08 00	 ret	 8
$LN3@Init:

; 189  : 		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  00145	8b 4d e8	 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  00148	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0014d	88 43 0c	 mov	 BYTE PTR [ebx+12], al

; 190  : 		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);

  00150	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00153	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00156	88 43 0d	 mov	 BYTE PTR [ebx+13], al

; 221  : 			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);
; 222  : 			}
; 223  : 		else
; 224  : 			_Getvals((_Elem)0, _Ptr, _Cvt);
; 225  : 		}

  00159	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00163	59		 pop	 ecx
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi
  00166	5b		 pop	 ebx
  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 08 00	 ret	 8
$LN67@Init:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 671  : 		_Xbad_alloc();

  0016d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN68@Init:
  00172	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN69@Init:
  00177	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 213  : 		_Tidy();

  0017c	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0017f	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AAEXXZ ; std::numpunct<char>::_Tidy

; 214  : 		_RERAISE;

  00184	6a 00		 push	 0
  00186	6a 00		 push	 0
  00188	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN65@Init:
  0018d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 255  : 		_CSTD free((void *)_Grouping);

  00003	ff 76 08	 push	 DWORD PTR [esi+8]

; 174  : 		{	// destroy the object

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 255  : 		_CSTD free((void *)_Grouping);

  0000c	e8 00 00 00 00	 call	 _free

; 256  : 		_CSTD free((void *)_Falsename);

  00011	ff 76 10	 push	 DWORD PTR [esi+16]
  00014	e8 00 00 00 00	 call	 _free

; 257  : 		_CSTD free((void *)_Truename);

  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002a	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 176  : 		}

  0002b	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 165  : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx
  0002a	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx

; 166  : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  00030	85 ff		 test	 edi, edi
  00032	74 76		 je	 SHORT $LN26@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 72		 jne	 SHORT $LN26@Getcat

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00038	6a 18		 push	 24			; 00000018H
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 4b		 je	 SHORT $LN4@Getcat
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  0004e	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00051	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00069	50		 push	 eax
  0006a	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  0007e	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx

; 160  : 		_Init(_Lobj, _Isdef);

  00081	53		 push	 ebx
  00082	50		 push	 eax
  00083	8b ce		 mov	 ecx, esi
  00085	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0008c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00092	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00097	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00099	33 f6		 xor	 esi, esi
$LN5@Getcat:
  0009b	89 37		 mov	 DWORD PTR [edi], esi
  0009d	f6 c3 01	 test	 bl, 1
  000a0	74 08		 je	 SHORT $LN26@Getcat
  000a2	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  000a5	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN26@Getcat:

; 168  : 				_Locinfo(_Ploc->c_str()), 0, true);
; 169  : 		return (_X_NUMERIC);
; 170  : 		}

  000aa	b8 04 00 00 00	 mov	 eax, 4
  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0c 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 f0 fe	 and	 DWORD PTR $T3[ebp], -2	; fffffffeH
  0001f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  00027	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  00028	8b 4d 08	 mov	 ecx, DWORD PTR $T4[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 159  : 		{	// construct from specified locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Refs$[ebp]
  0002c	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 160  : 		_Init(_Lobj, _Isdef);

  0002f	ff 75 10	 push	 DWORD PTR __Isdef$[ebp]
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	ff 75 08	 push	 DWORD PTR __Lobj$[ebp]
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  00042	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 161  : 		}

  00047	8b c6		 mov	 eax, esi
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5e		 pop	 esi
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 143  : 		return (do_truename());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	ff 74 24 04	 push	 DWORD PTR ___$ReturnUdt$[esp-4]
  00006	ff 52 1c	 call	 DWORD PTR [edx+28]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 144  : 		}

  0000d	c2 04 00	 ret	 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 138  : 		return (do_falsename());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	ff 74 24 04	 push	 DWORD PTR ___$ReturnUdt$[esp-4]
  00006	ff 52 18	 call	 DWORD PTR [edx+24]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 139  : 		}

  0000d	c2 04 00	 ret	 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 133  : 		return (do_grouping());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	ff 74 24 04	 push	 DWORD PTR ___$ReturnUdt$[esp-4]
  00006	ff 52 14	 call	 DWORD PTR [edx+20]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 134  : 		}

  0000d	c2 04 00	 ret	 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 128  : 		return (do_thousands_sep());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00005	ff e0		 jmp	 eax
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 123  : 		return (do_decimal_point());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00005	ff e0		 jmp	 eax
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
__Lock$3 = -24						; size = 4
__Psave$1$ = -20					; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__Lock$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$7 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	53		 push	 ebx
  0002e	89 5d ec	 mov	 DWORD PTR $T4[ebp], ebx
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 116  : 			if (_Id == 0)

  00036	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00044	89 45 ec	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 116  : 			if (_Id == 0)

  00047	85 ff		 test	 edi, edi
  00049	75 2f		 jne	 SHORT $LN11@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0004b	57		 push	 edi
  0004c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0004f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

  00054	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, edi ; std::numpunct<char>::id
  0005a	75 10		 jne	 SHORT $LN12@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00061	40		 inc	 eax
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN12@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  0006c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00074	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
$LN11@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0007a	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00080	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00083	73 10		 jae	 SHORT $LN20@use_facet
  00085	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00088	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  0008b	85 f6		 test	 esi, esi
  0008d	0f 85 c5 00 00
	00		 jne	 $LN89@use_facet
  00093	eb 02		 jmp	 SHORT $LN92@use_facet
$LN20@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00095	33 f6		 xor	 esi, esi
$LN92@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00097	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0009b	74 10		 je	 SHORT $LN17@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  0009d	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000a2	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a5	73 0e		 jae	 SHORT $LN93@use_facet
  000a7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000aa	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000ad	85 f6		 test	 esi, esi
  000af	0f 85 a3 00 00
	00		 jne	 $LN89@use_facet
$LN93@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000b5	8b 45 ec	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 07		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000bc	8b f0		 mov	 esi, eax

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	e9 95 00 00 00	 jmp	 $LN89@use_facet
$LN3@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  000c3	6a 18		 push	 24			; 00000018H
  000c5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ca	8b f0		 mov	 esi, eax
  000cc	83 c4 04	 add	 esp, 4
  000cf	89 75 f0	 mov	 DWORD PTR $T5[ebp], esi
  000d2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d6	85 f6		 test	 esi, esi
  000d8	74 4b		 je	 SHORT $LN27@use_facet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000da	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e0	85 c9		 test	 ecx, ecx
  000e2	75 07		 jne	 SHORT $LN35@use_facet
  000e4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  000e9	eb 0a		 jmp	 SHORT $LN40@use_facet
$LN35@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  000eb	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000ee	85 c0		 test	 eax, eax
  000f0	75 03		 jne	 SHORT $LN40@use_facet
  000f2	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN40@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  000f5	50		 push	 eax
  000f6	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f9	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  000fe	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00103	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 167  : 			*_Ppf = new numpunct<_Elem>(

  0010a	89 5d ec	 mov	 DWORD PTR $T4[ebp], ebx

; 160  : 		_Init(_Lobj, _Isdef);

  0010d	53		 push	 ebx
  0010e	50		 push	 eax
  0010f	8b ce		 mov	 ecx, esi
  00111	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00118	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
  0011e	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 167  : 			*_Ppf = new numpunct<_Elem>(

  00123	eb 02		 jmp	 SHORT $LN28@use_facet
$LN27@use_facet:
  00125	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00127	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0012e	f6 c3 01	 test	 bl, 1
  00131	74 08		 je	 SHORT $LN32@use_facet
  00133	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00136	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN32@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0013b	89 75 08	 mov	 DWORD PTR __Psave_guard$7[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 535  : 				_Facet_Register(_Pfmod);

  0013e	56		 push	 esi
  0013f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00143	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  00148	8b 16		 mov	 edx, DWORD PTR [esi]
  0014a	83 c4 04	 add	 esp, 4
  0014d	8b ce		 mov	 ecx, esi
  0014f	ff 52 04	 call	 DWORD PTR [edx+4]

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  00152	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
$LN89@use_facet:

; 540  : 				_Pf = _Psave;
; 541  : 
; 542  : 				(void) _Psave_guard.release();
; 543  : 				}
; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  00158	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0015b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00160	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00162	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00165	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016c	59		 pop	 ecx
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4:
  00017	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	0f 84 0c 00 00
	00		 je	 $LN31@use_facet
  00023	83 65 ec fe	 and	 DWORD PTR $T4[ebp], -2	; fffffffeH
  00027	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN31@use_facet:
  0002f	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$5:
  00030	8b 4d f0	 mov	 ecx, DWORD PTR $T5[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1:
  00038	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$7[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  00040	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00044	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00047	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 705  : 		return (_Failed);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]

; 706  : 		}

  00002	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 695  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 696  : 		}

  00002	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 690  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 691  : 		}

  00002	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 680  : 		{	// store element and increment

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	85 c9		 test	 ecx, ecx
  00008	74 39		 je	 SHORT $LN3@operator

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0000a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0000d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00010	74 21		 je	 SHORT $LN7@operator
  00012	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  00017	85 c0		 test	 eax, eax
  00019	7e 18		 jle	 SHORT $LN7@operator

; 306  : 		--*_IPcount;

  0001b	48		 dec	 eax
  0001c	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  0001e	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00021	8b 11		 mov	 edx, DWORD PTR [ecx]
  00023	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  00028	8a 44 24 08	 mov	 al, BYTE PTR __Right$[esp]
  0002c	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  0002e	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00031	eb 0b		 jmp	 SHORT $LN8@operator
$LN7@operator:
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00035	0f b6 44 24 08	 movzx	 eax, BYTE PTR __Right$[esp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0003a	50		 push	 eax
  0003b	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN8@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 531  : 		return (_Left == _Right);

  0003e	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00041	75 03		 jne	 SHORT $LN24@operator
$LN3@operator:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  00043	c6 06 01	 mov	 BYTE PTR [esi], 1
$LN24@operator:

; 685  : 		return (*this);
; 686  : 		}

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	c2 04 00	 ret	 4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Sb$[esp-4]
  00004	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 672  : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c6 01 00	 mov	 BYTE PTR [ecx], 0
  0000c	c2 04 00	 ret	 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0000e	74 0b		 je	 SHORT $LN12@scalar
  00010	6a 08		 push	 8
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1828 : 		{	// put _Count * _Ch to _Dest

  00000	56		 push	 esi

; 1829 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00001	8b 74 24 14	 mov	 esi, DWORD PTR __Dest$[esp+4]
  00005	57		 push	 edi
  00006	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	85 ff		 test	 edi, edi
  0000c	74 4d		 je	 SHORT $LN3@Rep
  0000e	53		 push	 ebx
  0000f	8a 5c 24 20	 mov	 bl, BYTE PTR __Ch$[esp+8]
$LL4@Rep:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00013	85 f6		 test	 esi, esi
  00015	74 39		 je	 SHORT $LN12@Rep

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00017	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0001a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001d	74 1d		 je	 SHORT $LN16@Rep
  0001f	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 198  : 		return (0 < _Pnavail()

  00024	85 c0		 test	 eax, eax
  00026	7e 14		 jle	 SHORT $LN16@Rep

; 306  : 		--*_IPcount;

  00028	48		 dec	 eax
  00029	89 01		 mov	 DWORD PTR [ecx], eax

; 307  : 		return ((*_IPnext)++);

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  00035	88 1a		 mov	 BYTE PTR [edx], bl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00037	0f b6 c3	 movzx	 eax, bl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0003a	eb 0b		 jmp	 SHORT $LN17@Rep
$LN16@Rep:
  0003c	8b 16		 mov	 edx, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00040	0f b6 c3	 movzx	 eax, bl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00043	50		 push	 eax
  00044	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN17@Rep:

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00047	8b 74 24 1c	 mov	 esi, DWORD PTR __Dest$[esp+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 531  : 		return (_Left == _Right);

  0004b	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  0004e	75 05		 jne	 SHORT $LN2@Rep
$LN12@Rep:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  00050	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Rep:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1829 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  00055	83 ef 01	 sub	 edi, 1
  00058	75 b9		 jne	 SHORT $LL4@Rep
  0005a	5b		 pop	 ebx
$LN3@Rep:

; 1830 : 			*_Dest = _Ch;
; 1831 : 		return (_Dest);

  0005b	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0005f	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00063	5f		 pop	 edi
  00064	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00067	89 08		 mov	 DWORD PTR [eax], ecx
  00069	5e		 pop	 esi

; 1832 : 		}

  0006a	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Ch$1$ = 28						; size = 1
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1820 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

  00000	56		 push	 esi

; 1821 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  00001	8b 74 24 14	 mov	 esi, DWORD PTR __Dest$[esp+4]
  00005	57		 push	 edi
  00006	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+4]
  0000a	85 ff		 test	 edi, edi
  0000c	74 58		 je	 SHORT $LN3@Put
  0000e	53		 push	 ebx
  0000f	8b 5c 24 20	 mov	 ebx, DWORD PTR __Ptr$[esp+8]
$LL4@Put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00013	85 f6		 test	 esi, esi
  00015	74 43		 je	 SHORT $LN12@Put

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00017	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  0001a	8a 0b		 mov	 cl, BYTE PTR [ebx]
  0001c	88 4c 24 24	 mov	 BYTE PTR __Ch$1$[esp+8], cl

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  00020	83 38 00	 cmp	 DWORD PTR [eax], 0
  00023	74 21		 je	 SHORT $LN16@Put
  00025	8b 56 30	 mov	 edx, DWORD PTR [esi+48]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  0002a	85 c0		 test	 eax, eax
  0002c	7e 18		 jle	 SHORT $LN16@Put

; 306  : 		--*_IPcount;

  0002e	48		 dec	 eax
  0002f	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00031	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00034	8b 11		 mov	 edx, DWORD PTR [ecx]
  00036	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00039	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  0003b	8a 44 24 24	 mov	 al, BYTE PTR __Ch$1$[esp+8]
  0003f	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00041	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00044	eb 0b		 jmp	 SHORT $LN17@Put
$LN16@Put:
  00046	8b 16		 mov	 edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00048	0f b6 c1	 movzx	 eax, cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0004b	8b ce		 mov	 ecx, esi
  0004d	50		 push	 eax
  0004e	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN17@Put:

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00051	8b 74 24 1c	 mov	 esi, DWORD PTR __Dest$[esp+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 531  : 		return (_Left == _Right);

  00055	83 f8 ff	 cmp	 eax, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

  00058	75 05		 jne	 SHORT $LN2@Put
$LN12@Put:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

  0005a	c6 44 24 18 01	 mov	 BYTE PTR __Dest$[esp+8], 1
$LN2@Put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1821 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  0005f	43		 inc	 ebx
  00060	83 ef 01	 sub	 edi, 1
  00063	75 ae		 jne	 SHORT $LL4@Put
  00065	5b		 pop	 ebx
$LN3@Put:

; 1822 : 			*_Dest = *_Ptr;
; 1823 : 		return (_Dest);

  00066	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0006a	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  0006e	5f		 pop	 edi
  0006f	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00072	89 08		 mov	 DWORD PTR [eax], ecx
  00074	5e		 pop	 esi

; 1824 : 		}

  00075	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -100				; size = 4
$T2 = -96						; size = 8
__Old_capacity$1$ = -92					; size = 4
__Iosbase$GSCopy$1$ = -88				; size = 4
__Groupstring$5$ = -84					; size = 4
$T3 = -80						; size = 8
$T4 = -80						; size = 8
$T5 = -80						; size = 8
$T6 = -80						; size = 8
$T7 = -80						; size = 8
$T8 = -80						; size = 8
$T9 = -80						; size = 8
__Pg$1$ = -76						; size = 4
__Ctype_fac$1$ = -76					; size = 4
__Prefix$1$ = -72					; size = 4
__Kseparator$1$ = -65					; size = 1
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1761 : 		{	// put formatted integer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 24	 mov	 ebx, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 55 18	 mov	 edx, DWORD PTR __Iosbase$[ebp]
  00034	8b 7d 20	 mov	 edi, DWORD PTR __Buf$[ebp]
  00037	89 45 9c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 55 a8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], edx

; 1762 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  0003d	85 db		 test	 ebx, ebx
  0003f	74 11		 je	 SHORT $LN14@Iput
  00041	8a 07		 mov	 al, BYTE PTR [edi]
  00043	3c 2b		 cmp	 al, 43			; 0000002bH
  00045	74 04		 je	 SHORT $LN13@Iput
  00047	3c 2d		 cmp	 al, 45			; 0000002dH
  00049	75 07		 jne	 SHORT $LN14@Iput
$LN13@Iput:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	eb 02		 jmp	 SHORT $LN406@Iput
$LN14@Iput:
  00052	33 c9		 xor	 ecx, ecx
$LN406@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  00054	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1765 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00057	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  0005c	89 4d b8	 mov	 DWORD PTR __Prefix$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1765 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  0005f	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00064	75 1c		 jne	 SHORT $LN4@Iput
  00066	8d 71 02	 lea	 esi, DWORD PTR [ecx+2]
  00069	3b f3		 cmp	 esi, ebx
  0006b	77 15		 ja	 SHORT $LN4@Iput
  0006d	80 3c 0f 30	 cmp	 BYTE PTR [edi+ecx], 48	; 00000030H
  00071	75 0f		 jne	 SHORT $LN4@Iput
  00073	8a 44 0f 01	 mov	 al, BYTE PTR [edi+ecx+1]
  00077	3c 78		 cmp	 al, 120			; 00000078H
  00079	74 04		 je	 SHORT $LN5@Iput
  0007b	3c 58		 cmp	 al, 88			; 00000058H
  0007d	75 03		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1766 : 			{
; 1767 : 			_Prefix += 2;

  0007f	89 75 b8	 mov	 DWORD PTR __Prefix$1$[ebp], esi
$LN4@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  00082	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00085	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00088	8b ce		 mov	 ecx, esi
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00091	89 75 b4	 mov	 DWORD PTR $T9[ebp+4], esi
  00094	8b 06		 mov	 eax, DWORD PTR [esi]
  00096	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1770 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  00099	8d 45 b0	 lea	 eax, DWORD PTR $T9[ebp]
  0009c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000a9	83 c4 04	 add	 esp, 4
  000ac	89 45 b4	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  000af	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000b6	85 f6		 test	 esi, esi

; 409  : 		if (_Ptr != nullptr)

  000b8	74 13		 je	 SHORT $LN34@Iput

; 410  : 			delete _Ptr->_Decref();

  000ba	8b 06		 mov	 eax, DWORD PTR [esi]
  000bc	8b ce		 mov	 ecx, esi
  000be	ff 50 08	 call	 DWORD PTR [eax+8]
  000c1	8b c8		 mov	 ecx, eax
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 06		 je	 SHORT $LN34@Iput
  000c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c9	6a 01		 push	 1
  000cb	ff 10		 call	 DWORD PTR [eax]
$LN34@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1771 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  000cd	6a 00		 push	 0
  000cf	53		 push	 ebx
  000d0	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 411  : 		}

  000d3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1771 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  000da	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000df	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  000e3	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  000e6	8b 4d b4	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1804 : 		if (_Large_string_engaged())

  000e9	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  000ed	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1772 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  000ee	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  000f1	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	50		 push	 eax
  000fb	57		 push	 edi
  000fc	ff 52 1c	 call	 DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  000ff	8b 55 a8	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00102	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00105	8b 78 04	 mov	 edi, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00108	8b cf		 mov	 ecx, edi
  0010a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0010e	89 7d b4	 mov	 DWORD PTR $T8[ebp+4], edi
  00111	8b 07		 mov	 eax, DWORD PTR [edi]
  00113	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1774 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00116	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
  00119	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00123	83 c4 04	 add	 esp, 4
  00126	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  00128	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0012c	85 ff		 test	 edi, edi

; 409  : 		if (_Ptr != nullptr)

  0012e	74 13		 je	 SHORT $LN62@Iput

; 410  : 			delete _Ptr->_Decref();

  00130	8b 07		 mov	 eax, DWORD PTR [edi]
  00132	8b cf		 mov	 ecx, edi
  00134	ff 50 08	 call	 DWORD PTR [eax+8]
  00137	8b c8		 mov	 ecx, eax
  00139	85 c9		 test	 ecx, ecx
  0013b	74 06		 je	 SHORT $LN62@Iput
  0013d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013f	6a 01		 push	 1
  00141	ff 10		 call	 DWORD PTR [eax]
$LN62@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 133  : 		return (do_grouping());

  00143	8b 06		 mov	 eax, DWORD PTR [esi]
  00145	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00148	51		 push	 ecx
  00149	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 411  : 		}

  0014b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 133  : 		return (do_grouping());

  0014f	ff 50 14	 call	 DWORD PTR [eax+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00152	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00156	8d 7d c0	 lea	 edi, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1775 : 		const string _Grouping = _Punct_fac.grouping();

  00159	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0015d	0f 43 7d c0	 cmovae	 edi, DWORD PTR __Grouping$[ebp]
  00161	89 7d b4	 mov	 DWORD PTR __Pg$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1777 : 		if (*_Pg != CHAR_MAX && '\0' < *_Pg)

  00164	8a 07		 mov	 al, BYTE PTR [edi]
  00166	3c 7f		 cmp	 al, 127			; 0000007fH
  00168	0f 84 b1 01 00
	00		 je	 $LN402@Iput
  0016e	84 c0		 test	 al, al
  00170	0f 8e a9 01 00
	00		 jle	 $LN402@Iput

; 128  : 		return (do_thousands_sep());

  00176	8b 06		 mov	 eax, DWORD PTR [esi]
  00178	8b ce		 mov	 ecx, esi
  0017a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0017d	ff d0		 call	 eax

; 1778 : 			{	// grouping specified, add thousands separators
; 1779 : 			const _Elem _Kseparator = _Punct_fac.thousands_sep();

  0017f	88 45 bf	 mov	 BYTE PTR __Kseparator$1$[ebp], al

; 1781 : 				&& (size_t)*_Pg < _Count - _Prefix)

  00182	8a 07		 mov	 al, BYTE PTR [edi]
  00184	3c 7f		 cmp	 al, 127			; 0000007fH
  00186	0f 84 93 01 00
	00		 je	 $LN402@Iput
  0018c	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  0018f	90		 npad	 1
$LL2@Iput:
  00190	8b 55 b8	 mov	 edx, DWORD PTR __Prefix$1$[ebp]
  00193	84 c0		 test	 al, al
  00195	0f 8e 8a 01 00
	00		 jle	 $LN3@Iput
  0019b	0f be c8	 movsx	 ecx, al
  0019e	8b c3		 mov	 eax, ebx
  001a0	2b c2		 sub	 eax, edx
  001a2	3b c8		 cmp	 ecx, eax
  001a4	0f 83 7b 01 00
	00		 jae	 $LN3@Iput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1830 : 		if (_Mysize < _Off)

  001aa	8b 7d e8	 mov	 edi, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1783 : 				_Count -= *_Pg;

  001ad	2b d9		 sub	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1830 : 		if (_Mysize < _Off)

  001af	3b fb		 cmp	 edi, ebx
  001b1	0f 82 49 03 00
	00		 jb	 $LN395@Iput

; 2789 : 		const size_type _Old_size = _My_data._Mysize;

  001b7	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]
  001ba	8b c1		 mov	 eax, ecx
  001bc	2b c7		 sub	 eax, edi
  001be	89 4d a4	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  001c1	83 f8 01	 cmp	 eax, 1
  001c4	72 3b		 jb	 SHORT $LN85@Iput

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  001c6	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001c9	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  001cc	89 45 e8	 mov	 DWORD PTR __Groupstring$[ebp+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  001cf	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  001d2	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  001d5	2b fb		 sub	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  001d7	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  001d8	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  001d9	8d 34 03	 lea	 esi, DWORD PTR [ebx+eax]

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  001dc	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  001df	56		 push	 esi
  001e0	50		 push	 eax
  001e1	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  001e6	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  001ea	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  001ed	0f b6 c1	 movzx	 eax, cl
  001f0	66 c1 e1 08	 shl	 cx, 8
  001f4	66 0b c8	 or	 cx, ax
  001f7	88 0e		 mov	 BYTE PTR [esi], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2797 : 			return (*this);

  001f9	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  001fc	e9 00 01 00 00	 jmp	 $LN109@Iput
$LN85@Iput:

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

  00201	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00206	2b c7		 sub	 eax, edi

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00208	83 f8 01	 cmp	 eax, 1
  0020b	0f 82 ea 02 00
	00		 jb	 $LN396@Iput

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00211	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00214	83 ce 0f	 or	 esi, 15			; 0000000fH
  00217	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0021d	76 07		 jbe	 SHORT $LN130@Iput

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0021f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00224	eb 1e		 jmp	 SHORT $LN129@Iput
$LN130@Iput:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00226	8b d1		 mov	 edx, ecx
  00228	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0022d	d1 ea		 shr	 edx, 1
  0022f	2b c2		 sub	 eax, edx
  00231	3b c8		 cmp	 ecx, eax
  00233	76 07		 jbe	 SHORT $LN131@Iput

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00235	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0023a	eb 08		 jmp	 SHORT $LN129@Iput
$LN131@Iput:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0023c	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0023f	3b f0		 cmp	 esi, eax
  00241	0f 42 f0	 cmovb	 esi, eax
$LN129@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00244	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00247	50		 push	 eax
  00248	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0024b	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00250	83 7d a4 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  00254	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  00257	89 45 ac	 mov	 DWORD PTR __Groupstring$5$[ebp], eax
  0025a	89 4d e8	 mov	 DWORD PTR __Groupstring$[ebp+16], ecx
  0025d	89 75 ec	 mov	 DWORD PTR __Groupstring$[ebp+20], esi
  00260	53		 push	 ebx
  00261	72 65		 jb	 SHORT $LN108@Iput

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  00263	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00266	56		 push	 esi
  00267	50		 push	 eax
  00268	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0026d	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00271	2b fb		 sub	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00273	8b 55 ac	 mov	 edx, DWORD PTR __Groupstring$5$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00276	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00277	0f b6 c1	 movzx	 eax, cl
  0027a	66 c1 e1 08	 shl	 cx, 8
  0027e	66 0b c8	 or	 cx, ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00281	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00284	57		 push	 edi
  00285	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00286	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00289	88 0c 13	 mov	 BYTE PTR [ebx+edx], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0028c	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0028e	50		 push	 eax
  0028f	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00294	8b 4d a4	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00297	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0029a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0029b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002a1	72 16		 jb	 SHORT $LN185@Iput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  002a3	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  002a6	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002a9	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002ab	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  002ae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b1	0f 87 4e 02 00
	00		 ja	 $LN182@Iput

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  002b7	8b f2		 mov	 esi, edx
$LN185@Iput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  002b9	51		 push	 ecx
  002ba	56		 push	 esi
  002bb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

  002c0	8b 75 ac	 mov	 esi, DWORD PTR __Groupstring$5$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  002c3	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3944 : 		else

  002c6	eb 36		 jmp	 SHORT $LN407@Iput
$LN108@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  002c8	8b 75 ac	 mov	 esi, DWORD PTR __Groupstring$5$[ebp]
  002cb	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  002ce	50		 push	 eax
  002cf	56		 push	 esi
  002d0	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  002d5	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002d9	2b fb		 sub	 edi, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  002db	0f b6 c1	 movzx	 eax, cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002de	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  002df	66 c1 e1 08	 shl	 cx, 8
  002e3	66 0b c8	 or	 cx, ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002e6	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  002e9	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  002eb	88 0c 33	 mov	 BYTE PTR [ebx+esi], cl

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  002ee	57		 push	 edi
  002ef	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002f0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  002f3	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 _memcpy
  002fb	83 c4 18	 add	 esp, 24			; 00000018H
$LN407@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1785 : 				if ('\0' < _Pg[1])

  002fe	89 75 d8	 mov	 DWORD PTR __Groupstring$[ebp], esi
$LN109@Iput:
  00301	8b 7d b4	 mov	 edi, DWORD PTR __Pg$1$[ebp]
  00304	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00308	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  0030b	0f 4e c7	 cmovle	 eax, edi
  0030e	8b f8		 mov	 edi, eax
  00310	89 45 b4	 mov	 DWORD PTR __Pg$1$[ebp], eax
  00313	8a 07		 mov	 al, BYTE PTR [edi]
  00315	3c 7f		 cmp	 al, 127			; 0000007fH
  00317	0f 85 73 fe ff
	ff		 jne	 $LL2@Iput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0031d	eb 03		 jmp	 SHORT $LN410@Iput
$LN402@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1781 : 				&& (size_t)*_Pg < _Count - _Prefix)

  0031f	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
$LN410@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00322	8b 55 b8	 mov	 edx, DWORD PTR __Prefix$1$[ebp]
$LN3@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1792 : 			|| (size_t)_Iosbase.width() <= _Count

  00325	8b 45 a8	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00328	8b 5d e8	 mov	 ebx, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1792 : 			|| (size_t)_Iosbase.width() <= _Count

  0032b	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0032f	8b 78 20	 mov	 edi, DWORD PTR [eax+32]
  00332	7c 0e		 jl	 SHORT $LN16@Iput
  00334	7f 04		 jg	 SHORT $LN401@Iput
  00336	85 ff		 test	 edi, edi
  00338	74 08		 je	 SHORT $LN16@Iput
$LN401@Iput:
  0033a	3b fb		 cmp	 edi, ebx
  0033c	76 04		 jbe	 SHORT $LN16@Iput
  0033e	2b fb		 sub	 edi, ebx
  00340	eb 02		 jmp	 SHORT $LN17@Iput
$LN16@Iput:
  00342	33 ff		 xor	 edi, edi
$LN17@Iput:

; 1793 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1794 : 
; 1795 : 		ios_base::fmtflags _Adjustfield =
; 1796 : 			_Iosbase.flags() & ios_base::adjustfield;

  00344	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00347	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1797 : 		if (_Adjustfield != ios_base::left
; 1798 : 			&& _Adjustfield != ios_base::internal)

  0034c	83 f8 40	 cmp	 eax, 64			; 00000040H
  0034f	0f 84 98 00 00
	00		 je	 $LN10@Iput
  00355	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0035a	74 4b		 je	 SHORT $LN399@Iput

; 1799 : 			{	// put leading fill
; 1800 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0035c	57		 push	 edi
  0035d	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00360	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  00363	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00366	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00369	50		 push	 eax
  0036a	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0036d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00372	8b 75 b8	 mov	 esi, DWORD PTR __Prefix$1$[ebp]
  00375	8b c8		 mov	 ecx, eax
  00377	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00379	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0037d	56		 push	 esi
  0037e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00380	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00383	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00386	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  00389	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  0038c	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00390	50		 push	 eax
  00391	ff 71 04	 push	 DWORD PTR [ecx+4]
  00394	8d 45 b0	 lea	 eax, DWORD PTR $T6[ebp]
  00397	ff 31		 push	 DWORD PTR [ecx]
  00399	50		 push	 eax
  0039a	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0039d	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  003a2	83 c4 30	 add	 esp, 48			; 00000030H
  003a5	eb 6a		 jmp	 SHORT $LN408@Iput
$LN399@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003a7	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  003ab	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1806 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003ae	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1804 : 		if (_Large_string_engaged())

  003af	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1806 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003b2	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  003b5	50		 push	 eax
  003b6	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  003b9	8d 45 b0	 lea	 eax, DWORD PTR $T5[ebp]
  003bc	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  003bf	50		 push	 eax
  003c0	56		 push	 esi
  003c1	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  003c6	8b c8		 mov	 ecx, eax

; 1807 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  003c8	57		 push	 edi
  003c9	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  003cc	8b 01		 mov	 eax, DWORD PTR [ecx]
  003ce	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  003d1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003d4	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  003d7	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  003da	ff 71 04	 push	 DWORD PTR [ecx+4]
  003dd	ff 31		 push	 DWORD PTR [ecx]
  003df	50		 push	 eax
  003e0	56		 push	 esi
  003e1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003e6	83 c4 30	 add	 esp, 48			; 00000030H

; 1808 : 			_Fillcount = 0;

  003e9	33 ff		 xor	 edi, edi

; 1809 : 			}
; 1810 : 		else

  003eb	eb 21		 jmp	 SHORT $LN409@Iput
$LN10@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  003ed	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  003f1	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1811 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003f4	52		 push	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1804 : 		if (_Large_string_engaged())

  003f5	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1811 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003f8	50		 push	 eax
  003f9	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  003fc	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  003ff	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00402	50		 push	 eax
  00403	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00406	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0040b	83 c4 18	 add	 esp, 24			; 00000018H
$LN409@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0040e	8b 75 b8	 mov	 esi, DWORD PTR __Prefix$1$[ebp]
$LN408@Iput:
  00411	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00413	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00417	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0041a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0041d	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  00420	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00424	2b de		 sub	 ebx, esi
  00426	53		 push	 ebx
  00427	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3206 : 		return (_My_data._Myptr()[_Off]);

  0042a	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0042c	50		 push	 eax
  0042d	52		 push	 edx
  0042e	51		 push	 ecx
  0042f	8d 45 a0	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  00432	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00435	50		 push	 eax
  00436	53		 push	 ebx
  00437	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  0043c	8b 55 a8	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0043f	8b 75 9c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00442	57		 push	 edi
  00443	8b 08		 mov	 ecx, DWORD PTR [eax]
  00445	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00448	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  0044b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0044e	50		 push	 eax
  0044f	51		 push	 ecx
  00450	56		 push	 esi
  00451	53		 push	 ebx
  00452	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  00455	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0045c	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00463	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00468	8b 55 d4	 mov	 edx, DWORD PTR __Grouping$[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0046b	83 c4 30	 add	 esp, 48			; 00000030H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0046e	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00471	72 28		 jb	 SHORT $LN317@Iput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00473	8b 4d c0	 mov	 ecx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00476	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00477	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00479	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0047f	72 10		 jb	 SHORT $LN316@Iput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00481	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00484	83 c2 23	 add	 edx, 35			; 00000023H
  00487	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00489	83 c0 fc	 add	 eax, -4			; fffffffcH
  0048c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0048f	77 74		 ja	 SHORT $LN182@Iput
$LN316@Iput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00491	52		 push	 edx
  00492	51		 push	 ecx
  00493	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00498	83 c4 08	 add	 esp, 8
$LN317@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0049b	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]

; 3995 : 		_My_data._Mysize = 0;

  0049e	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  004a5	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  004ac	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  004b0	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  004b3	72 28		 jb	 SHORT $LN377@Iput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b5	8b 4d d8	 mov	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  004b8	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b9	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  004bb	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  004c1	72 10		 jb	 SHORT $LN376@Iput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  004c3	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  004c6	83 c2 23	 add	 edx, 35			; 00000023H
  004c9	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004cb	83 c0 fc	 add	 eax, -4			; fffffffcH
  004ce	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004d1	77 37		 ja	 SHORT $LN412@Iput
$LN376@Iput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  004d3	52		 push	 edx
  004d4	51		 push	 ecx
  004d5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004da	83 c4 08	 add	 esp, 8
$LN377@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  004dd	8b c6		 mov	 eax, esi

; 1816 : 		}

  004df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e9	59		 pop	 ecx
  004ea	5f		 pop	 edi
  004eb	5e		 pop	 esi
  004ec	5b		 pop	 ebx
  004ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f0	33 cd		 xor	 ecx, ebp
  004f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f7	8b e5		 mov	 esp, ebp
  004f9	5d		 pop	 ebp
  004fa	c3		 ret	 0
$LN396@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3925 : 			_Xlen();	// result too long

  004fb	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN395@Iput:

; 1832 : 			_Xran();

  00500	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN182@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1816 : 		}

  00505	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN412@Iput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0050a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN405@Iput:
  0050f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T8[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1734 : 		char *_Ptr = _Fmt;
; 1735 : 		*_Ptr++ = '%';
; 1736 : 
; 1737 : 		if (_Flags & ios_base::showpos)

  00000	8b 44 24 10	 mov	 eax, DWORD PTR __Flags$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Fmt$[esp]
  00009	57		 push	 edi
  0000a	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00010	a8 20		 test	 al, 32			; 00000020H
  00012	74 04		 je	 SHORT $LN2@Ifmt

; 1738 : 			*_Ptr++ = '+';

  00014	c6 01 2b	 mov	 BYTE PTR [ecx], 43	; 0000002bH
  00017	41		 inc	 ecx
$LN2@Ifmt:

; 1739 : 		if (_Flags & ios_base::showbase)

  00018	a8 08		 test	 al, 8
  0001a	74 04		 je	 SHORT $LN3@Ifmt

; 1740 : 			*_Ptr++ = '#';

  0001c	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  0001f	41		 inc	 ecx
$LN3@Ifmt:

; 1741 : 		if (_Spec[0] != 'L')

  00020	8b 7c 24 14	 mov	 edi, DWORD PTR __Spec$[esp+4]
  00024	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00027	53		 push	 ebx
  00028	8a 1f		 mov	 bl, BYTE PTR [edi]
  0002a	80 fb 4c	 cmp	 bl, 76			; 0000004cH
  0002d	74 04		 je	 SHORT $LN4@Ifmt

; 1742 : 			*_Ptr++ = _Spec[0];	// qualifier

  0002f	88 19		 mov	 BYTE PTR [ecx], bl

; 1743 : 		else

  00031	eb 0b		 jmp	 SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1744 : 
; 1745 : 			{	/* change L to I64 */
; 1746 : 			*_Ptr++ = 'I';

  00033	c6 01 49	 mov	 BYTE PTR [ecx], 73	; 00000049H

; 1747 : 			*_Ptr++ = '6';

  00036	66 c7 02 36 34	 mov	 WORD PTR [edx], 13366	; 00003436H

; 1748 : 			*_Ptr++ = '4';

  0003b	83 c2 02	 add	 edx, 2
$LN5@Ifmt:

; 1749 : 			}
; 1750 : 
; 1751 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  0003e	8b c8		 mov	 ecx, eax
  00040	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  00046	5b		 pop	 ebx

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00047	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  0004d	75 0d		 jne	 SHORT $LN9@Ifmt
  0004f	b0 6f		 mov	 al, 111			; 0000006fH
  00051	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  00053	8b c6		 mov	 eax, esi
  00055	5f		 pop	 edi
  00056	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  0005a	5e		 pop	 esi

; 1757 : 		}

  0005b	c3		 ret	 0
$LN9@Ifmt:

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  0005c	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00062	74 0e		 je	 SHORT $LN7@Ifmt
  00064	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00067	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  00069	8b c6		 mov	 eax, esi
  0006b	5f		 pop	 edi
  0006c	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  00070	5e		 pop	 esi

; 1757 : 		}

  00071	c3		 ret	 0
$LN7@Ifmt:

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00072	c0 e0 03	 shl	 al, 3
  00075	f6 d0		 not	 al
  00077	24 20		 and	 al, 32			; 00000020H
  00079	0c 58		 or	 al, 88			; 00000058H
  0007b	88 02		 mov	 BYTE PTR [edx], al

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';
; 1756 : 		return (_Fmt);

  0007d	8b c6		 mov	 eax, esi
  0007f	5f		 pop	 edi
  00080	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0
  00084	5e		 pop	 esi

; 1757 : 		}

  00085	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -108				; size = 4
__Iosbase$GSCopy$1$ = -104				; size = 4
$T2 = -100						; size = 8
__New_capacity$1$ = -96					; size = 4
tv1565 = -96						; size = 4
__Old_capacity$1$ = -92					; size = 4
__Eoff$1$ = -92						; size = 4
__Dp$ = -88						; size = 2
$T3 = -84						; size = 8
$T4 = -84						; size = 8
$T5 = -84						; size = 8
$T6 = -84						; size = 8
$T7 = -84						; size = 8
$T8 = -84						; size = 8
$T9 = -84						; size = 8
__Pg$1$ = -80						; size = 4
__Ctype_fac$1$ = -80					; size = 4
__Prefix$1$ = -76					; size = 4
__Off$1$ = -72						; size = 4
__Kseparator$1$ = -65					; size = 1
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1663 : 		{	// put formatted floating-point to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 24	 mov	 esi, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 5d 18	 mov	 ebx, DWORD PTR __Iosbase$[ebp]
  00034	8b 7d 20	 mov	 edi, DWORD PTR __Buf$[ebp]
  00037	89 45 94	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 5d 98	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ebx

; 1664 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  0003d	85 f6		 test	 esi, esi
  0003f	74 11		 je	 SHORT $LN16@Fput
  00041	8a 07		 mov	 al, BYTE PTR [edi]
  00043	3c 2b		 cmp	 al, 43			; 0000002bH
  00045	74 04		 je	 SHORT $LN15@Fput
  00047	3c 2d		 cmp	 al, 45			; 0000002dH
  00049	75 07		 jne	 SHORT $LN16@Fput
$LN15@Fput:
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	eb 02		 jmp	 SHORT $LN447@Fput
$LN16@Fput:
  00052	33 c9		 xor	 ecx, ecx
$LN447@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  00054	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1666 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  00057	25 00 30 00 00	 and	 eax, 12288		; 00003000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  0005c	89 4d b4	 mov	 DWORD PTR __Prefix$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1666 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  0005f	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00064	74 07		 je	 SHORT $LN4@Fput

; 1667 : 			_Exps = "eE";

  00066	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02MDKMJEGG@eE@

; 1668 : 		else

  0006b	eb 23		 jmp	 SHORT $LN6@Fput
$LN4@Fput:

; 1669 : 			{	// correct for hexadecimal floating-point
; 1670 : 			_Exps = "pP";
; 1671 : 			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1672 : 				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  0006d	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00070	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02OOPEBDOJ@pP@
  00075	3b c6		 cmp	 eax, esi
  00077	77 17		 ja	 SHORT $LN6@Fput
  00079	80 3c 0f 30	 cmp	 BYTE PTR [edi+ecx], 48	; 00000030H
  0007d	75 11		 jne	 SHORT $LN6@Fput
  0007f	8a 4c 0f 01	 mov	 cl, BYTE PTR [edi+ecx+1]
  00083	80 f9 78	 cmp	 cl, 120			; 00000078H
  00086	74 05		 je	 SHORT $LN7@Fput
  00088	80 f9 58	 cmp	 cl, 88			; 00000058H
  0008b	75 03		 jne	 SHORT $LN6@Fput
$LN7@Fput:

; 1673 : 				_Prefix += 2;

  0008d	89 45 b4	 mov	 DWORD PTR __Prefix$1$[ebp], eax
$LN6@Fput:

; 1674 : 			}
; 1675 : 		const size_t _Eoff =
; 1676 : 			_CSTD strcspn(&_Buf[0], _Exps);	// find exponent

  00090	52		 push	 edx
  00091	57		 push	 edi
  00092	e8 00 00 00 00	 call	 _strcspn
  00097	89 45 a4	 mov	 DWORD PTR __Eoff$1$[ebp], eax

; 1677 : 		char _Dp[2] = {"."};

  0009a	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  0009f	66 89 45 a8	 mov	 WORD PTR __Dp$[ebp], ax

; 1678 : 		_Dp[0] = _CSTD localeconv()->decimal_point[0];

  000a3	e8 00 00 00 00	 call	 _localeconv
  000a8	8b 00		 mov	 eax, DWORD PTR [eax]
  000aa	8a 00		 mov	 al, BYTE PTR [eax]
  000ac	88 45 a8	 mov	 BYTE PTR __Dp$[ebp], al

; 1679 : 		const size_t _Poff =
; 1680 : 			_CSTD strcspn(&_Buf[0], &_Dp[0]);	// find decimal point

  000af	8d 45 a8	 lea	 eax, DWORD PTR __Dp$[ebp]
  000b2	50		 push	 eax
  000b3	57		 push	 edi
  000b4	e8 00 00 00 00	 call	 _strcspn
  000b9	89 45 b8	 mov	 DWORD PTR __Off$1$[ebp], eax
  000bc	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  000bf	8b 43 30	 mov	 eax, DWORD PTR [ebx+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  000c2	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  000c5	8b cb		 mov	 ecx, ebx
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ce	89 5d b0	 mov	 DWORD PTR $T9[ebp+4], ebx
  000d1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d3	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1682 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000d6	8d 45 ac	 lea	 eax, DWORD PTR $T9[ebp]
  000d9	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000e6	83 c4 04	 add	 esp, 4
  000e9	89 45 b0	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  000ec	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000f3	85 db		 test	 ebx, ebx

; 409  : 		if (_Ptr != nullptr)

  000f5	74 13		 je	 SHORT $LN36@Fput

; 410  : 			delete _Ptr->_Decref();

  000f7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f9	8b cb		 mov	 ecx, ebx
  000fb	ff 50 08	 call	 DWORD PTR [eax+8]
  000fe	8b c8		 mov	 ecx, eax
  00100	85 c9		 test	 ecx, ecx
  00102	74 06		 je	 SHORT $LN36@Fput
  00104	8b 01		 mov	 eax, DWORD PTR [ecx]
  00106	6a 01		 push	 1
  00108	ff 10		 call	 DWORD PTR [eax]
$LN36@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1683 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  0010a	6a 00		 push	 0
  0010c	56		 push	 esi
  0010d	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 411  : 		}

  00110	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1683 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

  00117	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0011c	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00120	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  00123	8b 4d b0	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1804 : 		if (_Large_string_engaged())

  00126	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  0012a	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1684 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  0012b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0012e	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	50		 push	 eax
  00138	57		 push	 edi
  00139	ff 52 1c	 call	 DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  0013c	8b 55 98	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  0013f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00142	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00145	8b cb		 mov	 ecx, ebx
  00147	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0014b	89 5d b0	 mov	 DWORD PTR $T8[ebp+4], ebx
  0014e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00150	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1686 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00153	8d 45 ac	 lea	 eax, DWORD PTR $T8[ebp]
  00156	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00160	83 c4 04	 add	 esp, 4
  00163	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  00165	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00169	85 db		 test	 ebx, ebx

; 409  : 		if (_Ptr != nullptr)

  0016b	74 13		 je	 SHORT $LN64@Fput

; 410  : 			delete _Ptr->_Decref();

  0016d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0016f	8b cb		 mov	 ecx, ebx
  00171	ff 50 08	 call	 DWORD PTR [eax+8]
  00174	8b c8		 mov	 ecx, eax
  00176	85 c9		 test	 ecx, ecx
  00178	74 06		 je	 SHORT $LN64@Fput
  0017a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017c	6a 01		 push	 1
  0017e	ff 10		 call	 DWORD PTR [eax]
$LN64@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 133  : 		return (do_grouping());

  00180	8b 07		 mov	 eax, DWORD PTR [edi]
  00182	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00185	51		 push	 ecx
  00186	8b cf		 mov	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 411  : 		}

  00188	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 133  : 		return (do_grouping());

  0018c	ff 50 14	 call	 DWORD PTR [eax+20]

; 128  : 		return (do_thousands_sep());

  0018f	8b 07		 mov	 eax, DWORD PTR [edi]
  00191	8b cf		 mov	 ecx, edi

; 1687 : 		const string _Grouping = _Punct_fac.grouping();

  00193	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 128  : 		return (do_thousands_sep());

  00197	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0019a	ff d0		 call	 eax

; 1688 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();
; 1689 : 
; 1690 : 		if (_Poff != _Count)

  0019c	8b 4d b8	 mov	 ecx, DWORD PTR __Off$1$[ebp]
  0019f	8a d8		 mov	 bl, al
  001a1	88 5d bf	 mov	 BYTE PTR __Kseparator$1$[ebp], bl
  001a4	3b ce		 cmp	 ecx, esi
  001a6	74 20		 je	 SHORT $LN448@Fput

; 123  : 		return (do_decimal_point());

  001a8	8b 07		 mov	 eax, DWORD PTR [edi]
  001aa	8b cf		 mov	 ecx, edi
  001ac	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001af	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001b1	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 123  : 		return (do_decimal_point());

  001b5	8a c8		 mov	 cl, al

; 1691 : 			_Groupstring[_Poff] = _Punct_fac.decimal_point();

  001b7	8b 55 b8	 mov	 edx, DWORD PTR __Off$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  001ba	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  001bd	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1691 : 			_Groupstring[_Poff] = _Punct_fac.decimal_point();

  001c1	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  001c4	8b ca		 mov	 ecx, edx

; 1692 : 
; 1693 : 		size_t _Off = _Poff == _Count ? _Eoff : _Poff;

  001c6	3b ce		 cmp	 ecx, esi
$LN448@Fput:
  001c8	0f 44 4d a4	 cmove	 ecx, DWORD PTR __Eoff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  001cc	8d 45 c0	 lea	 eax, DWORD PTR __Grouping$[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001cf	83 7d d4 10	 cmp	 DWORD PTR __Grouping$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

  001d3	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  001d6	0f 43 45 c0	 cmovae	 eax, DWORD PTR __Grouping$[ebp]
  001da	89 45 b0	 mov	 DWORD PTR __Pg$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

  001dd	8a 00		 mov	 al, BYTE PTR [eax]
  001df	3c 7f		 cmp	 al, 127			; 0000007fH
  001e1	0f 84 e3 01 00
	00		 je	 $LN3@Fput
$LL2@Fput:
  001e7	84 c0		 test	 al, al
  001e9	0f 8e db 01 00
	00		 jle	 $LN3@Fput
  001ef	0f be d0	 movsx	 edx, al
  001f2	8b c1		 mov	 eax, ecx
  001f4	2b 45 b4	 sub	 eax, DWORD PTR __Prefix$1$[ebp]
  001f7	3b d0		 cmp	 edx, eax
  001f9	0f 83 cb 01 00
	00		 jae	 $LN3@Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1830 : 		if (_Mysize < _Off)

  001ff	8b 7d e8	 mov	 edi, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1698 : 			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);

  00202	2b ca		 sub	 ecx, edx
  00204	89 4d b8	 mov	 DWORD PTR __Off$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00207	3b f9		 cmp	 edi, ecx
  00209	0f 82 95 03 00
	00		 jb	 $LN437@Fput

; 2789 : 		const size_type _Old_size = _My_data._Mysize;

  0020f	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]
  00212	8b c2		 mov	 eax, edx
  00214	2b c7		 sub	 eax, edi
  00216	89 55 a4	 mov	 DWORD PTR __Old_capacity$1$[ebp], edx

; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  00219	83 f8 01	 cmp	 eax, 1
  0021c	72 3a		 jb	 SHORT $LN102@Fput

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  0021e	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00221	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  00224	89 45 e8	 mov	 DWORD PTR __Groupstring$[ebp+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00227	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  0022a	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0022d	2b f9		 sub	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  0022f	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00230	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  00231	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00234	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00237	56		 push	 esi
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0023e	0f be cb	 movsx	 ecx, bl

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00244	0f b6 c1	 movzx	 eax, cl
  00247	66 c1 e1 08	 shl	 cx, 8
  0024b	66 0b c8	 or	 cx, ax
  0024e	88 0e		 mov	 BYTE PTR [esi], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2797 : 			return (*this);

  00250	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  00253	e9 52 01 00 00	 jmp	 $LN126@Fput
$LN102@Fput:

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

  00258	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0025d	2b c7		 sub	 eax, edi

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0025f	83 f8 01	 cmp	 eax, 1
  00262	0f 82 37 03 00
	00		 jb	 $LN438@Fput

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00268	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0026b	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0026e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00274	76 07		 jbe	 SHORT $LN147@Fput

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00276	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0027b	eb 24		 jmp	 SHORT $LN449@Fput
$LN147@Fput:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0027d	8b c2		 mov	 eax, edx
  0027f	d1 e8		 shr	 eax, 1
  00281	89 45 a0	 mov	 DWORD PTR tv1565[ebp], eax
  00284	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00289	2b 45 a0	 sub	 eax, DWORD PTR tv1565[ebp]
  0028c	3b d0		 cmp	 edx, eax
  0028e	76 07		 jbe	 SHORT $LN148@Fput

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00290	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00295	eb 0a		 jmp	 SHORT $LN449@Fput
$LN148@Fput:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00297	8b 45 a0	 mov	 eax, DWORD PTR tv1565[ebp]
  0029a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0029c	3b d8		 cmp	 ebx, eax
  0029e	0f 42 d8	 cmovb	 ebx, eax
$LN449@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  002a1	89 5d a0	 mov	 DWORD PTR __New_capacity$1$[ebp], ebx
  002a4	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  002a5	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  002ab	72 32		 jb	 SHORT $LN179@Fput

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  002ad	8d 43 23	 lea	 eax, DWORD PTR [ebx+35]

; 94   : 	if (_Block_size <= _Bytes)

  002b0	b9 ff ff ff ff	 mov	 ecx, -1
  002b5	3b c3		 cmp	 eax, ebx
  002b7	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002c0	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  002c3	85 c0		 test	 eax, eax
  002c5	0f 84 de 02 00
	00		 je	 $LN188@Fput

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  002cb	8b 4d b8	 mov	 ecx, DWORD PTR __Off$1$[ebp]

; 103  : 		& ~(_Big_allocation_alignment - 1));

  002ce	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  002d1	8b 55 a4	 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 103  : 		& ~(_Big_allocation_alignment - 1));

  002d4	83 e3 e0	 and	 ebx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  002d7	89 43 fc	 mov	 DWORD PTR [ebx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  002da	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
  002dd	eb 1c		 jmp	 SHORT $LN178@Fput
$LN179@Fput:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  002df	85 db		 test	 ebx, ebx
  002e1	74 16		 je	 SHORT $LN180@Fput

; 52   : 		return (::operator new(_Bytes));

  002e3	53		 push	 ebx
  002e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 190  : 		return (_Traits::_Allocate(_Bytes));

  002e9	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]

; 52   : 		return (::operator new(_Bytes));

  002ec	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  002ef	8b 4d b8	 mov	 ecx, DWORD PTR __Off$1$[ebp]
  002f2	8b d8		 mov	 ebx, eax
  002f4	8b 55 a4	 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]
  002f7	eb 02		 jmp	 SHORT $LN178@Fput
$LN180@Fput:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  002f9	33 db		 xor	 ebx, ebx
$LN178@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  002fb	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  002fe	89 45 e8	 mov	 DWORD PTR __Groupstring$[ebp+16], eax

; 3935 : 		_My_data._Myres = _New_capacity;

  00301	8b 45 a0	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  00304	89 45 ec	 mov	 DWORD PTR __Groupstring$[ebp+20], eax

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00307	51		 push	 ecx
  00308	83 fa 10	 cmp	 edx, 16			; 00000010H
  0030b	72 5f		 jb	 SHORT $LN125@Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0030d	56		 push	 esi
  0030e	53		 push	 ebx
  0030f	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00314	8b 55 b8	 mov	 edx, DWORD PTR __Off$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00317	2b fa		 sub	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00319	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0031d	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0031e	0f b6 c1	 movzx	 eax, cl
  00321	66 c1 e1 08	 shl	 cx, 8
  00325	66 0b c8	 or	 cx, ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00328	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0032b	57		 push	 edi
  0032c	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0032d	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00330	88 0c 13	 mov	 BYTE PTR [ebx+edx], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00333	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0033b	8b 4d a4	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0033e	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00341	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00342	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00348	72 16		 jb	 SHORT $LN228@Fput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0034a	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0034d	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00350	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00352	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00355	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00358	0f 87 4b 02 00
	00		 ja	 $LN188@Fput

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0035e	8b f2		 mov	 esi, edx
$LN228@Fput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00360	51		 push	 ecx
  00361	56		 push	 esi
  00362	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00367	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3944 : 		else

  0036a	eb 36		 jmp	 SHORT $LN450@Fput
$LN125@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0036c	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0036f	50		 push	 eax
  00370	53		 push	 ebx
  00371	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00376	0f be 4d bf	 movsx	 ecx, BYTE PTR __Kseparator$1$[ebp]
  0037a	8b 55 b8	 mov	 edx, DWORD PTR __Off$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0037d	2b fa		 sub	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0037f	0f b6 c1	 movzx	 eax, cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00382	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00383	66 c1 e1 08	 shl	 cx, 8
  00387	66 0b c8	 or	 cx, ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0038a	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0038d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0038f	88 0c 13	 mov	 BYTE PTR [ebx+edx], cl

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00392	57		 push	 edi
  00393	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00394	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00397	03 c3		 add	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00399	50		 push	 eax
  0039a	e8 00 00 00 00	 call	 _memcpy
  0039f	83 c4 18	 add	 esp, 24			; 00000018H
$LN450@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1699 : 			if ('\0' < _Pg[1])

  003a2	8b f3		 mov	 esi, ebx
  003a4	8a 5d bf	 mov	 bl, BYTE PTR __Kseparator$1$[ebp]
  003a7	89 75 d8	 mov	 DWORD PTR __Groupstring$[ebp], esi
$LN126@Fput:
  003aa	8b 55 b0	 mov	 edx, DWORD PTR __Pg$1$[ebp]
  003ad	80 7a 01 00	 cmp	 BYTE PTR [edx+1], 0
  003b1	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  003b4	0f 4e c2	 cmovle	 eax, edx
  003b7	8b d0		 mov	 edx, eax
  003b9	89 55 b0	 mov	 DWORD PTR __Pg$1$[ebp], edx
  003bc	8a 02		 mov	 al, BYTE PTR [edx]
  003be	3c 7f		 cmp	 al, 127			; 0000007fH
  003c0	74 08		 je	 SHORT $LN3@Fput

; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

  003c2	8b 4d b8	 mov	 ecx, DWORD PTR __Off$1$[ebp]
  003c5	e9 1d fe ff ff	 jmp	 $LL2@Fput
$LN3@Fput:

; 1705 : 			|| (size_t)_Iosbase.width() <= _Count

  003ca	8b 45 98	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  003cd	8b 5d e8	 mov	 ebx, DWORD PTR __Groupstring$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1705 : 			|| (size_t)_Iosbase.width() <= _Count

  003d0	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  003d4	8b 78 20	 mov	 edi, DWORD PTR [eax+32]
  003d7	7c 0e		 jl	 SHORT $LN18@Fput
  003d9	7f 04		 jg	 SHORT $LN443@Fput
  003db	85 ff		 test	 edi, edi
  003dd	74 08		 je	 SHORT $LN18@Fput
$LN443@Fput:
  003df	3b fb		 cmp	 edi, ebx
  003e1	76 04		 jbe	 SHORT $LN18@Fput
  003e3	2b fb		 sub	 edi, ebx
  003e5	eb 02		 jmp	 SHORT $LN19@Fput
$LN18@Fput:
  003e7	33 ff		 xor	 edi, edi
$LN19@Fput:

; 1706 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1707 : 
; 1708 : 		ios_base::fmtflags _Adjustfield =
; 1709 : 			_Iosbase.flags() & ios_base::adjustfield;

  003e9	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  003ec	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1710 : 		if (_Adjustfield != ios_base::left
; 1711 : 			&& _Adjustfield != ios_base::internal)

  003f1	83 f8 40	 cmp	 eax, 64			; 00000040H
  003f4	0f 84 98 00 00
	00		 je	 $LN12@Fput
  003fa	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  003ff	74 49		 je	 SHORT $LN441@Fput

; 1713 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00401	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  00404	8d 45 ac	 lea	 eax, DWORD PTR $T7[ebp]
  00407	57		 push	 edi
  00408	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  0040b	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0040e	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00411	50		 push	 eax
  00412	56		 push	 esi
  00413	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep

; 1715 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00418	ff 75 b4	 push	 DWORD PTR __Prefix$1$[ebp]
  0041b	8b c8		 mov	 ecx, eax
  0041d	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0041f	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1713 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  00423	8b 01		 mov	 eax, DWORD PTR [ecx]
  00425	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00428	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0042b	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  0042e	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  00431	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1715 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00435	50		 push	 eax
  00436	ff 71 04	 push	 DWORD PTR [ecx+4]
  00439	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
  0043c	ff 31		 push	 DWORD PTR [ecx]
  0043e	50		 push	 eax
  0043f	56		 push	 esi
  00440	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00445	83 c4 30	 add	 esp, 48			; 00000030H
  00448	eb 6c		 jmp	 SHORT $LN451@Fput
$LN441@Fput:

; 1719 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0044a	ff 75 b4	 push	 DWORD PTR __Prefix$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0044d	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00451	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  00454	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1719 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00457	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  0045a	50		 push	 eax
  0045b	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  0045e	8d 45 ac	 lea	 eax, DWORD PTR $T5[ebp]
  00461	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00464	50		 push	 eax
  00465	56		 push	 esi
  00466	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0046b	8b c8		 mov	 ecx, eax

; 1720 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0046d	57		 push	 edi
  0046e	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00471	8b 01		 mov	 eax, DWORD PTR [ecx]
  00473	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
  00476	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00479	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  0047c	8d 45 ac	 lea	 eax, DWORD PTR $T4[ebp]
  0047f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00482	ff 31		 push	 DWORD PTR [ecx]
  00484	50		 push	 eax
  00485	56		 push	 esi
  00486	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0048b	83 c4 30	 add	 esp, 48			; 00000030H

; 1721 : 			_Fillcount = 0;

  0048e	33 ff		 xor	 edi, edi

; 1722 : 			}
; 1723 : 		else

  00490	eb 24		 jmp	 SHORT $LN451@Fput
$LN12@Fput:

; 1724 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00492	ff 75 b4	 push	 DWORD PTR __Prefix$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00495	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  00499	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  0049c	0f 43 c6	 cmovae	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1724 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0049f	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  004a2	50		 push	 eax
  004a3	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  004a6	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  004a9	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  004ac	50		 push	 eax
  004ad	56		 push	 esi
  004ae	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  004b3	83 c4 18	 add	 esp, 24			; 00000018H
$LN451@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  004b6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  004b8	83 7d ec 10	 cmp	 DWORD PTR __Groupstring$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  004bc	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  004bf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004c2	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 1804 : 		if (_Large_string_engaged())

  004c5	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  004c9	2b 5d b4	 sub	 ebx, DWORD PTR __Prefix$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3206 : 		return (_My_data._Myptr()[_Off]);

  004cc	03 45 b4	 add	 eax, DWORD PTR __Prefix$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  004cf	53		 push	 ebx
  004d0	50		 push	 eax
  004d1	52		 push	 edx
  004d2	51		 push	 ecx
  004d3	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1803 : 		value_type * _Result = _Bx._Buf;

  004d6	89 55 14	 mov	 DWORD PTR __Dest$[ebp+4], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  004d9	50		 push	 eax
  004da	56		 push	 esi
  004db	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  004e0	8b 55 98	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  004e3	57		 push	 edi
  004e4	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  004e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e9	8b 7d 94	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  004ec	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  004ef	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  004f2	50		 push	 eax
  004f3	51		 push	 ecx
  004f4	57		 push	 edi
  004f5	56		 push	 esi
  004f6	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  004f9	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00500	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00507	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0050c	8b 55 d4	 mov	 edx, DWORD PTR __Grouping$[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0050f	83 c4 30	 add	 esp, 48			; 00000030H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00512	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00515	72 28		 jb	 SHORT $LN359@Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00517	8b 4d c0	 mov	 ecx, DWORD PTR __Grouping$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0051a	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0051b	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0051d	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00523	72 10		 jb	 SHORT $LN358@Fput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00525	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00528	83 c2 23	 add	 edx, 35			; 00000023H
  0052b	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0052d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00530	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00533	77 74		 ja	 SHORT $LN188@Fput
$LN358@Fput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00535	52		 push	 edx
  00536	51		 push	 ecx
  00537	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0053c	83 c4 08	 add	 esp, 8
$LN359@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0053f	8b 55 ec	 mov	 edx, DWORD PTR __Groupstring$[ebp+20]

; 3995 : 		_My_data._Mysize = 0;

  00542	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00549	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00550	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00554	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00557	72 28		 jb	 SHORT $LN419@Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00559	8b 4d d8	 mov	 ecx, DWORD PTR __Groupstring$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0055c	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0055d	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0055f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00565	72 10		 jb	 SHORT $LN418@Fput

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00567	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0056a	83 c2 23	 add	 edx, 35			; 00000023H
  0056d	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0056f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00572	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00575	77 37		 ja	 SHORT $LN453@Fput
$LN418@Fput:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00577	52		 push	 edx
  00578	51		 push	 ecx
  00579	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0057e	83 c4 08	 add	 esp, 8
$LN419@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00581	8b c7		 mov	 eax, edi

; 1729 : 		}

  00583	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00586	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0058d	59		 pop	 ecx
  0058e	5f		 pop	 edi
  0058f	5e		 pop	 esi
  00590	5b		 pop	 ebx
  00591	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00594	33 cd		 xor	 ecx, ebp
  00596	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0059b	8b e5		 mov	 esp, ebp
  0059d	5d		 pop	 ebp
  0059e	c3		 ret	 0
$LN438@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3925 : 			_Xlen();	// result too long

  0059f	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN437@Fput:

; 1832 : 			_Xran();

  005a4	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN188@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1729 : 		}

  005a9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN453@Fput:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN446@Fput:
  005b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR $T9[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR $T8[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z:
  00020	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00024	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00027	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1634 : 		char *_Ptr = _Fmt;
; 1635 : 		*_Ptr++ = '%';
; 1636 : 
; 1637 : 		if (_Flags & ios_base::showpos)

  00000	8b 54 24 10	 mov	 edx, DWORD PTR __Flags$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Fmt$[esp]
  00009	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0000f	f6 c2 20	 test	 dl, 32			; 00000020H
  00012	74 04		 je	 SHORT $LN2@Ffmt

; 1638 : 			*_Ptr++ = '+';

  00014	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00017	40		 inc	 eax
$LN2@Ffmt:

; 1639 : 		if (_Flags & ios_base::showpoint)

  00018	f6 c2 10	 test	 dl, 16			; 00000010H
  0001b	74 04		 je	 SHORT $LN3@Ffmt

; 1640 : 			*_Ptr++ = '#';

  0001d	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00020	40		 inc	 eax
$LN3@Ffmt:

; 1641 : 		*_Ptr++ = '.';
; 1642 : 		*_Ptr++ = '*';	// for precision argument
; 1643 : 		if (_Spec != '\0')

  00021	8a 4c 24 10	 mov	 cl, BYTE PTR __Spec$[esp]
  00025	66 c7 00 2e 2a	 mov	 WORD PTR [eax], 10798	; 00002a2eH
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 c9		 test	 cl, cl
  0002f	74 03		 je	 SHORT $LN4@Ffmt

; 1644 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  00031	88 08		 mov	 BYTE PTR [eax], cl
  00033	40		 inc	 eax
$LN4@Ffmt:

; 1645 : 
; 1646 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	8b ca		 mov	 ecx, edx
  00036	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H

; 1647 : 		if (_Flags & ios_base::uppercase)

  0003c	f6 c2 04	 test	 dl, 4
  0003f	74 36		 je	 SHORT $LN5@Ffmt

; 1648 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00041	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00047	74 36		 je	 SHORT $LN16@Ffmt
  00049	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  0004f	75 0c		 jne	 SHORT $LN8@Ffmt
  00051	b1 41		 mov	 cl, 65			; 00000041H

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  00053	88 08		 mov	 BYTE PTR [eax], cl
  00055	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi

; 1658 : 		}

  0005c	c3		 ret	 0
$LN8@Ffmt:

; 1648 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0005d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00063	0f 95 c1	 setne	 cl
  00066	8d 0c 4d 45 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+69]

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  0006d	88 08		 mov	 BYTE PTR [eax], cl
  0006f	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00073	8b c6		 mov	 eax, esi
  00075	5e		 pop	 esi

; 1658 : 		}

  00076	c3		 ret	 0
$LN5@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  00077	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0007d	75 0c		 jne	 SHORT $LN14@Ffmt
$LN16@Ffmt:

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  0007f	b1 66		 mov	 cl, 102			; 00000066H
  00081	88 08		 mov	 BYTE PTR [eax], cl
  00083	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  00087	8b c6		 mov	 eax, esi
  00089	5e		 pop	 esi

; 1658 : 		}

  0008a	c3		 ret	 0
$LN14@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0008b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  00091	75 0c		 jne	 SHORT $LN12@Ffmt
  00093	b1 61		 mov	 cl, 97			; 00000061H

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  00095	88 08		 mov	 BYTE PTR [eax], cl
  00097	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  0009b	8b c6		 mov	 eax, esi
  0009d	5e		 pop	 esi

; 1658 : 		}

  0009e	c3		 ret	 0
$LN12@Ffmt:

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else
; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0009f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a5	0f 95 c1	 setne	 cl
  000a8	8d 0c 4d 65 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+101]

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

  000af	88 08		 mov	 BYTE PTR [eax], cl
  000b1	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1657 : 		return (_Fmt);

  000b5	8b c6		 mov	 eax, esi
  000b7	5e		 pop	 esi

; 1658 : 		}

  000b8	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1623 : 		{	// put formatted void pointer to _Dest

  00000	83 ec 44	 sub	 esp, 68			; 00000044H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 40	 mov	 DWORD PTR __$ArrayPad$[esp+68], eax
  0000e	8b 44 24 5c	 mov	 eax, DWORD PTR __Val$[esp+64]
  00012	53		 push	 ebx
  00013	8b 5c 24 4c	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+68]
  00017	56		 push	 esi
  00018	8b 74 24 5c	 mov	 esi, DWORD PTR __Iosbase$[esp+72]
  0001c	57		 push	 edi

; 1624 : 		char _Buf[2 * _MAX_INT_DIG];
; 1625 : 
; 1626 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp@
  00023	8d 44 24 14	 lea	 eax, DWORD PTR __Buf$[esp+88]
  00027	8b f9		 mov	 edi, ecx
  00029	6a 40		 push	 64			; 00000040H
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _sprintf_s
  00031	50		 push	 eax
  00032	8d 44 24 20	 lea	 eax, DWORD PTR __Buf$[esp+100]
  00036	50		 push	 eax
  00037	ff 74 24 7c	 push	 DWORD PTR __Fill$[esp+100]
  0003b	56		 push	 esi
  0003c	ff 74 24 7c	 push	 DWORD PTR __Dest$[esp+112]
  00040	ff 74 24 7c	 push	 DWORD PTR __Dest$[esp+112]
  00044	53		 push	 ebx
  00045	57		 push	 edi
  00046	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1627 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val))));
; 1628 : 		}

  0004b	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  0004f	83 c4 30	 add	 esp, 48			; 00000030H
  00052	8b c3		 mov	 eax, ebx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	33 cc		 xor	 ecx, esp
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	83 c4 44	 add	 esp, 68			; 00000044H
  00061	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Precision$ = -72					; size = 8
__Ptwo$2 = -68						; size = 4
___$ReturnUdt$GSCopy$1$ = -64				; size = 4
_this$GSCopy$1$ = -60					; size = 4
__Iosbase$GSCopy$1$ = -56				; size = 4
__Precision$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1599 : 		{	// put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00030	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1599 : 		{	// put formatted long double to _Dest

  00032	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00035	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1599 : 		{	// put formatted long double to _Dest

  0003a	89 45 c0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 75 c8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00040	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00043	89 7d e4	 mov	 DWORD PTR __Buf$[ebp+20], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00046	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1603 : 			== ios_base::fixed;

  00049	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1604 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0004c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004f	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00054	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  00057	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx
  0005a	89 4d cc	 mov	 DWORD PTR __Precision$1$[ebp], ecx
  0005d	85 f6		 test	 esi, esi
  0005f	7f 17		 jg	 SHORT $LN4@do_put
  00061	7c 04		 jl	 SHORT $LN156@do_put
  00063	85 c9		 test	 ecx, ecx
  00065	75 11		 jne	 SHORT $LN4@do_put
$LN156@do_put:
  00067	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006c	74 0a		 je	 SHORT $LN4@do_put
  0006e	b9 06 00 00 00	 mov	 ecx, 6
  00073	33 f6		 xor	 esi, esi
  00075	89 4d cc	 mov	 DWORD PTR __Precision$1$[ebp], ecx
$LN4@do_put:
  00078	89 75 bc	 mov	 DWORD PTR __Precision$[ebp+4], esi

; 1605 : 			? 6 : _Iosbase.precision();	// desired precision
; 1606 : 		size_t _Bufsize = (size_t)_Precision;

  0007b	8b f1		 mov	 esi, ecx

; 1607 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  0007d	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00082	75 56		 jne	 SHORT $LN2@do_put
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h

; 843  :         return fabs((double)_X);

  00084	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00089	0f 28 c1	 movaps	 xmm0, xmm1
  0008c	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1607 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  0009b	76 3d		 jbe	 SHORT $LN2@do_put
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  0009d	8d 45 bc	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000a0	50		 push	 eax
  000a1	83 ec 08	 sub	 esp, 8
  000a4	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000a9	e8 00 00 00 00	 call	 _frexp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000ae	8b 45 bc	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000b4	99		 cdq
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h

; 864  :         return frexp((double)_X, _Y);

  000b5	dd d8		 fstp	 ST(0)
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000b7	33 c2		 xor	 eax, edx
  000b9	8b 7d e4	 mov	 edi, DWORD PTR __Buf$[ebp+20]
  000bc	2b c2		 sub	 eax, edx
  000be	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000c4	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000c9	f7 e9		 imul	 ecx
  000cb	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ce	8b c2		 mov	 eax, edx
  000d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d3	03 c2		 add	 eax, edx
  000d5	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000d8	03 f0		 add	 esi, eax
$LN2@do_put:

; 1612 : 			}
; 1613 : 
; 1614 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000da	8d 4e 32	 lea	 ecx, DWORD PTR [esi+50]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3320 : 		if (_Newsize <= _Old_size)

  000dd	3b ca		 cmp	 ecx, edx
  000df	77 13		 ja	 SHORT $LN37@do_put

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e1	83 ff 10	 cmp	 edi, 16			; 00000010H

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  000e4	89 4d e0	 mov	 DWORD PTR __Buf$[ebp+16], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

  000e7	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1804 : 		if (_Large_string_engaged())

  000ea	0f 43 45 d0	 cmovae	 eax, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000ee	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3324 : 		else

  000f2	eb 0d		 jmp	 SHORT $LN38@do_put
$LN37@do_put:

; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  000f4	2b ca		 sub	 ecx, edx
  000f6	6a 00		 push	 0
  000f8	51		 push	 ecx
  000f9	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN38@do_put:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00101	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00105	8d 7d d0	 lea	 edi, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00108	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0010d	0f 43 7d d0	 cmovae	 edi, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00111	83 ec 08	 sub	 esp, 8
  00114	8b 45 c8	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00117	8b 75 e0	 mov	 esi, DWORD PTR __Buf$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	ff 75 cc	 push	 DWORD PTR __Precision$1$[ebp]
  00122	ff 70 14	 push	 DWORD PTR [eax+20]
  00125	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00128	6a 4c		 push	 76			; 0000004cH
  0012a	50		 push	 eax
  0012b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	50		 push	 eax
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	e8 00 00 00 00	 call	 _sprintf_s
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0013e	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00142	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00145	8b 75 c0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00148	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00151	ff 75 c8	 push	 DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00154	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00157	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0015a	56		 push	 esi
  0015b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015e	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00163	8b 55 e4	 mov	 edx, DWORD PTR __Buf$[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00166	83 c4 38	 add	 esp, 56			; 00000038H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00169	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0016c	72 28		 jb	 SHORT $LN138@do_put
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016e	8b 4d d0	 mov	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00171	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00172	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00174	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0017a	72 10		 jb	 SHORT $LN137@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0017c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0017f	83 c2 23	 add	 edx, 35			; 00000023H
  00182	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00184	83 c0 fc	 add	 eax, -4			; fffffffcH
  00187	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018a	77 29		 ja	 SHORT $LN160@do_put
$LN137@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0018c	52		 push	 edx
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00193	83 c4 08	 add	 esp, 8
$LN138@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00196	8b c6		 mov	 eax, esi

; 1619 : 		}

  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a8	33 cd		 xor	 ecx, ebp
  001aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 1c 00	 ret	 28			; 0000001cH
$LN160@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN158@do_put:
  001ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Precision$ = -72					; size = 8
__Ptwo$2 = -68						; size = 4
___$ReturnUdt$GSCopy$1$ = -64				; size = 4
_this$GSCopy$1$ = -60					; size = 4
__Iosbase$GSCopy$1$ = -56				; size = 4
__Precision$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1575 : 		{	// put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00030	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1575 : 		{	// put formatted double to _Dest

  00032	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00035	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1575 : 		{	// put formatted double to _Dest

  0003a	89 45 c0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 75 c8	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00040	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00043	89 7d e4	 mov	 DWORD PTR __Buf$[ebp+20], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00046	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1579 : 			== ios_base::fixed;

  00049	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1580 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0004c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0004f	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00054	8b 76 1c	 mov	 esi, DWORD PTR [esi+28]
  00057	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx
  0005a	89 4d cc	 mov	 DWORD PTR __Precision$1$[ebp], ecx
  0005d	85 f6		 test	 esi, esi
  0005f	7f 17		 jg	 SHORT $LN4@do_put
  00061	7c 04		 jl	 SHORT $LN152@do_put
  00063	85 c9		 test	 ecx, ecx
  00065	75 11		 jne	 SHORT $LN4@do_put
$LN152@do_put:
  00067	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  0006c	74 0a		 je	 SHORT $LN4@do_put
  0006e	b9 06 00 00 00	 mov	 ecx, 6
  00073	33 f6		 xor	 esi, esi
  00075	89 4d cc	 mov	 DWORD PTR __Precision$1$[ebp], ecx
$LN4@do_put:
  00078	89 75 bc	 mov	 DWORD PTR __Precision$[ebp+4], esi

; 1581 : 			? 6 : _Iosbase.precision();	// desired precision
; 1582 : 		size_t _Bufsize = (size_t)_Precision;

  0007b	8b f1		 mov	 esi, ecx

; 1583 : 		if (_Isfixed && 1e10 < _CSTD fabs(_Val))

  0007d	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00082	75 56		 jne	 SHORT $LN2@do_put
  00084	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  00089	0f 28 c1	 movaps	 xmm0, xmm1
  0008c	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00093	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  0009b	76 3d		 jbe	 SHORT $LN2@do_put

; 1584 : 			{	// f or F format
; 1585 : 			int _Ptwo;
; 1586 : 			(void)_CSTD frexp(_Val, &_Ptwo);

  0009d	8d 45 bc	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000a0	50		 push	 eax
  000a1	83 ec 08	 sub	 esp, 8
  000a4	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000a9	e8 00 00 00 00	 call	 _frexp

; 1587 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000ae	8b 45 bc	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	99		 cdq
  000b5	dd d8		 fstp	 ST(0)
  000b7	33 c2		 xor	 eax, edx
  000b9	8b 7d e4	 mov	 edi, DWORD PTR __Buf$[ebp+20]
  000bc	2b c2		 sub	 eax, edx
  000be	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000c4	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000c9	f7 e9		 imul	 ecx
  000cb	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ce	8b c2		 mov	 eax, edx
  000d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d3	03 c2		 add	 eax, edx
  000d5	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000d8	03 f0		 add	 esi, eax
$LN2@do_put:

; 1588 : 			}
; 1589 : 
; 1590 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  000da	8d 4e 32	 lea	 ecx, DWORD PTR [esi+50]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3320 : 		if (_Newsize <= _Old_size)

  000dd	3b ca		 cmp	 ecx, edx
  000df	77 13		 ja	 SHORT $LN33@do_put

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e1	83 ff 10	 cmp	 edi, 16			; 00000010H

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  000e4	89 4d e0	 mov	 DWORD PTR __Buf$[ebp+16], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

  000e7	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1804 : 		if (_Large_string_engaged())

  000ea	0f 43 45 d0	 cmovae	 eax, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000ee	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3324 : 		else

  000f2	eb 0d		 jmp	 SHORT $LN34@do_put
$LN33@do_put:

; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  000f4	2b ca		 sub	 ecx, edx
  000f6	6a 00		 push	 0
  000f8	51		 push	 ecx
  000f9	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  000fc	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN34@do_put:

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00101	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00105	8d 7d d0	 lea	 edi, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00108	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0010d	0f 43 7d d0	 cmovae	 edi, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  00111	83 ec 08	 sub	 esp, 8
  00114	8b 45 c8	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3302 : 		return (this->_Get_data()._Mysize);

  00117	8b 75 e0	 mov	 esi, DWORD PTR __Buf$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	ff 75 cc	 push	 DWORD PTR __Precision$1$[ebp]
  00122	ff 70 14	 push	 DWORD PTR [eax+20]
  00125	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00128	6a 00		 push	 0
  0012a	50		 push	 eax
  0012b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	50		 push	 eax
  00137	56		 push	 esi
  00138	57		 push	 edi
  00139	e8 00 00 00 00	 call	 _sprintf_s
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0013e	83 7d e4 10	 cmp	 DWORD PTR __Buf$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00142	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00145	8b 75 c0	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00148	0f 43 4d d0	 cmovae	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00151	ff 75 c8	 push	 DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00154	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00157	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0015a	56		 push	 esi
  0015b	ff 75 c4	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015e	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00163	8b 55 e4	 mov	 edx, DWORD PTR __Buf$[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00166	83 c4 38	 add	 esp, 56			; 00000038H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00169	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0016c	72 28		 jb	 SHORT $LN134@do_put
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016e	8b 4d d0	 mov	 ecx, DWORD PTR __Buf$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00171	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00172	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00174	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0017a	72 10		 jb	 SHORT $LN133@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0017c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0017f	83 c2 23	 add	 edx, 35			; 00000023H
  00182	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00184	83 c0 fc	 add	 eax, -4			; fffffffcH
  00187	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018a	77 29		 ja	 SHORT $LN156@do_put
$LN133@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0018c	52		 push	 edx
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00193	83 c4 08	 add	 esp, 8
$LN134@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  00196	8b c6		 mov	 eax, esi

; 1595 : 		}

  00198	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a2	59		 pop	 ecx
  001a3	5f		 pop	 edi
  001a4	5e		 pop	 esi
  001a5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a8	33 cd		 xor	 ecx, ebp
  001aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 1c 00	 ret	 28			; 0000001cH
$LN156@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN154@do_put:
  001ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1565 : 		{	// put formatted unsigned long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 54	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+76]

; 1566 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1567 : 
; 1568 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00013	8d 44 24 04	 lea	 eax, DWORD PTR __Fmt$[esp+80]
  00017	56		 push	 esi
  00018	8b 74 24 64	 mov	 esi, DWORD PTR __Iosbase$[esp+80]
  0001c	57		 push	 edi
  0001d	ff 74 24 74	 push	 DWORD PTR __Val$[esp+88]
  00021	8b f9		 mov	 edi, ecx
  00023	ff 74 24 74	 push	 DWORD PTR __Val$[esp+88]
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_02CLHGNPPK@Lu@
  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	50		 push	 eax
  0003a	8d 44 24 20	 lea	 eax, DWORD PTR __Buf$[esp+100]
  0003e	6a 40		 push	 64			; 00000040H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _sprintf_s
  00046	50		 push	 eax
  00047	8d 44 24 2c	 lea	 eax, DWORD PTR __Buf$[esp+112]
  0004b	50		 push	 eax
  0004c	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Fill$[esp+112]
  00053	56		 push	 esi
  00054	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Dest$[esp+124]
  0005b	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Dest$[esp+124]
  00062	53		 push	 ebx
  00063	57		 push	 edi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1569 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1570 : 				_Iosbase.flags()), _Val))));
; 1571 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c3		 mov	 eax, ebx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 8
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1555 : 		{	// put formatted long long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 54	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+76]

; 1556 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1557 : 
; 1558 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00013	8d 44 24 04	 lea	 eax, DWORD PTR __Fmt$[esp+80]
  00017	56		 push	 esi
  00018	8b 74 24 64	 mov	 esi, DWORD PTR __Iosbase$[esp+80]
  0001c	57		 push	 edi
  0001d	ff 74 24 74	 push	 DWORD PTR __Val$[esp+88]
  00021	8b f9		 mov	 edi, ecx
  00023	ff 74 24 74	 push	 DWORD PTR __Val$[esp+88]
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_02HIKPPMOK@Ld@
  0002f	50		 push	 eax
  00030	57		 push	 edi
  00031	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00036	83 c4 10	 add	 esp, 16			; 00000010H
  00039	50		 push	 eax
  0003a	8d 44 24 20	 lea	 eax, DWORD PTR __Buf$[esp+100]
  0003e	6a 40		 push	 64			; 00000040H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _sprintf_s
  00046	50		 push	 eax
  00047	8d 44 24 2c	 lea	 eax, DWORD PTR __Buf$[esp+112]
  0004b	50		 push	 eax
  0004c	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Fill$[esp+112]
  00053	56		 push	 esi
  00054	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Dest$[esp+124]
  0005b	ff b4 24 88 00
	00 00		 push	 DWORD PTR __Dest$[esp+124]
  00062	53		 push	 ebx
  00063	57		 push	 edi
  00064	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1559 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1560 : 				_Iosbase.flags()), _Val))));
; 1561 : 		}

  00069	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+140]
  00070	83 c4 34	 add	 esp, 52			; 00000034H
  00073	8b c3		 mov	 eax, ebx
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	33 cc		 xor	 ecx, esp
  0007a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007f	83 c4 4c	 add	 esp, 76			; 0000004cH
  00082	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1545 : 		{	// put formatted unsigned long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 54	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+76]

; 1546 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1547 : 
; 1548 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00013	8d 44 24 04	 lea	 eax, DWORD PTR __Fmt$[esp+80]
  00017	56		 push	 esi
  00018	8b 74 24 64	 mov	 esi, DWORD PTR __Iosbase$[esp+80]
  0001c	57		 push	 edi
  0001d	ff 74 24 70	 push	 DWORD PTR __Val$[esp+84]
  00021	8b f9		 mov	 edi, ecx
  00023	ff 76 14	 push	 DWORD PTR [esi+20]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_02BDDLJJBK@lu@
  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	50		 push	 eax
  00036	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003a	6a 40		 push	 64			; 00000040H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _sprintf_s
  00042	50		 push	 eax
  00043	8d 44 24 28	 lea	 eax, DWORD PTR __Buf$[esp+108]
  00047	50		 push	 eax
  00048	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Fill$[esp+108]
  0004f	56		 push	 esi
  00050	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Dest$[esp+120]
  00057	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Dest$[esp+120]
  0005e	53		 push	 ebx
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1549 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1550 : 				_Iosbase.flags()), _Val))));
; 1551 : 		}

  00065	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  0006c	83 c4 30	 add	 esp, 48			; 00000030H
  0006f	8b c3		 mov	 eax, ebx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	33 cc		 xor	 ecx, esp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007e	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Fmt$ = -76						; size = 6
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1535 : 		{	// put formatted long to _Dest

  00000	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 48	 mov	 DWORD PTR __$ArrayPad$[esp+76], eax
  0000e	53		 push	 ebx
  0000f	8b 5c 24 54	 mov	 ebx, DWORD PTR ___$ReturnUdt$[esp+76]

; 1536 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1537 : 
; 1538 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  00013	8d 44 24 04	 lea	 eax, DWORD PTR __Fmt$[esp+80]
  00017	56		 push	 esi
  00018	8b 74 24 64	 mov	 esi, DWORD PTR __Iosbase$[esp+80]
  0001c	57		 push	 edi
  0001d	ff 74 24 70	 push	 DWORD PTR __Val$[esp+84]
  00021	8b f9		 mov	 edi, ecx
  00023	ff 76 14	 push	 DWORD PTR [esi+20]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_02EAOCLKAK@ld@
  0002b	50		 push	 eax
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	50		 push	 eax
  00036	8d 44 24 1c	 lea	 eax, DWORD PTR __Buf$[esp+96]
  0003a	6a 40		 push	 64			; 00000040H
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 _sprintf_s
  00042	50		 push	 eax
  00043	8d 44 24 28	 lea	 eax, DWORD PTR __Buf$[esp+108]
  00047	50		 push	 eax
  00048	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Fill$[esp+108]
  0004f	56		 push	 esi
  00050	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Dest$[esp+120]
  00057	ff b4 24 84 00
	00 00		 push	 DWORD PTR __Dest$[esp+120]
  0005e	53		 push	 ebx
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1539 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1540 : 				_Iosbase.flags()), _Val))));
; 1541 : 		}

  00065	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+136]
  0006c	83 c4 30	 add	 esp, 48			; 00000030H
  0006f	8b c3		 mov	 eax, ebx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	33 cc		 xor	 ecx, esp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	83 c4 4c	 add	 esp, 76			; 0000004cH
  0007e	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T2 = -92						; size = 8
___$ReturnUdt$GSCopy$1$ = -84				; size = 4
$T3 = -80						; size = 8
$T4 = -80						; size = 8
__Punct_fac$1$ = -76					; size = 4
_this$GSCopy$1$ = -72					; size = 4
__Fill$GSCopy$ = -68					; size = 1
$T5 = -64						; size = 24
$T6 = -64						; size = 24
__Str$7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1506 : 		{	// put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00030	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]
  00033	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00036	89 75 ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], esi

; 1507 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  00039	f7 47 14 00 40
	00 00		 test	 DWORD PTR [edi+20], 16384 ; 00004000H
  00040	88 45 bc	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00043	75 1a		 jne	 SHORT $LN2@do_put

; 1508 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00045	0f b6 45 1c	 movzx	 eax, BYTE PTR __Val$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	50		 push	 eax
  0004c	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0004f	57		 push	 edi
  00050	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00053	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00056	56		 push	 esi
  00057	ff 52 24	 call	 DWORD PTR [edx+36]
  0005a	e9 87 01 00 00	 jmp	 $LN246@do_put
$LN2@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  0005f	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00062	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00065	8b ce		 mov	 ecx, esi
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006e	89 75 b4	 mov	 DWORD PTR $T4[ebp+4], esi
  00071	8b 06		 mov	 eax, DWORD PTR [esi]
  00073	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1511 : 			const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00076	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  00079	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00086	8b c8		 mov	 ecx, eax
  00088	83 c4 04	 add	 esp, 4
  0008b	89 4d b4	 mov	 DWORD PTR __Punct_fac$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  0008e	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  00095	85 f6		 test	 esi, esi

; 409  : 		if (_Ptr != nullptr)

  00097	74 18		 je	 SHORT $LN26@do_put

; 410  : 			delete _Ptr->_Decref();

  00099	8b 16		 mov	 edx, DWORD PTR [esi]
  0009b	8b ce		 mov	 ecx, esi
  0009d	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000a0	ff d2		 call	 edx
  000a2	85 c0		 test	 eax, eax
  000a4	74 08		 je	 SHORT $LN266@do_put
  000a6	8b 10		 mov	 edx, DWORD PTR [eax]
  000a8	8b c8		 mov	 ecx, eax
  000aa	6a 01		 push	 1
  000ac	ff 12		 call	 DWORD PTR [edx]
$LN266@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  000ae	8b 4d b4	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
$LN26@do_put:
  000b1	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000b8	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000bf	c6 45 d8 00	 mov	 BYTE PTR __Str$7[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1513 : 			if (_Val)

  000c3	80 7d 1c 00	 cmp	 BYTE PTR __Val$[ebp], 0
  000c7	8d 55 c0	 lea	 edx, DWORD PTR $T6[ebp]
  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000d3	52		 push	 edx
  000d4	74 05		 je	 SHORT $LN4@do_put

; 143  : 		return (do_truename());

  000d6	ff 50 1c	 call	 DWORD PTR [eax+28]

; 1514 : 				_Str.assign(_Punct_fac.truename());
; 1515 : 			else

  000d9	eb 03		 jmp	 SHORT $LN269@do_put
$LN4@do_put:

; 138  : 		return (do_falsename());

  000db	ff 50 18	 call	 DWORD PTR [eax+24]
$LN269@do_put:

; 1516 : 				_Str.assign(_Punct_fac.falsename());
; 1517 : 
; 1518 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1519 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  000de	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  000e6	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T5[ebp]
  000ea	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  000ed	c6 45 c0 00	 mov	 BYTE PTR $T5[ebp], 0
  000f1	0f 11 45 d8	 movups	 XMMWORD PTR __Str$7[ebp], xmm0
  000f5	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T5[ebp+16]
  000fa	66 0f d6 45 e8	 movq	 QWORD PTR __Str$7[ebp+16], xmm0
  000ff	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+16], 0
  00106	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH
  0010d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00112	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00116	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  00119	8b 45 e8	 mov	 eax, DWORD PTR __Str$7[ebp+16]
  0011c	7c 0e		 jl	 SHORT $LN8@do_put
  0011e	7f 04		 jg	 SHORT $LN264@do_put
  00120	85 f6		 test	 esi, esi
  00122	74 08		 je	 SHORT $LN8@do_put
$LN264@do_put:
  00124	3b f0		 cmp	 esi, eax
  00126	76 04		 jbe	 SHORT $LN8@do_put
  00128	2b f0		 sub	 esi, eax
  0012a	eb 02		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  0012c	33 f6		 xor	 esi, esi
$LN9@do_put:

; 1520 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();
; 1521 : 
; 1522 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  0012e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00131	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00136	83 f8 40	 cmp	 eax, 64			; 00000040H
  00139	74 28		 je	 SHORT $LN265@do_put

; 1523 : 				{	// put leading fill
; 1524 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0013b	56		 push	 esi
  0013c	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0013f	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00142	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00145	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00148	50		 push	 eax
  00149	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0014c	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00151	83 c4 18	 add	 esp, 24			; 00000018H

; 1525 : 				_Fillcount = 0;

  00154	33 f6		 xor	 esi, esi
  00156	8b 08		 mov	 ecx, DWORD PTR [eax]
  00158	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  0015b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0015e	89 55 10	 mov	 DWORD PTR __Dest$[ebp+4], edx
  00161	eb 06		 jmp	 SHORT $LN6@do_put
$LN265@do_put:

; 1520 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();
; 1521 : 
; 1522 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00163	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  00166	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
$LN6@do_put:

; 1527 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00169	ff 75 e8	 push	 DWORD PTR __Str$7[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0016c	83 7d ec 10	 cmp	 DWORD PTR __Str$7[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00170	8d 45 d8	 lea	 eax, DWORD PTR __Str$7[ebp]

; 1815 : 		if (_Large_string_engaged())

  00173	0f 43 45 d8	 cmovae	 eax, DWORD PTR __Str$7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1527 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00177	50		 push	 eax
  00178	52		 push	 edx
  00179	51		 push	 ecx
  0017a	8d 45 a4	 lea	 eax, DWORD PTR $T2[ebp]
  0017d	50		 push	 eax
  0017e	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00181	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00186	56		 push	 esi
  00187	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0018a	8b 75 ac	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0018d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018f	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00192	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00195	50		 push	 eax
  00196	51		 push	 ecx
  00197	56		 push	 esi
  00198	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0019b	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  0019e	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  001a5	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001ac	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001b1	8b 45 ec	 mov	 eax, DWORD PTR __Str$7[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  001b4	83 c4 30	 add	 esp, 48			; 00000030H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001b7	83 f8 10	 cmp	 eax, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001ba	72 2a		 jb	 SHORT $LN246@do_put
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001bc	8b 4d d8	 mov	 ecx, DWORD PTR __Str$7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001bf	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c2	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001c4	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001ca	72 10		 jb	 SHORT $LN245@do_put

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001cc	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001cf	83 c2 23	 add	 edx, 35			; 00000023H
  001d2	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001d4	83 c0 fc	 add	 eax, -4			; fffffffcH
  001d7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001da	77 29		 ja	 SHORT $LN271@do_put
$LN245@do_put:

; 207  : 	::operator delete(_Ptr, _Bytes);

  001dc	52		 push	 edx
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001e3	83 c4 08	 add	 esp, 8
$LN246@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1531 : 		}

  001e6	8b c6		 mov	 eax, esi
  001e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f2	59		 pop	 ecx
  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 18 00	 ret	 24			; 00000018H
$LN271@do_put:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00205	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN268@do_put:
  0020a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	ff 74 24 18	 push	 DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	ff 74 24 18	 push	 DWORD PTR __Fill$[esp]
  0000a	ff 74 24 18	 push	 DWORD PTR __Iosbase$[esp+4]
  0000e	ff 74 24 18	 push	 DWORD PTR __Dest$[esp+12]
  00012	ff 74 24 18	 push	 DWORD PTR __Dest$[esp+12]
  00016	ff 74 24 18	 push	 DWORD PTR ___$ReturnUdt$[esp+16]
  0001a	ff 50 20	 call	 DWORD PTR [eax+32]
  0001d	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 1471 : 		}

  00021	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1464 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00000	ff 74 24 18	 push	 DWORD PTR __Val$[esp-4]
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	ff 74 24 18	 push	 DWORD PTR __Fill$[esp]
  0000a	ff 74 24 18	 push	 DWORD PTR __Iosbase$[esp+4]
  0000e	ff 74 24 18	 push	 DWORD PTR __Dest$[esp+12]
  00012	ff 74 24 18	 push	 DWORD PTR __Dest$[esp+12]
  00016	ff 74 24 18	 push	 DWORD PTR ___$ReturnUdt$[esp+16]
  0001a	ff 50 24	 call	 DWORD PTR [eax+36]
  0001d	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 1465 : 		}

  00021	c2 18 00	 ret	 24			; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1448 : 		{	// construct from specified locale

  00000	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00001	8b 44 24 0c	 mov	 eax, DWORD PTR __Refs$[esp]
  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1450 : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00013	59		 pop	 ecx
  00014	c2 08 00	 ret	 8
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1435 : 		}

  00000	c2 04 00	 ret	 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1431 : 		}

  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 52
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T4 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1419 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1420 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  00028	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002b	33 db		 xor	 ebx, ebx
  0002d	89 5d f0	 mov	 DWORD PTR $T3[ebp], ebx
  00030	85 ff		 test	 edi, edi
  00032	74 63		 je	 SHORT $LN27@Getcat
  00034	39 1f		 cmp	 DWORD PTR [edi], ebx
  00036	75 5f		 jne	 SHORT $LN27@Getcat

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00038	6a 08		 push	 8
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	89 75 08	 mov	 DWORD PTR $T4[ebp], esi
  00047	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  0004a	85 f6		 test	 esi, esi
  0004c	74 38		 je	 SHORT $LN4@Getcat
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Ploc$[ebp]
  00051	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00054	85 c9		 test	 ecx, ecx
  00056	75 07		 jne	 SHORT $LN12@Getcat
  00058	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  0005d	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  0005f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00062	85 c0		 test	 eax, eax
  00064	75 03		 jne	 SHORT $LN17@Getcat
  00066	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00069	50		 push	 eax
  0006a	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0006d	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00072	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1448 : 		{	// construct from specified locale

  0007e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00084	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00086	33 f6		 xor	 esi, esi
$LN5@Getcat:
  00088	89 37		 mov	 DWORD PTR [edi], esi
  0008a	f6 c3 01	 test	 bl, 1
  0008d	74 08		 je	 SHORT $LN27@Getcat
  0008f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00092	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN27@Getcat:

; 1422 : 				_Locinfo(_Ploc->c_str()));
; 1423 : 		return (_X_NUMERIC);
; 1424 : 		}

  00097	b8 04 00 00 00	 mov	 eax, 4
  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 08	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
$T3 = -24						; size = 4
__Lock$4 = -24						; size = 4
__Psave$1$ = -20					; size = 4
$T5 = -20						; size = 4
__Lock$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$7 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002d	53		 push	 ebx
  0002e	89 5d e8	 mov	 DWORD PTR $T3[ebp], ebx
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 116  : 			if (_Id == 0)

  00036	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00044	89 45 ec	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 116  : 			if (_Id == 0)

  00047	85 ff		 test	 edi, edi
  00049	75 2f		 jne	 SHORT $LN11@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  0004b	57		 push	 edi
  0004c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0004f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

  00054	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, edi ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005a	75 10		 jne	 SHORT $LN12@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00061	40		 inc	 eax
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN12@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  0006c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00074	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN11@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0007a	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0007d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00080	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00083	73 10		 jae	 SHORT $LN20@use_facet
  00085	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00088	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  0008b	85 f6		 test	 esi, esi
  0008d	0f 85 a8 00 00
	00		 jne	 $LN90@use_facet
  00093	eb 02		 jmp	 SHORT $LN93@use_facet
$LN20@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00095	33 f6		 xor	 esi, esi
$LN93@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00097	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0009b	74 10		 je	 SHORT $LN17@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  0009d	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000a2	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000a5	73 0e		 jae	 SHORT $LN94@use_facet
  000a7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000aa	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000ad	85 f6		 test	 esi, esi
  000af	0f 85 86 00 00
	00		 jne	 $LN90@use_facet
$LN94@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000b5	8b 45 ec	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 04		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000bc	8b f0		 mov	 esi, eax

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000be	eb 7b		 jmp	 SHORT $LN90@use_facet
$LN3@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  000c0	6a 08		 push	 8
  000c2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c7	8b f0		 mov	 esi, eax
  000c9	83 c4 04	 add	 esp, 4
  000cc	89 75 ec	 mov	 DWORD PTR $T5[ebp], esi
  000cf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000d3	85 f6		 test	 esi, esi
  000d5	74 38		 je	 SHORT $LN27@use_facet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000d7	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000dd	85 c9		 test	 ecx, ecx
  000df	75 07		 jne	 SHORT $LN35@use_facet
  000e1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  000e6	eb 0a		 jmp	 SHORT $LN40@use_facet
$LN35@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  000e8	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000eb	85 c0		 test	 eax, eax
  000ed	75 03		 jne	 SHORT $LN40@use_facet
  000ef	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN40@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  000f2	50		 push	 eax
  000f3	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  000f6	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  000fb	bb 01 00 00 00	 mov	 ebx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00100	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1448 : 		{	// construct from specified locale

  00107	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  0010d	eb 02		 jmp	 SHORT $LN28@use_facet
$LN27@use_facet:
  0010f	33 f6		 xor	 esi, esi
$LN28@use_facet:
  00111	f6 c3 01	 test	 bl, 1
  00114	74 08		 je	 SHORT $LN32@use_facet
  00116	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00119	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN32@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0011e	89 75 08	 mov	 DWORD PTR __Psave_guard$7[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 535  : 				_Facet_Register(_Pfmod);

  00121	56		 push	 esi
  00122	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00126	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  0012b	8b 16		 mov	 edx, DWORD PTR [esi]
  0012d	83 c4 04	 add	 esp, 4
  00130	8b ce		 mov	 ecx, esi
  00132	ff 52 04	 call	 DWORD PTR [edx+4]

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  00135	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
$LN90@use_facet:

; 540  : 				_Pf = _Psave;
; 541  : 
; 542  : 				(void) _Psave_guard.release();
; 543  : 				}
; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  0013b	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0013e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00143	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00145	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00148	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014f	59		 pop	 ecx
  00150	5f		 pop	 edi
  00151	5e		 pop	 esi
  00152	5b		 pop	 ebx
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$3:
  00008	6a 08		 push	 8
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$7[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 153  : 			return (_Ok);

  00000	8a 41 04	 mov	 al, BYTE PTR [ecx+4]

; 154  : 			}

  00003	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 135  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN5@sentry

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 20
$T3 = -32						; size = 8
__Ok$4 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d f0	 mov	 DWORD PTR _this$[ebp], ebx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Ostr$[ebp]

; 98   : 			: _Myostr(_Ostr)

  00030	89 3b		 mov	 DWORD PTR [ebx], edi

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  00032	8b 17		 mov	 edx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	8b 4c 38 38	 mov	 ecx, DWORD PTR [eax+edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  0003b	85 c9		 test	 ecx, ecx
  0003d	74 07		 je	 SHORT $LN6@sentry

; 101  : 				_Myostr.rdbuf()->_Lock();

  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	ff 50 04	 call	 DWORD PTR [eax+4]
  00044	8b 17		 mov	 edx, DWORD PTR [edi]
$LN6@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  00046	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00049	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 120  : 			: _Sentry_base(_Ostr)

  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 352  : 		return (rdstate() == ios_base::goodbit);

  00052	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  00057	0f 85 8d 00 00
	00		 jne	 $LN56@sentry
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 75   : 		return (_Tiestr);

  0005d	8b 74 38 3c	 mov	 esi, DWORD PTR [eax+edi+60]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

  00061	85 f6		 test	 esi, esi
  00063	0f 84 81 00 00
	00		 je	 $LN56@sentry
  00069	3b f7		 cmp	 esi, edi
  0006b	74 7d		 je	 SHORT $LN56@sentry
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  0006d	8b 06		 mov	 eax, DWORD PTR [esi]
  0006f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 587  : 		if (_Myios::rdbuf() != nullptr)

  00072	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00077	74 71		 je	 SHORT $LN56@sentry

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

  00079	56		 push	 esi
  0007a	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  0007d	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00082	80 7d ec 00	 cmp	 BYTE PTR __Ok$4[ebp+4], 0
  00086	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0008a	74 2e		 je	 SHORT $LN44@sentry
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 143  : 		return (sync());

  00095	8b 01		 mov	 eax, DWORD PTR [ecx]
  00097	ff 50 34	 call	 DWORD PTR [eax+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	75 1b		 jne	 SHORT $LN44@sentry

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  0009f	8b 06		 mov	 eax, DWORD PTR [esi]
  000a1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 288  : 		_State &= _Statmask;

  000a4	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  000a8	83 e0 13	 and	 eax, 19			; 00000013H
  000ab	83 c8 04	 or	 eax, 4

; 289  : 		_Mystate = _State;

  000ae	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 290  : 		const auto _Filtered = _State & _Except;

  000b2	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  000b6	23 c8		 and	 ecx, eax

; 291  : 		if (_Filtered)

  000b8	75 54		 jne	 SHORT $LN74@sentry
$LN44@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 135  : 			{	// destroy the object

  000ba	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  000be	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000c3	84 c0		 test	 al, al
  000c5	75 08		 jne	 SHORT $LN55@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  000c7	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  000ca	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN55@sentry:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  000cf	8b 4d e8	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  000d2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000d6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000db	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000df	85 c9		 test	 ecx, ecx
  000e1	74 05		 je	 SHORT $LN59@sentry

; 107  : 				_Myostr.rdbuf()->_Unlock();

  000e3	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e5	ff 50 08	 call	 DWORD PTR [eax+8]
$LN59@sentry:
  000e8	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN56@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 352  : 		return (rdstate() == ios_base::goodbit);

  000ea	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ed	83 7c 38 0c 00	 cmp	 DWORD PTR [eax+edi+12], 0
  000f2	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000f5	88 43 04	 mov	 BYTE PTR [ebx+4], al

; 125  : 			}

  000f8	8b c3		 mov	 eax, ebx
  000fa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00104	59		 pop	 ecx
  00105	5f		 pop	 edi
  00106	5e		 pop	 esi
  00107	5b		 pop	 ebx
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c2 04 00	 ret	 4
$LN74@sentry:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  0010e	f6 c1 04	 test	 cl, 4
  00111	74 07		 je	 SHORT $LN46@sentry

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00113	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00118	eb 10		 jmp	 SHORT $LN48@sentry
$LN46@sentry:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  0011a	f6 c1 02	 test	 cl, 2
  0011d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00122	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00127	0f 44 f0	 cmove	 esi, eax
$LN48@sentry:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  0012a	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  0012d	6a 01		 push	 1
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00135	83 c4 08	 add	 esp, 8
  00138	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  0013b	50		 push	 eax
  0013c	56		 push	 esi
  0013d	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00142	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00147	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  0014a	50		 push	 eax
  0014b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN72@sentry:
  00150	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 108  : 			}

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 98   : 			: _Myostr(_Ostr)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ostr$[esp-4]

; 99   : 			{	// lock the stream buffer, if there

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 16		 mov	 DWORD PTR [esi], edx

; 100  : 			if (_Myostr.rdbuf() != nullptr)

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000e	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00012	85 c9		 test	 ecx, ecx
  00014	74 05		 je	 SHORT $LN8@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@Sentry_bas:

; 102  : 			}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Arg$[esp-4]

; 1590 : 	}

  00004	c3		 ret	 0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1919 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1919 : 		}

  00010	c2 04 00	 ret	 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Arg$[esp-4]

; 1590 : 	}

  00004	c3		 ret	 0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 346  : 	return (_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]

; 347  : 	}

  00004	c3		 ret	 0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0000a	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000c	0f 42 c2	 cmovb	 eax, edx

; 25   : 	}

  0000f	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<int> > >, COMDAT

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 331  : 	}

  00004	c3		 ret	 0
??$addressof@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@H@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
__Ok$ = -40						; size = 8
__Pad$ = -40						; size = 8
$T3 = -32						; size = 8
__State$ = -28						; size = 4
__Count$1$ = -24					; size = 4
tv810 = -24						; size = 4
$T4 = -17						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 790  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 790  : 	{	// insert NTBS into char stream

  0002e	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]

; 791  : 	typedef char _Elem;
; 792  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 793  : 	ios_base::iostate _State = ios_base::goodbit;

  00031	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00038	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0003b	0f 1f 44 00 00	 npad	 5
$LL127@operator:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL127@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 433  : 		return (_Wide);

  00047	8b 03		 mov	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00049	2b ca		 sub	 ecx, edx
  0004b	89 4d e8	 mov	 DWORD PTR __Count$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 433  : 		return (_Wide);

  0004e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00051	8b 7c 18 24	 mov	 edi, DWORD PTR [eax+ebx+36]
  00055	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 795  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00059	85 ff		 test	 edi, edi
  0005b	7c 17		 jl	 SHORT $LN17@operator
  0005d	7f 0e		 jg	 SHORT $LN129@operator
  0005f	85 f6		 test	 esi, esi
  00061	74 11		 je	 SHORT $LN17@operator
  00063	85 ff		 test	 edi, edi
  00065	7c 0d		 jl	 SHORT $LN17@operator
  00067	7f 04		 jg	 SHORT $LN129@operator
  00069	3b f1		 cmp	 esi, ecx
  0006b	76 07		 jbe	 SHORT $LN17@operator
$LN129@operator:
  0006d	2b f1		 sub	 esi, ecx
  0006f	83 df 00	 sbb	 edi, 0
  00072	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	66 0f 13 45 d8	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  0007c	8b 7d dc	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  0007f	8b 75 d8	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 796  : 		? 0 : _Ostr.width() - _Count;
; 797  : 	const typename _Myos::sentry _Ok(_Ostr);

  00082	53		 push	 ebx
  00083	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00086	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 798  : 
; 799  : 	if (!_Ok)

  0008b	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0008f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00096	75 0a		 jne	 SHORT $LN8@operator

; 800  : 		_State |= ios_base::badbit;

  00098	b9 04 00 00 00	 mov	 ecx, 4

; 801  : 	else

  0009d	e9 41 01 00 00	 jmp	 $LN22@operator
$LN8@operator:

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000a2	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000a4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  000a8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000ab	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000af	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000b4	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b7	74 6a		 je	 SHORT $LN123@operator
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@operator:

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  000c0	85 ff		 test	 edi, edi
  000c2	7c 5d		 jl	 SHORT $LN3@operator
  000c4	7f 04		 jg	 SHORT $LN130@operator
  000c6	85 f6		 test	 esi, esi
  000c8	74 57		 je	 SHORT $LN3@operator
$LN130@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 108  : 		return (_Fillch);

  000ca	8b 03		 mov	 eax, DWORD PTR [ebx]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8a 4c 18 40	 mov	 cl, BYTE PTR [eax+ebx+64]
  000d3	88 4d ef	 mov	 BYTE PTR $T5[ebp], cl

; 87   : 		return (_Mystrbuf);

  000d6	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  000da	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000dd	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e0	74 20		 je	 SHORT $LN42@operator
  000e2	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000e5	8b 02		 mov	 eax, DWORD PTR [edx]

; 198  : 		return (0 < _Pnavail()

  000e7	85 c0		 test	 eax, eax
  000e9	7e 17		 jle	 SHORT $LN42@operator

; 306  : 		--*_IPcount;

  000eb	48		 dec	 eax
  000ec	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  000ee	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  000f1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f3	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000f6	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  000f8	8a 45 ef	 mov	 al, BYTE PTR $T5[ebp]
  000fb	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  000fd	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00100	eb 0a		 jmp	 SHORT $LN43@operator
$LN42@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00102	0f b6 45 ef	 movzx	 eax, BYTE PTR $T5[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00106	8b 11		 mov	 edx, DWORD PTR [ecx]
  00108	50		 push	 eax
  00109	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN43@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 806  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0010c	83 f8 ff	 cmp	 eax, -1
  0010f	75 08		 jne	 SHORT $LN2@operator

; 807  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 808  : 					{	// insertion failed, quit
; 809  : 					_State |= ios_base::badbit;

  00111	8d 48 05	 lea	 ecx, DWORD PTR [eax+5]

; 810  : 					break;

  00114	e9 8d 00 00 00	 jmp	 $LN6@operator
$LN2@operator:

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00119	83 c6 ff	 add	 esi, -1
  0011c	83 d7 ff	 adc	 edi, -1
  0011f	eb 9f		 jmp	 SHORT $LL4@operator
$LN3@operator:

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00121	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LN123@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  00123	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 206  : 		return (xsputn(_Ptr, _Count));

  00126	6a 00		 push	 0
  00128	ff 75 e8	 push	 DWORD PTR __Count$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  0012b	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 206  : 		return (xsputn(_Ptr, _Count));

  0012f	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00132	8b 01		 mov	 eax, DWORD PTR [ecx]
  00134	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00137	ff d0		 call	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00139	3b 45 e8	 cmp	 eax, DWORD PTR __Count$1$[ebp]
  0013c	75 57		 jne	 SHORT $LN131@operator
  0013e	85 d2		 test	 edx, edx
  00140	75 53		 jne	 SHORT $LN131@operator
$LL133@operator:

; 815  : 			_State |= ios_base::badbit;
; 816  : 
; 817  : 		if (_State == ios_base::goodbit)
; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00142	85 ff		 test	 edi, edi
  00144	7c 5e		 jl	 SHORT $LN136@operator
  00146	7f 04		 jg	 SHORT $LN132@operator
  00148	85 f6		 test	 esi, esi
  0014a	74 58		 je	 SHORT $LN136@operator
$LN132@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 108  : 		return (_Fillch);

  0014c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0014e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 87   : 		return (_Mystrbuf);

  00151	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]

; 108  : 		return (_Fillch);

  00155	8a 54 18 40	 mov	 dl, BYTE PTR [eax+ebx+64]
  00159	88 55 ef	 mov	 BYTE PTR $T4[ebp], dl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

  0015c	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0015f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00162	74 23		 je	 SHORT $LN68@operator
  00164	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00167	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  : 		return (0 < _Pnavail()

  00169	85 c0		 test	 eax, eax
  0016b	7e 1a		 jle	 SHORT $LN68@operator

; 306  : 		--*_IPcount;

  0016d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00170	48		 dec	 eax
  00171	89 02		 mov	 DWORD PTR [edx], eax

; 307  : 		return ((*_IPnext)++);

  00173	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00176	8b 11		 mov	 edx, DWORD PTR [ecx]
  00178	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0017b	89 01		 mov	 DWORD PTR [ecx], eax

; 198  : 		return (0 < _Pnavail()

  0017d	8a 45 ef	 mov	 al, BYTE PTR $T4[ebp]
  00180	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00182	0f b6 c0	 movzx	 eax, al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  00185	eb 09		 jmp	 SHORT $LN69@operator
$LN68@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00187	0f b6 c2	 movzx	 eax, dl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 198  : 		return (0 < _Pnavail()

  0018a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0018c	50		 push	 eax
  0018d	ff 52 0c	 call	 DWORD PTR [edx+12]
$LN69@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 819  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00190	83 f8 ff	 cmp	 eax, -1
  00193	75 07		 jne	 SHORT $LN5@operator
$LN131@operator:

; 820  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 821  : 					{	// insertion failed, quit
; 822  : 					_State |= ios_base::badbit;
; 823  : 					break;
; 824  : 					}
; 825  : 		_Ostr.width(0);

  00195	b9 04 00 00 00	 mov	 ecx, 4
  0019a	eb 0a		 jmp	 SHORT $LN6@operator
$LN5@operator:

; 815  : 			_State |= ios_base::badbit;
; 816  : 
; 817  : 		if (_State == ios_base::goodbit)
; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0019c	83 c6 ff	 add	 esi, -1
  0019f	83 d7 ff	 adc	 edi, -1
  001a2	eb 9e		 jmp	 SHORT $LL133@operator
$LN136@operator:

; 820  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 821  : 					{	// insertion failed, quit
; 822  : 					_State |= ios_base::badbit;
; 823  : 					break;
; 824  : 					}
; 825  : 		_Ostr.width(0);

  001a4	33 c9		 xor	 ecx, ecx
$LN6@operator:
  001a6	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 439  : 		_Wide = _Newwidth;

  001ab	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  001b3	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
  001bb	eb 1f		 jmp	 SHORT $LN141@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 826  : 		_CATCH_IO_(_Ostr)

  001bd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c0	6a 01		 push	 1
  001c2	6a 04		 push	 4
  001c4	8b 02		 mov	 eax, DWORD PTR [edx]
  001c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001c9	03 ca		 add	 ecx, edx
  001cb	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  001d0	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001d5	c3		 ret	 0
$LN23@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
  001d6	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  001d9	8b 4d e4	 mov	 ecx, DWORD PTR __State$[ebp]
$LN141@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 829  : 	_Ostr.setstate(_State);

  001dc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN22@operator:
  001e3	8b 03		 mov	 eax, DWORD PTR [ebx]
  001e5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  001e8	8b 44 1a 0c	 mov	 eax, DWORD PTR [edx+ebx+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 829  : 	_Ostr.setstate(_State);

  001ec	03 d3		 add	 edx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  001ee	0b c1		 or	 eax, ecx

; 288  : 		_State &= _Statmask;

  001f0	8b c8		 mov	 ecx, eax
  001f2	83 c9 04	 or	 ecx, 4
  001f5	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  001f9	0f 45 c8	 cmovne	 ecx, eax

; 289  : 		_Mystate = _State;
; 290  : 		const auto _Filtered = _State & _Except;

  001fc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001ff	83 e1 17	 and	 ecx, 23			; 00000017H
  00202	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00205	23 c1		 and	 eax, ecx

; 291  : 		if (_Filtered)

  00207	75 45		 jne	 SHORT $LN143@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 135  : 			{	// destroy the object

  00209	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00210	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00215	84 c0		 test	 al, al
  00217	75 08		 jne	 SHORT $LN106@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00219	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0021c	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN106@operator:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00221	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00224	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00228	8b 01		 mov	 eax, DWORD PTR [ecx]
  0022a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0022d	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00231	85 c9		 test	 ecx, ecx
  00233	74 05		 je	 SHORT $LN110@operator

; 107  : 				_Myostr.rdbuf()->_Unlock();

  00235	8b 11		 mov	 edx, DWORD PTR [ecx]
  00237	ff 52 08	 call	 DWORD PTR [edx+8]
$LN110@operator:

; 830  : 	return (_Ostr);

  0023a	8b c3		 mov	 eax, ebx

; 831  : 	}

  0023c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0023f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00246	59		 pop	 ecx
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	8b e5		 mov	 esp, ebp
  0024c	5d		 pop	 ebp
  0024d	c3		 ret	 0
$LN143@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  0024e	a8 04		 test	 al, 4
  00250	74 07		 je	 SHORT $LN97@operator

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00252	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00257	eb 0f		 jmp	 SHORT $LN99@operator
$LN97@operator:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  00259	a8 02		 test	 al, 2
  0025b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00260	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00265	0f 44 f0	 cmove	 esi, eax
$LN99@operator:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  00268	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  0026b	6a 01		 push	 1
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00273	83 c4 08	 add	 esp, 8
  00276	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00279	50		 push	 eax
  0027a	56		 push	 esi
  0027b	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00280	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00285	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00288	50		 push	 eax
  00289	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN138@operator:
  0028e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -48						; size = 20
$T3 = -28						; size = 8
__Ok$4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 586  : 		{	// flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 587  : 		if (_Myios::rdbuf() != nullptr)

  0002d	83 7c 30 38 00	 cmp	 DWORD PTR [eax+esi+56], 0
  00032	74 75		 je	 SHORT $LN63@flush

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

  00034	56		 push	 esi
  00035	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  00038	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  0003d	80 7d f0 00	 cmp	 BYTE PTR __Ok$4[ebp+4], 0
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	74 2e		 je	 SHORT $LN48@flush
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  0004a	8b 06		 mov	 eax, DWORD PTR [esi]
  0004c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004f	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 143  : 		return (sync());

  00053	8b 01		 mov	 eax, DWORD PTR [ecx]
  00055	ff 50 34	 call	 DWORD PTR [eax+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00058	83 f8 ff	 cmp	 eax, -1
  0005b	75 1b		 jne	 SHORT $LN48@flush

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  0005d	8b 06		 mov	 eax, DWORD PTR [esi]
  0005f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 288  : 		_State &= _Statmask;

  00062	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  00066	83 e0 13	 and	 eax, 19			; 00000013H
  00069	83 c8 04	 or	 eax, 4

; 289  : 		_Mystate = _State;

  0006c	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 290  : 		const auto _Filtered = _State & _Except;

  00070	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  00074	23 c8		 and	 ecx, eax

; 291  : 		if (_Filtered)

  00076	75 43		 jne	 SHORT $LN73@flush
$LN48@flush:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 135  : 			{	// destroy the object

  00078	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  0007f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00084	84 c0		 test	 al, al
  00086	75 08		 jne	 SHORT $LN59@flush

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00088	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN59@flush:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00090	8b 4d ec	 mov	 ecx, DWORD PTR __Ok$4[ebp]
  00093	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00097	8b 01		 mov	 eax, DWORD PTR [ecx]
  00099	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009c	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  000a0	85 c9		 test	 ecx, ecx
  000a2	74 05		 je	 SHORT $LN63@flush

; 107  : 				_Myostr.rdbuf()->_Unlock();

  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	ff 50 08	 call	 DWORD PTR [eax+8]
$LN63@flush:

; 593  : 			}
; 594  : 		return (*this);

  000a9	8b c6		 mov	 eax, esi

; 595  : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5e		 pop	 esi
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN73@flush:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  000bb	f6 c1 04	 test	 cl, 4
  000be	74 07		 je	 SHORT $LN50@flush

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  000c0	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  000c5	eb 10		 jmp	 SHORT $LN52@flush
$LN50@flush:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  000c7	f6 c1 02	 test	 cl, 2
  000ca	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  000cf	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000d4	0f 44 f0	 cmove	 esi, eax
$LN52@flush:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  000d7	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  000da	6a 01		 push	 1
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000e2	83 c4 08	 add	 esp, 8
  000e5	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  000e8	50		 push	 eax
  000e9	56		 push	 esi
  000ea	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000ef	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000f4	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  000f7	50		 push	 eax
  000f8	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN71@flush:
  000fd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Ok$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
_TEXT	SEGMENT
$T2 = -72						; size = 20
$T3 = -52						; size = 8
$T4 = -52						; size = 8
$T5 = -52						; size = 8
__Ok$ = -44						; size = 8
__State$ = -36						; size = 4
$T6 = -32						; size = 8
$T7 = -28						; size = 1
__Nput_fac$1$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 321  : 		{	// insert an unsigned int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 322  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 323  : 		const sentry _Ok(*this);

  00032	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00035	56		 push	 esi
  00036	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi
  00039	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 324  : 
; 325  : 		if (_Ok)

  0003e	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00042	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00045	0f 84 ad 00 00
	00		 je	 $LN10@operator

; 327  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  00050	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00054	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00057	8b cb		 mov	 ecx, ebx
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	89 5d e4	 mov	 DWORD PTR $T6[ebp+4], ebx
  00060	8b 03		 mov	 eax, DWORD PTR [ebx]
  00062	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 327  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00065	8d 45 e0	 lea	 eax, DWORD PTR $T6[ebp]
  00068	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 e8	 mov	 DWORD PTR __Nput_fac$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  00078	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0007c	85 db		 test	 ebx, ebx

; 409  : 		if (_Ptr != nullptr)

  0007e	74 13		 je	 SHORT $LN24@operator

; 410  : 			delete _Ptr->_Decref();

  00080	8b 13		 mov	 edx, DWORD PTR [ebx]
  00082	8b cb		 mov	 ecx, ebx
  00084	ff 52 08	 call	 DWORD PTR [edx+8]
  00087	85 c0		 test	 eax, eax
  00089	74 08		 je	 SHORT $LN24@operator
  0008b	8b 10		 mov	 edx, DWORD PTR [eax]
  0008d	8b c8		 mov	 ecx, eax
  0008f	6a 01		 push	 1
  00091	ff 12		 call	 DWORD PTR [edx]
$LN24@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 108  : 		return (_Fillch);

  00093	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  00095	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00098	8b 55 e8	 mov	 edx, DWORD PTR __Nput_fac$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 329  : 			_TRY_IO_BEGIN

  0009b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 108  : 		return (_Fillch);

  0009f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a2	8a 44 31 40	 mov	 al, BYTE PTR [ecx+esi+64]
  000a6	03 ce		 add	 ecx, esi
  000a8	88 45 e4	 mov	 BYTE PTR $T7[ebp], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  000ab	ff 75 e4	 push	 DWORD PTR $T7[ebp]
  000ae	8b 02		 mov	 eax, DWORD PTR [edx]
  000b0	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  000b1	c6 45 cc 00	 mov	 BYTE PTR $T5[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  000b5	ff 71 38	 push	 DWORD PTR [ecx+56]
  000b8	8d 4d cc	 lea	 ecx, DWORD PTR $T4[ebp]
  000bb	ff 75 cc	 push	 DWORD PTR $T5[ebp]
  000be	51		 push	 ecx
  000bf	8b ca		 mov	 ecx, edx
  000c1	ff 50 20	 call	 DWORD PTR [eax+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 331  : 				_Myios::fill(), (unsigned long)_Val).failed())

  000c4	80 7d cc 00	 cmp	 BYTE PTR $T4[ebp], 0
  000c8	b8 04 00 00 00	 mov	 eax, 4
  000cd	0f 45 f8	 cmovne	 edi, eax
  000d0	eb 1f		 jmp	 SHORT $LN70@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0:

; 332  : 				_State |= ios_base::badbit;
; 333  : 			_CATCH_IO_END

  000d2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	6a 01		 push	 1
  000d7	6a 04		 push	 4
  000d9	8b 02		 mov	 eax, DWORD PTR [edx]
  000db	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000de	03 ca		 add	 ecx, edx
  000e0	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000e5	b8 00 00 00 00	 mov	 eax, $LN11@operator
  000ea	c3		 ret	 0
$LN11@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
  000eb	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000ee	8b 7d dc	 mov	 edi, DWORD PTR __State$[ebp]
$LN70@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 336  : 		_Myios::setstate(_State);

  000f1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN10@operator:
  000f8	8b 06		 mov	 eax, DWORD PTR [esi]
  000fa	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  000fd	8b 44 32 0c	 mov	 eax, DWORD PTR [edx+esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 336  : 		_Myios::setstate(_State);

  00101	03 d6		 add	 edx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  00103	0b c7		 or	 eax, edi

; 288  : 		_State &= _Statmask;

  00105	8b c8		 mov	 ecx, eax
  00107	83 c9 04	 or	 ecx, 4
  0010a	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  0010e	0f 45 c8	 cmovne	 ecx, eax

; 289  : 		_Mystate = _State;
; 290  : 		const auto _Filtered = _State & _Except;

  00111	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00114	83 e1 17	 and	 ecx, 23			; 00000017H
  00117	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0011a	23 c1		 and	 eax, ecx

; 291  : 		if (_Filtered)

  0011c	75 47		 jne	 SHORT $LN72@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 135  : 			{	// destroy the object

  0011e	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00125	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0012a	84 c0		 test	 al, al
  0012c	75 08		 jne	 SHORT $LN57@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  0012e	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00131	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN57@operator:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00136	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00139	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0013d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00142	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00146	85 c9		 test	 ecx, ecx
  00148	74 05		 je	 SHORT $LN61@operator

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0014a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014c	ff 50 08	 call	 DWORD PTR [eax+8]
$LN61@operator:

; 337  : 		return (*this);

  0014f	8b c6		 mov	 eax, esi

; 338  : 		}

  00151	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00154	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015b	59		 pop	 ecx
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 04 00	 ret	 4
$LN72@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  00165	a8 04		 test	 al, 4
  00167	74 07		 je	 SHORT $LN48@operator

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00169	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0016e	eb 0f		 jmp	 SHORT $LN50@operator
$LN48@operator:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  00170	a8 02		 test	 al, 2
  00172	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00177	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0017c	0f 44 f0	 cmove	 esi, eax
$LN50@operator:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  0017f	8d 45 cc	 lea	 eax, DWORD PTR $T3[ebp]
  00182	6a 01		 push	 1
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0018a	83 c4 08	 add	 esp, 8
  0018d	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  00190	50		 push	 eax
  00191	56		 push	 esi
  00192	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00197	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0019c	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN69@operator:
  001a5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T2 = -68						; size = 20
$T3 = -48						; size = 8
$T4 = -48						; size = 8
$T5 = -48						; size = 8
__Ok$ = -40						; size = 8
__State$ = -32						; size = 4
_this$ = -28						; size = 4
$T6 = -24						; size = 8
__Nput_fac$1$ = -20					; size = 4
$T7 = -20						; size = 1
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 296  : 		{	// insert an int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e4	 mov	 DWORD PTR _this$[ebp], esi

; 297  : 		ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 298  : 		const sentry _Ok(*this);

  00032	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00035	56		 push	 esi
  00036	89 7d e0	 mov	 DWORD PTR __State$[ebp], edi
  00039	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 299  : 
; 300  : 		if (_Ok)

  0003e	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00042	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00045	0f 84 af 00 00
	00		 je	 $LN12@operator

; 302  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  00050	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00054	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 304  : 		_Ptr->_Incref();

  00057	8b cb		 mov	 ecx, ebx
  00059	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0005d	89 5d ec	 mov	 DWORD PTR $T6[ebp+4], ebx
  00060	8b 03		 mov	 eax, DWORD PTR [ebx]
  00062	ff 50 04	 call	 DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 302  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00065	8d 45 e8	 lea	 eax, DWORD PTR $T6[ebp]
  00068	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00072	8b d0		 mov	 edx, eax
  00074	83 c4 04	 add	 esp, 4
  00077	89 55 ec	 mov	 DWORD PTR __Nput_fac$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 408  : 		{	// destroy the object

  0007a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0007e	85 db		 test	 ebx, ebx

; 409  : 		if (_Ptr != nullptr)

  00080	74 16		 je	 SHORT $LN26@operator

; 410  : 			delete _Ptr->_Decref();

  00082	8b 13		 mov	 edx, DWORD PTR [ebx]
  00084	8b cb		 mov	 ecx, ebx
  00086	ff 52 08	 call	 DWORD PTR [edx+8]
  00089	85 c0		 test	 eax, eax
  0008b	74 08		 je	 SHORT $LN72@operator
  0008d	8b 10		 mov	 edx, DWORD PTR [eax]
  0008f	8b c8		 mov	 ecx, eax
  00091	6a 01		 push	 1
  00093	ff 12		 call	 DWORD PTR [edx]
$LN72@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  00095	8b 55 ec	 mov	 edx, DWORD PTR __Nput_fac$1$[ebp]
$LN26@operator:
  00098	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1464 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  0009a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 309  : 			_TRY_IO_BEGIN

  0009d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 390  : 		return (_Fmtfl);

  000a1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 108  : 		return (_Fillch);

  000a4	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000a7	8a 41 40	 mov	 al, BYTE PTR [ecx+64]
  000aa	88 45 ec	 mov	 BYTE PTR $T7[ebp], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1464 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  000ad	ff 75 ec	 push	 DWORD PTR $T7[ebp]
  000b0	8b 02		 mov	 eax, DWORD PTR [edx]
  000b2	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 670  : 		: _Failed(false), _Strbuf(_Sb)

  000b3	c6 45 d0 00	 mov	 BYTE PTR $T5[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocnum

; 1464 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  000b7	ff 71 38	 push	 DWORD PTR [ecx+56]
  000ba	8d 4d d0	 lea	 ecx, DWORD PTR $T4[ebp]
  000bd	ff 75 d0	 push	 DWORD PTR $T5[ebp]
  000c0	51		 push	 ecx
  000c1	8b ca		 mov	 ecx, edx
  000c3	ff 50 24	 call	 DWORD PTR [eax+36]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 311  : 				_Myios::fill(), _Tmp).failed())

  000c6	80 7d d0 00	 cmp	 BYTE PTR $T4[ebp], 0
  000ca	b8 04 00 00 00	 mov	 eax, 4
  000cf	0f 45 f8	 cmovne	 edi, eax
  000d2	eb 1f		 jmp	 SHORT $LN75@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 312  : 				_State |= ios_base::badbit;
; 313  : 			_CATCH_IO_END

  000d4	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000d7	6a 01		 push	 1
  000d9	6a 04		 push	 4
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e0	03 ca		 add	 ecx, edx
  000e2	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000e7	b8 00 00 00 00	 mov	 eax, $LN13@operator
  000ec	c3		 ret	 0
$LN13@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
  000ed	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  000f0	8b 7d e0	 mov	 edi, DWORD PTR __State$[ebp]
$LN75@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 316  : 		_Myios::setstate(_State);

  000f3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@operator:
  000fa	8b 06		 mov	 eax, DWORD PTR [esi]
  000fc	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  000ff	8b 44 32 0c	 mov	 eax, DWORD PTR [edx+esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 316  : 		_Myios::setstate(_State);

  00103	03 d6		 add	 edx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  00105	0b c7		 or	 eax, edi

; 288  : 		_State &= _Statmask;

  00107	8b c8		 mov	 ecx, eax
  00109	83 c9 04	 or	 ecx, 4
  0010c	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00110	0f 45 c8	 cmovne	 ecx, eax

; 289  : 		_Mystate = _State;
; 290  : 		const auto _Filtered = _State & _Except;

  00113	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00116	83 e1 17	 and	 ecx, 23			; 00000017H
  00119	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0011c	23 c1		 and	 eax, ecx

; 291  : 		if (_Filtered)

  0011e	75 47		 jne	 SHORT $LN77@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 135  : 			{	// destroy the object

  00120	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 6

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

  00127	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0012c	84 c0		 test	 al, al
  0012e	75 08		 jne	 SHORT $LN61@operator

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

  00130	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00133	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN61@operator:

; 106  : 			if (_Myostr.rdbuf() != nullptr)

  00138	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0013b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+12], 7
  0013f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00141	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00144	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
  00148	85 c9		 test	 ecx, ecx
  0014a	74 05		 je	 SHORT $LN65@operator

; 107  : 				_Myostr.rdbuf()->_Unlock();

  0014c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014e	ff 50 08	 call	 DWORD PTR [eax+8]
$LN65@operator:

; 317  : 		return (*this);

  00151	8b c6		 mov	 eax, esi

; 318  : 		}

  00153	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00156	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015d	59		 pop	 ecx
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi
  00160	5b		 pop	 ebx
  00161	8b e5		 mov	 esp, ebp
  00163	5d		 pop	 ebp
  00164	c2 04 00	 ret	 4
$LN77@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  00167	a8 04		 test	 al, 4
  00169	74 07		 je	 SHORT $LN52@operator

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  0016b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00170	eb 0f		 jmp	 SHORT $LN54@operator
$LN52@operator:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  00172	a8 02		 test	 al, 2
  00174	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00179	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0017e	0f 44 f0	 cmove	 esi, eax
$LN54@operator:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  00181	8d 45 d0	 lea	 eax, DWORD PTR $T3[ebp]
  00184	6a 01		 push	 1
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0018c	83 c4 08	 add	 esp, 8
  0018f	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00192	50		 push	 eax
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00199	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0019e	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN74@operator:
  001a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 176  : 		{	// perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 177  : 		_TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 330  : 		return (_Mystate);

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 352  : 		return (rdstate() == ios_base::goodbit);

  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 178  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  0003e	75 38		 jne	 SHORT $LN29@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN29@Osfx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios

; 87   : 		return (_Mystrbuf);

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\streambuf

; 143  : 		return (sync());

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 179  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN29@Osfx

; 180  : 				_Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 288  : 		_State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 289  : 		_Mystate = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 290  : 		const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 291  : 		if (_Filtered)

  0006e	75 1a		 jne	 SHORT $LN42@Osfx
  00070	eb 06		 jmp	 SHORT $LN29@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ostream

; 182  : 		_CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN29@Osfx
  00077	c3		 ret	 0
$LN29@Osfx:

; 183  : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN42@Osfx:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 299  : 			if (_Filtered & ios_base::badbit)

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN31@Osfx

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN33@Osfx
$LN31@Osfx:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN33@Osfx:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@Osfx:
  000cc	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 108  : 		return (_Fillch);

  00000	8a 41 40	 mov	 al, BYTE PTR [ecx+64]

; 109  : 		}

  00003	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 87   : 		return (_Mystrbuf);

  00000	8b 41 38	 mov	 eax, DWORD PTR [ecx+56]

; 88   : 		}

  00003	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 75   : 		return (_Tiestr);

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 76   : 		}

  00003	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 55   : 		clear(rdstate() | _State, _Reraise);

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	0b 54 24 04	 or	 edx, DWORD PTR __State$[esp-4]

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00007	ff 74 24 08	 push	 DWORD PTR __Reraise$[esp-4]
  0000b	8b c2		 mov	 eax, edx
  0000d	83 c8 04	 or	 eax, 4
  00010	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  00014	0f 45 c2	 cmovne	 eax, edx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 56   : 		}

  0001d	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __State$[esp-4]
  00004	ff 74 24 08	 push	 DWORD PTR __Reraise$[esp-4]
  00008	83 ca 04	 or	 edx, 4
  0000b	83 79 38 00	 cmp	 DWORD PTR [ecx+56], 0
  0000f	0f 45 54 24 08	 cmovne	 edx, DWORD PTR __State$[esp]
  00014	52		 push	 edx
  00015	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 44   : 		}

  0001a	c2 08 00	 ret	 8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.hpp
;	COMDAT ?Running@Game@core@@QBE_NXZ
_TEXT	SEGMENT
?Running@Game@core@@QBE_NXZ PROC			; core::Game::Running, COMDAT
; _this$ = ecx

; 60   :         inline bool Running()              const { return m_running; }

  00000	8a 41 44	 mov	 al, BYTE PTR [ecx+68]
  00003	c3		 ret	 0
?Running@Game@core@@QBE_NXZ ENDP			; core::Game::Running
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.hpp
;	COMDAT ?Quit@Game@core@@QAEXXZ
_TEXT	SEGMENT
?Quit@Game@core@@QAEXXZ PROC				; core::Game::Quit, COMDAT
; _this$ = ecx

; 58   :         inline void Quit() { m_running = false; }

  00000	c6 41 44 00	 mov	 BYTE PTR [ecx+68], 0
  00004	c3		 ret	 0
?Quit@Game@core@@QAEXXZ ENDP				; core::Game::Quit
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?Clean@Game@core@@QAEXXZ
_TEXT	SEGMENT
?Clean@Game@core@@QAEXXZ PROC				; core::Game::Clean, COMDAT
; _this$ = ecx

; 383  : {

  00000	56		 push	 esi

; 384  :     std::cout << "Closing the game. Cleaning up all the mess...\n";

  00001	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@DGBGMEIB@Closing?5the?5game?4?5Cleaning?5up?5a@
  00006	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 385  :     SDL_DestroyRenderer(m_renderer);

  00012	ff 76 0c	 push	 DWORD PTR [esi+12]
  00015	e8 00 00 00 00	 call	 _SDL_DestroyRenderer

; 386  :     SDL_DestroyWindow(m_window);

  0001a	ff 76 08	 push	 DWORD PTR [esi+8]
  0001d	e8 00 00 00 00	 call	 _SDL_DestroyWindow

; 387  :     TTF_CloseFont(m_font);

  00022	ff 76 40	 push	 DWORD PTR [esi+64]
  00025	e8 00 00 00 00	 call	 _TTF_CloseFont
  0002a	83 c4 14	 add	 esp, 20			; 00000014H

; 388  :     TTF_Quit();

  0002d	e8 00 00 00 00	 call	 _TTF_Quit

; 389  :     SDL_Quit();

  00032	5e		 pop	 esi
  00033	e9 00 00 00 00	 jmp	 _SDL_Quit
?Clean@Game@core@@QAEXXZ ENDP				; core::Game::Clean
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\game.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\game.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?MainLoop@Game@core@@QAEXXZ
_TEXT	SEGMENT
tv330 = -82						; size = 1
tv332 = -81						; size = 1
_prevInput$1 = -80					; size = 14
_keyCount$2 = -64					; size = 4
_e$3 = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
?MainLoop@Game@core@@QAEXXZ PROC			; core::Game::MainLoop, COMDAT
; _this$ = ecx

; 369  : {

  00000	83 ec 54	 sub	 esp, 84			; 00000054H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 50	 mov	 DWORD PTR __$ArrayPad$[esp+84], eax
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx

; 370  :     while (Running())

  00011	80 7e 44 00	 cmp	 BYTE PTR [esi+68], 0
  00015	0f 84 33 01 00
	00		 je	 $LN3@MainLoop
  0001b	53		 push	 ebx
  0001c	57		 push	 edi
  0001d	0f 1f 00	 npad	 3
$LL2@MainLoop:

; 95   :     m_game.time.time = SDL_GetTicks() / 1000.0f;

  00020	e8 00 00 00 00	 call	 _SDL_GetTicks
  00025	66 0f 6e c0	 movd	 xmm0, eax
  00029	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0002d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00030	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]

; 98   :     while (SDL_PollEvent(&e))

  00039	8d 44 24 24	 lea	 eax, DWORD PTR _e$3[esp+96]
  0003d	50		 push	 eax
  0003e	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00042	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0004a	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0
  0004f	e8 00 00 00 00	 call	 _SDL_PollEvent
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	74 24		 je	 SHORT $LN9@MainLoop
  0005b	0f 1f 44 00 00	 npad	 5
$LL8@MainLoop:

; 99   :     {
; 100  :         if (e.type == SDL_QUIT)

  00060	81 7c 24 24 00
	01 00 00	 cmp	 DWORD PTR _e$3[esp+96], 256 ; 00000100H
  00068	75 04		 jne	 SHORT $LN28@MainLoop
; File c:\dev\tetris\src\game.hpp

; 58   :         inline void Quit() { m_running = false; }

  0006a	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
$LN28@MainLoop:
; File c:\dev\tetris\src\game.cpp

; 98   :     while (SDL_PollEvent(&e))

  0006e	8d 44 24 24	 lea	 eax, DWORD PTR _e$3[esp+96]
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _SDL_PollEvent
  00078	83 c4 04	 add	 esp, 4
  0007b	85 c0		 test	 eax, eax
  0007d	75 e1		 jne	 SHORT $LL8@MainLoop
$LN9@MainLoop:

; 110  :     const u8 *keyStates = SDL_GetKeyboardState(&keyCount);

  0007f	8d 44 24 20	 lea	 eax, DWORD PTR _keyCount$2[esp+96]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  00089	8b f8		 mov	 edi, eax
  0008b	83 c4 04	 add	 esp, 4

; 111  :     
; 112  :     if (keyStates)

  0008e	85 ff		 test	 edi, edi
  00090	0f 84 93 00 00
	00		 je	 $LN15@MainLoop

; 113  :     {
; 114  :         if (keyStates[SDL_SCANCODE_ESCAPE])

  00096	80 7f 29 00	 cmp	 BYTE PTR [edi+41], 0
  0009a	74 04		 je	 SHORT $LN16@MainLoop
; File c:\dev\tetris\src\game.hpp

; 58   :         inline void Quit() { m_running = false; }

  0009c	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
$LN16@MainLoop:
; File c:\dev\tetris\src\game.cpp

; 121  :         m_input.left   = keyStates[SDL_SCANCODE_LEFT];

  000a0	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  000a3	f3 0f 7e 46 30	 movq	 xmm0, QWORD PTR [esi+48]
  000a8	88 46 30	 mov	 BYTE PTR [esi+48], al

; 122  :         m_input.right  = keyStates[SDL_SCANCODE_RIGHT];

  000ab	8a 57 4f	 mov	 dl, BYTE PTR [edi+79]
  000ae	88 56 31	 mov	 BYTE PTR [esi+49], dl

; 123  :         m_input.up     = keyStates[SDL_SCANCODE_UP];

  000b1	8a 5f 52	 mov	 bl, BYTE PTR [edi+82]
  000b4	88 5e 32	 mov	 BYTE PTR [esi+50], bl

; 124  :         m_input.down   = keyStates[SDL_SCANCODE_DOWN];

  000b7	8a 77 51	 mov	 dh, BYTE PTR [edi+81]
  000ba	88 76 33	 mov	 BYTE PTR [esi+51], dh

; 125  :         m_input.space  = keyStates[SDL_SCANCODE_SPACE];

  000bd	8a 7f 2c	 mov	 bh, BYTE PTR [edi+44]
  000c0	88 7e 34	 mov	 BYTE PTR [esi+52], bh

; 126  :         m_input.enter  = keyStates[SDL_SCANCODE_RETURN];

  000c3	8a 4f 28	 mov	 cl, BYTE PTR [edi+40]
  000c6	88 4c 24 0e	 mov	 BYTE PTR tv330[esp+96], cl
  000ca	88 4e 35	 mov	 BYTE PTR [esi+53], cl

; 127  :         m_input.z      = keyStates[SDL_SCANCODE_Z];

  000cd	8a 4f 1d	 mov	 cl, BYTE PTR [edi+29]
  000d0	66 0f d6 44 24
	10		 movq	 QWORD PTR _prevInput$1[esp+96], xmm0

; 128  :         
; 129  :         m_input.dleft  = m_input.left - prevInput.left;

  000d6	2a 44 24 10	 sub	 al, BYTE PTR _prevInput$1[esp+96]

; 130  :         m_input.dright = m_input.right - prevInput.right;
; 131  :         m_input.dup    = m_input.up - prevInput.up;
; 132  :         m_input.ddown  = m_input.down - prevInput.down;
; 133  :         m_input.dspace = m_input.space - prevInput.space;

  000da	2a 7c 24 14	 sub	 bh, BYTE PTR _prevInput$1[esp+100]
  000de	88 46 37	 mov	 BYTE PTR [esi+55], al
  000e1	88 4c 24 0f	 mov	 BYTE PTR tv332[esp+96], cl
  000e5	88 4e 36	 mov	 BYTE PTR [esi+54], cl
  000e8	8b 4c 24 10	 mov	 ecx, DWORD PTR _prevInput$1[esp+96]
  000ec	8b c1		 mov	 eax, ecx
  000ee	c1 e8 08	 shr	 eax, 8
  000f1	2a d0		 sub	 dl, al
  000f3	88 7e 3b	 mov	 BYTE PTR [esi+59], bh
  000f6	8b c1		 mov	 eax, ecx
  000f8	88 56 38	 mov	 BYTE PTR [esi+56], dl

; 134  :         m_input.denter = m_input.enter - prevInput.enter;

  000fb	8a 54 24 0e	 mov	 dl, BYTE PTR tv330[esp+96]
  000ff	c1 e8 10	 shr	 eax, 16			; 00000010H
  00102	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00105	2a d8		 sub	 bl, al
  00107	2a f1		 sub	 dh, cl
  00109	88 5e 39	 mov	 BYTE PTR [esi+57], bl
  0010c	8b 4c 24 14	 mov	 ecx, DWORD PTR _prevInput$1[esp+100]
  00110	8b c1		 mov	 eax, ecx
  00112	c1 e8 08	 shr	 eax, 8
  00115	2a d0		 sub	 dl, al

; 135  :         m_input.dz     = m_input.z - prevInput.z;

  00117	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0011a	8a 44 24 0f	 mov	 al, BYTE PTR tv332[esp+96]
  0011e	2a c1		 sub	 al, cl
  00120	88 76 3a	 mov	 BYTE PTR [esi+58], dh
  00123	88 56 3c	 mov	 BYTE PTR [esi+60], dl
  00126	88 46 3d	 mov	 BYTE PTR [esi+61], al
$LN15@MainLoop:

; 371  :     {
; 372  :         HandleEvents();
; 373  :         HandleInput();
; 374  :         
; 375  :         Update();

  00129	8b ce		 mov	 ecx, esi
  0012b	e8 00 00 00 00	 call	 ?Update@Game@core@@QAEXXZ ; core::Game::Update

; 376  :         Render();

  00130	8b ce		 mov	 ecx, esi
  00132	e8 00 00 00 00	 call	 ?Render@Game@core@@QAEXXZ ; core::Game::Render

; 377  :         
; 378  :         SDL_RenderPresent(m_renderer);

  00137	ff 76 0c	 push	 DWORD PTR [esi+12]
  0013a	e8 00 00 00 00	 call	 _SDL_RenderPresent
  0013f	83 c4 04	 add	 esp, 4
  00142	80 7e 44 00	 cmp	 BYTE PTR [esi+68], 0
  00146	0f 85 d4 fe ff
	ff		 jne	 $LL2@MainLoop
  0014c	5f		 pop	 edi
  0014d	5b		 pop	 ebx
$LN3@MainLoop:

; 379  :     }
; 380  : }

  0014e	8b 4c 24 54	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+88]
  00152	5e		 pop	 esi
  00153	33 cc		 xor	 ecx, esp
  00155	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015a	83 c4 54	 add	 esp, 84			; 00000054H
  0015d	c3		 ret	 0
?MainLoop@Game@core@@QAEXXZ ENDP			; core::Game::MainLoop
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?Render@Game@core@@QAEXXZ
_TEXT	SEGMENT
_backColor$ = -4132					; size = 4
_piece$1 = -4128					; size = 28
_buffer$2 = -4100					; size = 4096
_buffer$3 = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
?Render@Game@core@@QAEXXZ PROC				; core::Game::Render, COMDAT
; _this$ = ecx

; 332  : {

  00000	b8 24 10 00 00	 mov	 eax, 4132		; 00001024H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 20 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4132], eax
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 335  :     Graphics::Instance()->FillBackground(backColor);

  0001c	51		 push	 ecx
  0001d	8b c4		 mov	 eax, esp
; File c:\dev\tetris\src\color.hpp

; 26   :             this->r = r;

  0001f	c7 44 24 14 64
	64 64 ff	 mov	 DWORD PTR _backColor$[esp+4152], -10197916 ; ff646464H

; 21   :             *this = t_color;

  00027	8b 74 24 14	 mov	 esi, DWORD PTR _backColor$[esp+4152]
; File c:\dev\tetris\src\game.cpp

; 332  : {

  0002b	8b e9		 mov	 ebp, ecx
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0002d	89 30		 mov	 DWORD PTR [eax], esi
; File c:\dev\tetris\src\game.cpp

; 335  :     Graphics::Instance()->FillBackground(backColor);

  0002f	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z ; core::graphics::Graphics::FillBackground

; 336  :     
; 337  :     i32 yMargin = (BOARD_ROWS - BOARD_VISIBLE_ROWS) * BOARD_GRID_SIZE;
; 338  :     m_game.board->DrawBoard(0, yMargin);

  0003b	8b 4d 10	 mov	 ecx, DWORD PTR [ebp+16]
  0003e	6a 3c		 push	 60			; 0000003cH
  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?DrawBoard@Board@gameplay@core@@QAEXHH@Z ; core::gameplay::Board::DrawBoard

; 339  :     
; 340  :     switch (m_game.phase)

  00047	8b 45 1c	 mov	 eax, DWORD PTR [ebp+28]
  0004a	83 f8 03	 cmp	 eax, 3
  0004d	0f 87 3e 01 00
	00		 ja	 $LN2@Render
  00053	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN73@Render[eax*4]
$LN4@Render:
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 271  :     Graphics::Instance()->DrawText(m_font, "Press Enter to start", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  0005f	51		 push	 ecx
  00060	8b cc		 mov	 ecx, esp
  00062	6a 01		 push	 1
  00064	68 68 01 00 00	 push	 360			; 00000168H
  00069	68 96 00 00 00	 push	 150			; 00000096H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0006e	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 271  :     Graphics::Instance()->DrawText(m_font, "Press Enter to start", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LKPPLCNE@Press?5Enter?5to?5start@
  00075	ff 75 40	 push	 DWORD PTR [ebp+64]
  00078	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  0007d	8b c8		 mov	 ecx, eax
  0007f	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 272  :     
; 273  :     char buffer[4096];
; 274  :     snprintf(buffer, sizeof(buffer), "STARTING LEVEL: %d", m_game.stats->GetStartLevel());

  00084	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00087	ff 70 1c	 push	 DWORD PTR [eax+28]
  0008a	8d 44 24 34	 lea	 eax, DWORD PTR _buffer$3[esp+4152]
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CFKFPENJ@STARTING?5LEVEL?3?5?$CFd@
  00093	68 00 10 00 00	 push	 4096			; 00001000H
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 275  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos + 30, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a6	8b cc		 mov	 ecx, esp
  000a8	6a 01		 push	 1
  000aa	68 86 01 00 00	 push	 390			; 00000186H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  000af	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 275  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos + 30, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  000b1	8d 44 24 3c	 lea	 eax, DWORD PTR _buffer$3[esp+4160]
  000b5	68 96 00 00 00	 push	 150			; 00000096H
  000ba	50		 push	 eax

; 341  :     {
; 342  :         case GAME_PHASE_START:
; 343  :         {
; 344  :             RenderGameStart(0, yMargin);
; 345  :         } break;

  000bb	e9 c2 00 00 00	 jmp	 $LN71@Render
$LN5@Render:

; 280  :     m_game.piece->DrawPiece(0, t_yOffset);

  000c0	8b 4d 14	 mov	 ecx, DWORD PTR [ebp+20]
  000c3	6a 00		 push	 0
  000c5	6a 3c		 push	 60			; 0000003cH
  000c7	6a 00		 push	 0
  000c9	e8 00 00 00 00	 call	 ?DrawPiece@Piece@gameplay@core@@QAEXHH_N@Z ; core::gameplay::Piece::DrawPiece

; 281  :     
; 282  :     Piece piece = *(m_game.piece);

  000ce	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]

; 284  :     while (piece.IsValid())

  000d1	8d 4c 24 14	 lea	 ecx, DWORD PTR _piece$1[esp+4148]
  000d5	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000d8	0f 11 44 24 14	 movups	 XMMWORD PTR _piece$1[esp+4148], xmm0
  000dd	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000e2	66 0f d6 44 24
	24		 movq	 QWORD PTR _piece$1[esp+4164], xmm0
  000e8	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  000eb	89 44 24 2c	 mov	 DWORD PTR _piece$1[esp+4172], eax
  000ef	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  000f4	84 c0		 test	 al, al
  000f6	74 19		 je	 SHORT $LN23@Render
  000f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL22@Render:
; File c:\dev\tetris\src\piece.hpp

; 46   :             inline void SetRowOffset(i32 t_rowOffset) { m_rowOffset = t_rowOffset; }

  00100	ff 44 24 24	 inc	 DWORD PTR _piece$1[esp+4164]
; File c:\dev\tetris\src\game.cpp

; 284  :     while (piece.IsValid())

  00104	8d 4c 24 14	 lea	 ecx, DWORD PTR _piece$1[esp+4148]
  00108	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  0010d	84 c0		 test	 al, al
  0010f	75 ef		 jne	 SHORT $LL22@Render
$LN23@Render:
; File c:\dev\tetris\src\piece.hpp

; 46   :             inline void SetRowOffset(i32 t_rowOffset) { m_rowOffset = t_rowOffset; }

  00111	ff 4c 24 24	 dec	 DWORD PTR _piece$1[esp+4164]
; File c:\dev\tetris\src\game.cpp

; 289  :     piece.DrawPiece(0, t_yOffset, true);

  00115	8d 4c 24 14	 lea	 ecx, DWORD PTR _piece$1[esp+4148]
  00119	6a 01		 push	 1
  0011b	6a 3c		 push	 60			; 0000003cH
  0011d	6a 00		 push	 0
  0011f	e8 00 00 00 00	 call	 ?DrawPiece@Piece@gameplay@core@@QAEXHH_N@Z ; core::gameplay::Piece::DrawPiece

; 346  :         
; 347  :         case GAME_PHASE_PLAY:
; 348  :         {
; 349  :             RenderGamePlay(0, yMargin);
; 350  :         } break;

  00124	eb 6b		 jmp	 SHORT $LN2@Render
$LN6@Render:

; 294  :     for (i32 row = 0; row < BOARD_ROWS; ++row)

  00126	33 db		 xor	 ebx, ebx
  00128	8d 7b 3c	 lea	 edi, DWORD PTR [ebx+60]
  0012b	0f 1f 44 00 00	 npad	 5
$LL36@Render:

; 295  :     {
; 296  :         if (m_game.stats->GetLines()[row])

  00130	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00133	80 3c 03 00	 cmp	 BYTE PTR [ebx+eax], 0
  00137	74 20		 je	 SHORT $LN34@Render
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 300  :             Graphics::Instance()->DrawFillRect(xPos, yPos, BOARD_COLS * BOARD_GRID_SIZE, BOARD_GRID_SIZE, Palette::s_highlightColor);

  0013e	51		 push	 ecx
  0013f	8b cc		 mov	 ecx, esp
  00141	6a 1e		 push	 30			; 0000001eH
  00143	68 2c 01 00 00	 push	 300			; 0000012cH
  00148	57		 push	 edi
  00149	6a 00		 push	 0
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0014b	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 300  :             Graphics::Instance()->DrawFillRect(xPos, yPos, BOARD_COLS * BOARD_GRID_SIZE, BOARD_GRID_SIZE, Palette::s_highlightColor);

  0014d	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00152	8b c8		 mov	 ecx, eax
  00154	e8 00 00 00 00	 call	 ?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawFillRect
$LN34@Render:

; 290  : }
; 291  : 
; 292  : void Game::RenderGameLine(i32 t_xOffset, i32 t_yOffset)
; 293  : {
; 294  :     for (i32 row = 0; row < BOARD_ROWS; ++row)

  00159	83 c7 1e	 add	 edi, 30			; 0000001eH
  0015c	43		 inc	 ebx
  0015d	81 ff d0 02 00
	00		 cmp	 edi, 720		; 000002d0H
  00163	7c cb		 jl	 SHORT $LL36@Render

; 351  :         
; 352  :         case GAME_PHASE_LINE:
; 353  :         {
; 354  :             RenderGameLine(0, yMargin);
; 355  :         } break;

  00165	eb 2a		 jmp	 SHORT $LN2@Render
$LN7@Render:
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00167	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 309  :     Graphics::Instance()->DrawText(m_font, "GAME OVER", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  0016c	51		 push	 ecx
  0016d	8b cc		 mov	 ecx, esp
  0016f	6a 01		 push	 1
  00171	68 68 01 00 00	 push	 360			; 00000168H
  00176	68 96 00 00 00	 push	 150			; 00000096H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0017b	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 309  :     Graphics::Instance()->DrawText(m_font, "GAME OVER", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_09MAOEPLNL@GAME?5OVER@
$LN71@Render:

; 363  :     Graphics::Instance()->DrawFillRect(0, yMargin, BOARD_COLS * BOARD_GRID_SIZE,(BOARD_ROWS - BOARD_VISIBLE_ROWS) * BOARD_GRID_SIZE, backColor);

  00182	ff 75 40	 push	 DWORD PTR [ebp+64]
  00185	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  0018a	8b c8		 mov	 ecx, eax
  0018c	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText
$LN2@Render:
  00191	51		 push	 ecx
  00192	8b c4		 mov	 eax, esp
  00194	6a 3c		 push	 60			; 0000003cH
  00196	68 2c 01 00 00	 push	 300			; 0000012cH
  0019b	6a 3c		 push	 60			; 0000003cH
  0019d	6a 00		 push	 0
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0019f	89 30		 mov	 DWORD PTR [eax], esi
; File c:\dev\tetris\src\game.cpp

; 363  :     Graphics::Instance()->DrawFillRect(0, yMargin, BOARD_COLS * BOARD_GRID_SIZE,(BOARD_ROWS - BOARD_VISIBLE_ROWS) * BOARD_GRID_SIZE, backColor);

  001a1	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  001a6	8b c8		 mov	 ecx, eax
  001a8	e8 00 00 00 00	 call	 ?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawFillRect

; 319  :     snprintf(buffer, sizeof(buffer), "LEVEL: %d", m_game.stats->GetLevel());

  001ad	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  001b0	ff 70 20	 push	 DWORD PTR [eax+32]
  001b3	8d 44 24 34	 lea	 eax, DWORD PTR _buffer$2[esp+4152]
  001b7	68 00 00 00 00	 push	 OFFSET ??_C@_09IFKCHJNG@LEVEL?3?5?$CFd@
  001bc	68 00 10 00 00	 push	 4096			; 00001000H
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  001c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 320  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  001cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cf	8b cc		 mov	 ecx, esp
  001d1	6a 00		 push	 0
  001d3	6a 14		 push	 20			; 00000014H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  001d5	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 320  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  001d7	8d 44 24 3c	 lea	 eax, DWORD PTR _buffer$2[esp+4160]
  001db	6a 05		 push	 5
  001dd	50		 push	 eax
  001de	ff 75 40	 push	 DWORD PTR [ebp+64]
  001e1	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  001e6	8b c8		 mov	 ecx, eax
  001e8	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 321  :     
; 322  :     yPos += 30;
; 323  :     snprintf(buffer, sizeof(buffer), "LINES: %d", m_game.stats->GetLineCount());

  001ed	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  001f0	ff 70 24	 push	 DWORD PTR [eax+36]
  001f3	8d 44 24 34	 lea	 eax, DWORD PTR _buffer$2[esp+4152]
  001f7	68 00 00 00 00	 push	 OFFSET ??_C@_09DOEIBABC@LINES?3?5?$CFd@
  001fc	68 00 10 00 00	 push	 4096			; 00001000H
  00201	50		 push	 eax
  00202	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00207	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 324  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  0020c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020f	8b cc		 mov	 ecx, esp
  00211	6a 00		 push	 0
  00213	6a 32		 push	 50			; 00000032H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00215	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 324  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  00217	8d 44 24 3c	 lea	 eax, DWORD PTR _buffer$2[esp+4160]
  0021b	6a 05		 push	 5
  0021d	50		 push	 eax
  0021e	ff 75 40	 push	 DWORD PTR [ebp+64]
  00221	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00226	8b c8		 mov	 ecx, eax
  00228	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 325  :     
; 326  :     yPos += 30;
; 327  :     snprintf(buffer, sizeof(buffer), "POINTS: %d", m_game.stats->GetPoints());

  0022d	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00230	ff 70 28	 push	 DWORD PTR [eax+40]
  00233	8d 44 24 34	 lea	 eax, DWORD PTR _buffer$2[esp+4152]
  00237	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OEGFDINF@POINTS?3?5?$CFd@
  0023c	68 00 10 00 00	 push	 4096			; 00001000H
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00247	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 328  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  0024c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024f	8b cc		 mov	 ecx, esp
  00251	6a 00		 push	 0
  00253	6a 50		 push	 80			; 00000050H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00255	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 328  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  00257	8d 44 24 3c	 lea	 eax, DWORD PTR _buffer$2[esp+4160]
  0025b	6a 05		 push	 5
  0025d	50		 push	 eax
  0025e	ff 75 40	 push	 DWORD PTR [ebp+64]
  00261	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00266	8b c8		 mov	 ecx, eax
  00268	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 364  :     
; 365  :     RenderGameStats(0, 0);
; 366  : }

  0026d	8b 8c 24 30 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4148]
  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5d		 pop	 ebp
  00277	5b		 pop	 ebx
  00278	33 cc		 xor	 ecx, esp
  0027a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027f	81 c4 24 10 00
	00		 add	 esp, 4132		; 00001024H
  00285	c3		 ret	 0
  00286	66 90		 npad	 2
$LN73@Render:
  00288	00 00 00 00	 DD	 $LN4@Render
  0028c	00 00 00 00	 DD	 $LN5@Render
  00290	00 00 00 00	 DD	 $LN6@Render
  00294	00 00 00 00	 DD	 $LN7@Render
?Render@Game@core@@QAEXXZ ENDP				; core::Game::Render
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\board.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?Update@Game@core@@QAEXXZ
_TEXT	SEGMENT
_piece$1 = -28						; size = 28
?Update@Game@core@@QAEXXZ PROC				; core::Game::Update, COMDAT
; _this$ = ecx

; 242  : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 243  :     switch (m_game.phase)

  00006	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00009	83 f8 03	 cmp	 eax, 3
  0000c	0f 87 cf 01 00
	00		 ja	 $LN142@Update
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN154@Update[eax*4]
$LN4@Update:

; 141  :     if (m_input.dup > 0)

  00019	80 7b 39 00	 cmp	 BYTE PTR [ebx+57], 0
  0001d	7e 06		 jle	 SHORT $LN10@Update
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  0001f	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 40   :             inline void SetStartLevel(i32 t_startLevel) { m_startLevel = t_startLevel;  }

  00022	ff 40 1c	 inc	 DWORD PTR [eax+28]
$LN10@Update:
; File c:\dev\tetris\src\game.cpp

; 146  :     if (m_input.ddown > 0 && m_game.stats->GetStartLevel() > 0)

  00025	80 7b 3a 00	 cmp	 BYTE PTR [ebx+58], 0
  00029	7e 0e		 jle	 SHORT $LN11@Update
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  0002b	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
; File c:\dev\tetris\src\game.cpp

; 146  :     if (m_input.ddown > 0 && m_game.stats->GetStartLevel() > 0)

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	85 c0		 test	 eax, eax
  00033	7e 04		 jle	 SHORT $LN11@Update

; 147  :     {
; 148  :         m_game.stats->SetStartLevel(m_game.stats->GetStartLevel() - 1);

  00035	48		 dec	 eax
; File c:\dev\tetris\src\stats.hpp

; 40   :             inline void SetStartLevel(i32 t_startLevel) { m_startLevel = t_startLevel;  }

  00036	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN11@Update:
; File c:\dev\tetris\src\game.cpp

; 151  :     if (m_input.denter > 0)

  00039	80 7b 3c 00	 cmp	 BYTE PTR [ebx+60], 0
  0003d	0f 8e 9e 01 00
	00		 jle	 $LN142@Update
; File c:\dev\tetris\src\board.hpp

; 47   :             inline void Clear() { m_boardData.Clear(); }

  00043	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00046	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00047	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  0004a	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  0004c	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  0004f	2b cf		 sub	 ecx, edi
  00051	83 c1 03	 add	 ecx, 3
  00054	33 c0		 xor	 eax, eax
  00056	c1 e9 02	 shr	 ecx, 2
  00059	3b fa		 cmp	 edi, edx
  0005b	0f 47 c8	 cmova	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 2902 : 	for (; _First != _Last; ++_First)

  0005e	85 c9		 test	 ecx, ecx
  00060	74 02		 je	 SHORT $LN88@Update
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  00062	f3 ab		 rep stosd
$LN88@Update:
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  00064	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]

; 41   :             inline void SetLevel(i32 t_level) { m_level = t_level; }

  00067	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0006a	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 42   :             inline void SetLineCount(i32 t_lineCount) { m_lineCount = t_lineCount; }

  0006d	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00070	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 43   :             inline void SetPoints(i32 t_points) { m_points = t_points; }

  00077	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  0007a	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File c:\dev\tetris\src\game.cpp

; 157  :         m_game.piece->SpawnNewPiece();

  00081	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00084	e8 00 00 00 00	 call	 ?SpawnNewPiece@Piece@gameplay@core@@QAEXXZ ; core::gameplay::Piece::SpawnNewPiece

; 158  :         m_game.phase = GAME_PHASE_PLAY;

  00089	5f		 pop	 edi
  0008a	c7 43 1c 01 00
	00 00		 mov	 DWORD PTR [ebx+28], 1
  00091	5b		 pop	 ebx

; 244  :     {
; 245  :         case GAME_PHASE_START:
; 246  :         {
; 247  :             UpdateGameStart();
; 248  :         } break;
; 249  :         
; 250  :         case GAME_PHASE_PLAY:
; 251  :         {
; 252  :             UpdateGamePlay();
; 253  :         } break;
; 254  :         
; 255  :         case GAME_PHASE_LINE:
; 256  :         {
; 257  :             UpdateGameLine();
; 258  :         } break;
; 259  :         
; 260  :         case GAME_PHASE_OVER:
; 261  :         {
; 262  :             UpdateGameOver();
; 263  :         } break;
; 264  :     }
; 265  : }

  00092	83 c4 1c	 add	 esp, 28			; 0000001cH
  00095	c3		 ret	 0
$LN5@Update:

; 167  :     if (m_input.dleft > 0)

  00096	80 7b 37 00	 cmp	 BYTE PTR [ebx+55], 0
  0009a	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0009d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000a0	0f 11 44 24 04	 movups	 XMMWORD PTR _piece$1[esp+32], xmm0
  000a5	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000aa	66 0f d6 44 24
	14		 movq	 QWORD PTR _piece$1[esp+48], xmm0
  000b0	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000b3	8b 44 24 18	 mov	 eax, DWORD PTR _piece$1[esp+52]
  000b7	89 4c 24 1c	 mov	 DWORD PTR _piece$1[esp+56], ecx
  000bb	7e 05		 jle	 SHORT $LN102@Update
; File c:\dev\tetris\src\piece.hpp

; 47   :             inline void SetColOffset(i32 t_colOffset) { m_colOffset = t_colOffset; }

  000bd	48		 dec	 eax
  000be	89 44 24 18	 mov	 DWORD PTR _piece$1[esp+52], eax
$LN102@Update:
; File c:\dev\tetris\src\game.cpp

; 172  :     if (m_input.dright > 0)

  000c2	80 7b 38 00	 cmp	 BYTE PTR [ebx+56], 0
  000c6	7e 05		 jle	 SHORT $LN103@Update
; File c:\dev\tetris\src\piece.hpp

; 47   :             inline void SetColOffset(i32 t_colOffset) { m_colOffset = t_colOffset; }

  000c8	40		 inc	 eax
  000c9	89 44 24 18	 mov	 DWORD PTR _piece$1[esp+52], eax
$LN103@Update:
; File c:\dev\tetris\src\game.cpp

; 177  :     if (m_input.dup > 0)

  000cd	80 7b 39 00	 cmp	 BYTE PTR [ebx+57], 0
  000d1	7e 05		 jle	 SHORT $LN104@Update
; File c:\dev\tetris\src\piece.hpp

; 48   :             inline void SetRotation(i32 t_rotation)   { m_rotation = t_rotation; }

  000d3	41		 inc	 ecx
  000d4	89 4c 24 1c	 mov	 DWORD PTR _piece$1[esp+56], ecx
$LN104@Update:
; File c:\dev\tetris\src\game.cpp

; 182  :     if (piece.IsValid())

  000d8	8d 4c 24 04	 lea	 ecx, DWORD PTR _piece$1[esp+32]
  000dc	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  000e1	84 c0		 test	 al, al
  000e3	74 1d		 je	 SHORT $LN105@Update

; 183  :     {
; 184  :         *(m_game.piece) = piece;

  000e5	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  000e8	0f 10 44 24 04	 movups	 xmm0, XMMWORD PTR _piece$1[esp+32]
  000ed	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  000f0	f3 0f 7e 44 24
	14		 movq	 xmm0, QWORD PTR _piece$1[esp+48]
  000f6	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  000fb	8b 44 24 1c	 mov	 eax, DWORD PTR _piece$1[esp+56]
  000ff	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN105@Update:

; 185  :     }
; 186  :     
; 187  :     if (m_input.ddown > 0)

  00102	80 7b 3a 00	 cmp	 BYTE PTR [ebx+58], 0
  00106	7e 08		 jle	 SHORT $LN106@Update

; 188  :     {
; 189  :         m_game.piece->SoftDrop();

  00108	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0010b	e8 00 00 00 00	 call	 ?SoftDrop@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::SoftDrop
$LN106@Update:

; 190  :     }
; 191  :     
; 192  :     if (m_input.dz > 0)

  00110	80 7b 3d 00	 cmp	 BYTE PTR [ebx+61], 0
  00114	7e 08		 jle	 SHORT $LN145@Update

; 193  :     {
; 194  :         m_game.piece->HardDrop();

  00116	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00119	e8 00 00 00 00	 call	 ?HardDrop@Piece@gameplay@core@@QAEXXZ ; core::gameplay::Piece::HardDrop
$LN145@Update:

; 195  :     }
; 196  :     
; 197  :     while (m_game.time.time >= m_game.time.nextDropTime)

  0011e	f3 0f 10 43 28	 movss	 xmm0, DWORD PTR [ebx+40]
  00123	0f 2f 43 20	 comiss	 xmm0, DWORD PTR [ebx+32]
  00127	72 1a		 jb	 SHORT $LN101@Update
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL100@Update:

; 198  :     {
; 199  :         m_game.piece->SoftDrop();

  00130	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00133	e8 00 00 00 00	 call	 ?SoftDrop@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::SoftDrop
  00138	f3 0f 10 43 28	 movss	 xmm0, DWORD PTR [ebx+40]
  0013d	0f 2f 43 20	 comiss	 xmm0, DWORD PTR [ebx+32]
  00141	73 ed		 jae	 SHORT $LL100@Update
$LN101@Update:

; 200  :     }
; 201  :     
; 202  :     m_game.board->FindLines(m_game.stats);

  00143	ff 73 18	 push	 DWORD PTR [ebx+24]
  00146	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00149	e8 00 00 00 00	 call	 ?FindLines@Board@gameplay@core@@QAEXPAVStats@23@@Z ; core::gameplay::Board::FindLines

; 203  :     if (m_game.stats->GetPendingLineCount() > 0)

  0014e	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00151	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  00155	7e 19		 jle	 SHORT $LN108@Update

; 204  :     {
; 205  :         m_game.phase = GAME_PHASE_LINE;
; 206  :         m_game.time.highlightEndTime = m_game.time.time + 0.35f;

  00157	f3 0f 10 43 28	 movss	 xmm0, DWORD PTR [ebx+40]
  0015c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3eb33333
  00164	c7 43 1c 02 00
	00 00		 mov	 DWORD PTR [ebx+28], 2
  0016b	f3 0f 11 43 24	 movss	 DWORD PTR [ebx+36], xmm0
$LN108@Update:

; 207  :     }
; 208  :     
; 209  :     if (!m_game.board->IsRowEmpty(0))

  00170	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00173	6a 00		 push	 0
  00175	e8 00 00 00 00	 call	 ?IsRowEmpty@Board@gameplay@core@@QAE_NH@Z ; core::gameplay::Board::IsRowEmpty
  0017a	84 c0		 test	 al, al
  0017c	75 63		 jne	 SHORT $LN142@Update

; 210  :     {
; 211  :         m_game.phase = GAME_PHASE_OVER;

  0017e	c7 43 1c 03 00
	00 00		 mov	 DWORD PTR [ebx+28], 3
  00185	5b		 pop	 ebx

; 244  :     {
; 245  :         case GAME_PHASE_START:
; 246  :         {
; 247  :             UpdateGameStart();
; 248  :         } break;
; 249  :         
; 250  :         case GAME_PHASE_PLAY:
; 251  :         {
; 252  :             UpdateGamePlay();
; 253  :         } break;
; 254  :         
; 255  :         case GAME_PHASE_LINE:
; 256  :         {
; 257  :             UpdateGameLine();
; 258  :         } break;
; 259  :         
; 260  :         case GAME_PHASE_OVER:
; 261  :         {
; 262  :             UpdateGameOver();
; 263  :         } break;
; 264  :     }
; 265  : }

  00186	83 c4 1c	 add	 esp, 28			; 0000001cH
  00189	c3		 ret	 0
$LN6@Update:

; 217  :     if (m_game.time.time >= m_game.time.highlightEndTime)

  0018a	f3 0f 10 43 28	 movss	 xmm0, DWORD PTR [ebx+40]
  0018f	0f 2f 43 24	 comiss	 xmm0, DWORD PTR [ebx+36]
  00193	72 4c		 jb	 SHORT $LN142@Update

; 218  :     {
; 219  :         m_game.board->ClearLines(m_game.stats);

  00195	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00198	56		 push	 esi
  00199	ff 73 18	 push	 DWORD PTR [ebx+24]
  0019c	e8 00 00 00 00	 call	 ?ClearLines@Board@gameplay@core@@QAEXPAVStats@23@@Z ; core::gameplay::Board::ClearLines
; File c:\dev\tetris\src\stats.hpp

; 35   :             inline i32 GetLineCount() { return m_lineCount; }

  001a1	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]

; 42   :             inline void SetLineCount(i32 t_lineCount) { m_lineCount = t_lineCount; }

  001a4	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  001a7	01 41 24	 add	 DWORD PTR [ecx+36], eax
; File c:\dev\tetris\src\game.cpp

; 222  :         m_game.stats->ComputePoints();

  001aa	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  001ad	e8 00 00 00 00	 call	 ?ComputePoints@Stats@gameplay@core@@QAEXXZ ; core::gameplay::Stats::ComputePoints
; File c:\dev\tetris\src\stats.hpp

; 35   :             inline i32 GetLineCount() { return m_lineCount; }

  001b2	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  001b5	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
; File c:\dev\tetris\src\game.cpp

; 224  :         if (m_game.stats->GetLineCount() >= m_game.stats->GetLinesForNextLevel())

  001b8	e8 00 00 00 00	 call	 ?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ; core::gameplay::Stats::GetLinesForNextLevel
  001bd	3b f0		 cmp	 esi, eax
  001bf	5e		 pop	 esi
  001c0	7c 06		 jl	 SHORT $LN127@Update
; File c:\dev\tetris\src\stats.hpp

; 34   :             inline i32 GetLevel() { return m_level; }

  001c2	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 41   :             inline void SetLevel(i32 t_level) { m_level = t_level; }

  001c5	ff 40 20	 inc	 DWORD PTR [eax+32]
$LN127@Update:
; File c:\dev\tetris\src\game.cpp

; 229  :         m_game.phase = GAME_PHASE_PLAY;

  001c8	c7 43 1c 01 00
	00 00		 mov	 DWORD PTR [ebx+28], 1
  001cf	5b		 pop	 ebx

; 244  :     {
; 245  :         case GAME_PHASE_START:
; 246  :         {
; 247  :             UpdateGameStart();
; 248  :         } break;
; 249  :         
; 250  :         case GAME_PHASE_PLAY:
; 251  :         {
; 252  :             UpdateGamePlay();
; 253  :         } break;
; 254  :         
; 255  :         case GAME_PHASE_LINE:
; 256  :         {
; 257  :             UpdateGameLine();
; 258  :         } break;
; 259  :         
; 260  :         case GAME_PHASE_OVER:
; 261  :         {
; 262  :             UpdateGameOver();
; 263  :         } break;
; 264  :     }
; 265  : }

  001d0	83 c4 1c	 add	 esp, 28			; 0000001cH
  001d3	c3		 ret	 0
$LN7@Update:

; 235  :     if (m_input.denter > 0)

  001d4	80 7b 3c 00	 cmp	 BYTE PTR [ebx+60], 0
  001d8	7e 07		 jle	 SHORT $LN142@Update

; 236  :     {
; 237  :         m_game.phase = GAME_PHASE_START;

  001da	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0
$LN142@Update:
  001e1	5b		 pop	 ebx

; 244  :     {
; 245  :         case GAME_PHASE_START:
; 246  :         {
; 247  :             UpdateGameStart();
; 248  :         } break;
; 249  :         
; 250  :         case GAME_PHASE_PLAY:
; 251  :         {
; 252  :             UpdateGamePlay();
; 253  :         } break;
; 254  :         
; 255  :         case GAME_PHASE_LINE:
; 256  :         {
; 257  :             UpdateGameLine();
; 258  :         } break;
; 259  :         
; 260  :         case GAME_PHASE_OVER:
; 261  :         {
; 262  :             UpdateGameOver();
; 263  :         } break;
; 264  :     }
; 265  : }

  001e2	83 c4 1c	 add	 esp, 28			; 0000001cH
  001e5	c3		 ret	 0
  001e6	66 90		 npad	 2
$LN154@Update:
  001e8	00 00 00 00	 DD	 $LN4@Update
  001ec	00 00 00 00	 DD	 $LN5@Update
  001f0	00 00 00 00	 DD	 $LN6@Update
  001f4	00 00 00 00	 DD	 $LN7@Update
?Update@Game@core@@QAEXXZ ENDP				; core::Game::Update
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\game.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?HandleInput@Game@core@@QAEXXZ
_TEXT	SEGMENT
tv298 = -22						; size = 1
tv301 = -21						; size = 1
_keyCount$ = -20					; size = 4
_prevInput$1 = -16					; size = 14
?HandleInput@Game@core@@QAEXXZ PROC			; core::Game::HandleInput, COMDAT
; _this$ = ecx

; 108  : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 109  :     i32 keyCount;
; 110  :     const u8 *keyStates = SDL_GetKeyboardState(&keyCount);

  00003	8d 44 24 04	 lea	 eax, DWORD PTR _keyCount$[esp+24]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	50		 push	 eax
  0000a	8b f1		 mov	 esi, ecx
  0000c	e8 00 00 00 00	 call	 _SDL_GetKeyboardState
  00011	8b f8		 mov	 edi, eax
  00013	83 c4 04	 add	 esp, 4

; 111  :     
; 112  :     if (keyStates)

  00016	85 ff		 test	 edi, edi
  00018	0f 84 95 00 00
	00		 je	 $LN2@HandleInpu

; 113  :     {
; 114  :         if (keyStates[SDL_SCANCODE_ESCAPE])

  0001e	80 7f 29 00	 cmp	 BYTE PTR [edi+41], 0
  00022	74 04		 je	 SHORT $LN3@HandleInpu
; File c:\dev\tetris\src\game.hpp

; 58   :         inline void Quit() { m_running = false; }

  00024	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
$LN3@HandleInpu:
; File c:\dev\tetris\src\game.cpp

; 121  :         m_input.left   = keyStates[SDL_SCANCODE_LEFT];

  00028	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  0002b	f3 0f 7e 46 30	 movq	 xmm0, QWORD PTR [esi+48]
  00030	88 46 30	 mov	 BYTE PTR [esi+48], al

; 122  :         m_input.right  = keyStates[SDL_SCANCODE_RIGHT];

  00033	8a 57 4f	 mov	 dl, BYTE PTR [edi+79]
  00036	88 56 31	 mov	 BYTE PTR [esi+49], dl
  00039	53		 push	 ebx

; 123  :         m_input.up     = keyStates[SDL_SCANCODE_UP];

  0003a	8a 5f 52	 mov	 bl, BYTE PTR [edi+82]
  0003d	88 5e 32	 mov	 BYTE PTR [esi+50], bl

; 124  :         m_input.down   = keyStates[SDL_SCANCODE_DOWN];

  00040	8a 77 51	 mov	 dh, BYTE PTR [edi+81]
  00043	88 76 33	 mov	 BYTE PTR [esi+51], dh

; 125  :         m_input.space  = keyStates[SDL_SCANCODE_SPACE];

  00046	8a 7f 2c	 mov	 bh, BYTE PTR [edi+44]
  00049	88 7e 34	 mov	 BYTE PTR [esi+52], bh

; 126  :         m_input.enter  = keyStates[SDL_SCANCODE_RETURN];

  0004c	8a 4f 28	 mov	 cl, BYTE PTR [edi+40]
  0004f	88 4c 24 0e	 mov	 BYTE PTR tv298[esp+36], cl
  00053	88 4e 35	 mov	 BYTE PTR [esi+53], cl

; 127  :         m_input.z      = keyStates[SDL_SCANCODE_Z];

  00056	8a 4f 1d	 mov	 cl, BYTE PTR [edi+29]
  00059	66 0f d6 44 24
	14		 movq	 QWORD PTR _prevInput$1[esp+36], xmm0

; 128  :         
; 129  :         m_input.dleft  = m_input.left - prevInput.left;

  0005f	2a 44 24 14	 sub	 al, BYTE PTR _prevInput$1[esp+36]

; 130  :         m_input.dright = m_input.right - prevInput.right;
; 131  :         m_input.dup    = m_input.up - prevInput.up;
; 132  :         m_input.ddown  = m_input.down - prevInput.down;
; 133  :         m_input.dspace = m_input.space - prevInput.space;

  00063	2a 7c 24 18	 sub	 bh, BYTE PTR _prevInput$1[esp+40]
  00067	88 46 37	 mov	 BYTE PTR [esi+55], al
  0006a	88 4c 24 0f	 mov	 BYTE PTR tv301[esp+36], cl
  0006e	88 4e 36	 mov	 BYTE PTR [esi+54], cl
  00071	8b 4c 24 14	 mov	 ecx, DWORD PTR _prevInput$1[esp+36]
  00075	8b c1		 mov	 eax, ecx
  00077	c1 e8 08	 shr	 eax, 8
  0007a	2a d0		 sub	 dl, al
  0007c	88 7e 3b	 mov	 BYTE PTR [esi+59], bh
  0007f	8b c1		 mov	 eax, ecx
  00081	88 56 38	 mov	 BYTE PTR [esi+56], dl

; 134  :         m_input.denter = m_input.enter - prevInput.enter;

  00084	8a 54 24 0e	 mov	 dl, BYTE PTR tv298[esp+36]
  00088	c1 e8 10	 shr	 eax, 16			; 00000010H
  0008b	c1 e9 18	 shr	 ecx, 24			; 00000018H
  0008e	2a d8		 sub	 bl, al
  00090	2a f1		 sub	 dh, cl
  00092	88 5e 39	 mov	 BYTE PTR [esi+57], bl
  00095	8b 4c 24 18	 mov	 ecx, DWORD PTR _prevInput$1[esp+40]
  00099	8b c1		 mov	 eax, ecx
  0009b	c1 e8 08	 shr	 eax, 8
  0009e	2a d0		 sub	 dl, al

; 135  :         m_input.dz     = m_input.z - prevInput.z;

  000a0	c1 e9 10	 shr	 ecx, 16			; 00000010H
  000a3	8a 44 24 0f	 mov	 al, BYTE PTR tv301[esp+36]
  000a7	2a c1		 sub	 al, cl
  000a9	88 76 3a	 mov	 BYTE PTR [esi+58], dh
  000ac	88 56 3c	 mov	 BYTE PTR [esi+60], dl
  000af	88 46 3d	 mov	 BYTE PTR [esi+61], al
  000b2	5b		 pop	 ebx
$LN2@HandleInpu:

; 136  :     }
; 137  : }

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	83 c4 18	 add	 esp, 24			; 00000018H
  000b8	c3		 ret	 0
?HandleInput@Game@core@@QAEXXZ ENDP			; core::Game::HandleInput
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\game.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?HandleEvents@Game@core@@QAEXXZ
_TEXT	SEGMENT
_e$ = -60						; size = 56
__$ArrayPad$ = -4					; size = 4
?HandleEvents@Game@core@@QAEXXZ PROC			; core::Game::HandleEvents, COMDAT
; _this$ = ecx

; 94   : {

  00000	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 38	 mov	 DWORD PTR __$ArrayPad$[esp+60], eax
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx

; 95   :     m_game.time.time = SDL_GetTicks() / 1000.0f;

  00011	e8 00 00 00 00	 call	 _SDL_GetTicks
  00016	66 0f 6e c0	 movd	 xmm0, eax
  0001a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]

; 98   :     while (SDL_PollEvent(&e))

  0002a	8d 44 24 04	 lea	 eax, DWORD PTR _e$[esp+64]
  0002e	50		 push	 eax
  0002f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00033	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000
  0003b	f3 0f 11 46 28	 movss	 DWORD PTR [esi+40], xmm0
  00040	e8 00 00 00 00	 call	 _SDL_PollEvent
  00045	83 c4 04	 add	 esp, 4
  00048	85 c0		 test	 eax, eax
  0004a	74 23		 je	 SHORT $LN3@HandleEven
  0004c	0f 1f 40 00	 npad	 4
$LL2@HandleEven:

; 99   :     {
; 100  :         if (e.type == SDL_QUIT)

  00050	81 7c 24 04 00
	01 00 00	 cmp	 DWORD PTR _e$[esp+64], 256 ; 00000100H
  00058	75 04		 jne	 SHORT $LN4@HandleEven
; File c:\dev\tetris\src\game.hpp

; 58   :         inline void Quit() { m_running = false; }

  0005a	c6 46 44 00	 mov	 BYTE PTR [esi+68], 0
$LN4@HandleEven:
; File c:\dev\tetris\src\game.cpp

; 98   :     while (SDL_PollEvent(&e))

  0005e	8d 44 24 04	 lea	 eax, DWORD PTR _e$[esp+64]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _SDL_PollEvent
  00068	83 c4 04	 add	 esp, 4
  0006b	85 c0		 test	 eax, eax
  0006d	75 e1		 jne	 SHORT $LL2@HandleEven
$LN3@HandleEven:

; 101  :         {
; 102  :             Quit();
; 103  :         }
; 104  :     }
; 105  : }

  0006f	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+64]
  00073	5e		 pop	 esi
  00074	33 cc		 xor	 ecx, esp
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	83 c4 3c	 add	 esp, 60			; 0000003cH
  0007e	c3		 ret	 0
?HandleEvents@Game@core@@QAEXXZ ENDP			; core::Game::HandleEvents
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\graphics\graphics.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h
; File c:\dev\tetris\src\game.cpp
;	COMDAT ??0Game@core@@QAE@PBDHHHH0H@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_t_title$ = 8						; size = 4
_t_xPos$ = 12						; size = 4
_t_yPos$ = 16						; size = 4
_t_windowWidth$ = 20					; size = 4
_t_windowHeight$ = 24					; size = 4
$T2 = 28						; size = 4
$T3 = 28						; size = 4
$T4 = 28						; size = 4
_t_fontName$ = 28					; size = 4
_t_fontSize$ = 32					; size = 4
??0Game@core@@QAE@PBDHHHH0H@Z PROC			; core::Game::Game, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Game@core@@QAE@PBDHHHH0H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 13   :     if (!SDL_Init(SDL_INIT_EVERYTHING))

  00026	68 31 f2 00 00	 push	 62001			; 0000f231H
  0002b	e8 00 00 00 00	 call	 _SDL_Init
  00030	83 c4 04	 add	 esp, 4
  00033	85 c0		 test	 eax, eax
  00035	0f 85 48 02 00
	00		 jne	 $LN2@Game

; 14   :     {
; 15   :         std::cout << "SDL has been initialized successfully\n";

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EGGHBPKB@SDL?5has?5been?5initialized?5succes@
  00040	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00045	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 16   :         
; 17   :         m_window = SDL_CreateWindow(t_title, t_xPos, t_yPos, t_windowWidth,

  0004a	6a 06		 push	 6
  0004c	ff 75 18	 push	 DWORD PTR _t_windowHeight$[ebp]
  0004f	ff 75 14	 push	 DWORD PTR _t_windowWidth$[ebp]
  00052	ff 75 10	 push	 DWORD PTR _t_yPos$[ebp]
  00055	ff 75 0c	 push	 DWORD PTR _t_xPos$[ebp]
  00058	ff 75 08	 push	 DWORD PTR _t_title$[ebp]
  0005b	e8 00 00 00 00	 call	 _SDL_CreateWindow
  00060	83 c4 20	 add	 esp, 32			; 00000020H
  00063	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 18   :                                     t_windowHeight, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
; 19   :         
; 20   :         if (m_window)

  00066	85 c0		 test	 eax, eax
  00068	0f 84 03 02 00
	00		 je	 $LN4@Game

; 21   :         {
; 22   :             std::cout << "SDL window has been created successfully\n";

  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@LKCLDMPA@SDL?5window?5has?5been?5created?5suc@
  00073	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00078	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 23   :             
; 24   :             m_renderer = SDL_CreateRenderer(m_window, -1, 

  0007d	6a 06		 push	 6
  0007f	6a ff		 push	 -1
  00081	ff 77 08	 push	 DWORD PTR [edi+8]
  00084	e8 00 00 00 00	 call	 _SDL_CreateRenderer
  00089	83 c4 14	 add	 esp, 20			; 00000014H
  0008c	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 25   :                                             SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
; 26   :             
; 27   :             if (m_renderer)

  0008f	85 c0		 test	 eax, eax
  00091	0f 84 c8 01 00
	00		 je	 $LN6@Game

; 28   :             {
; 29   :                 std::cout << "SDL renderer has been created successfully\n";

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@MFFAMOBJ@SDL?5renderer?5has?5been?5created?5s@
  0009c	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000a1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000a6	83 c4 08	 add	 esp, 8

; 48   :     }
; 49   :     
; 50   :     if (!TTF_Init())

  000a9	e8 00 00 00 00	 call	 _TTF_Init
  000ae	85 c0		 test	 eax, eax
  000b0	0f 85 26 02 00
	00		 jne	 $LN8@Game

; 51   :     {
; 52   :         std::cout << "SDL_TTF has been initialized successfully\n";

  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@CGIGHLCG@SDL_TTF?5has?5been?5initialized?5su@
  000bb	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000c0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 53   :         
; 54   :         m_font = TTF_OpenFont(t_fontName, t_fontSize);

  000c5	8b 75 20	 mov	 esi, DWORD PTR _t_fontSize$[ebp]
  000c8	56		 push	 esi
  000c9	ff 75 1c	 push	 DWORD PTR _t_fontName$[ebp]
  000cc	e8 00 00 00 00	 call	 _TTF_OpenFont
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
  000d4	89 47 40	 mov	 DWORD PTR [edi+64], eax

; 55   :         
; 56   :         if (m_font)

  000d7	85 c0		 test	 eax, eax
  000d9	8b 45 1c	 mov	 eax, DWORD PTR _t_fontName$[ebp]
  000dc	0f 84 b3 01 00
	00		 je	 $LN10@Game

; 57   :         {
; 58   :             std::cout << "Font " << t_fontName << "(" << t_fontSize 

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GIEFJDI@?$CJ?5has?5been?5loaded?6@
  000e7	56		 push	 esi
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_01ODHLEDKK@?$CI@
  000ed	50		 push	 eax
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_05JBNLDDKP@Font?5@
  000f3	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000f8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000fd	83 c4 08	 add	 esp, 8
  00100	50		 push	 eax
  00101	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00106	83 c4 08	 add	 esp, 8
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0010f	83 c4 08	 add	 esp, 8
  00112	8b c8		 mov	 ecx, eax
  00114	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 71   :         exit(1);
; 72   :     }
; 73   :     
; 74   :     m_gameWidth = t_windowWidth;

  0011f	8b 45 14	 mov	 eax, DWORD PTR _t_windowWidth$[ebp]

; 75   :     m_gameHeight = t_windowHeight;
; 76   :     m_running = true;
; 77   :     
; 78   :     Graphics::Instance()->SetRenderer(m_renderer);

  00122	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00125	89 07		 mov	 DWORD PTR [edi], eax
  00127	8b 45 18	 mov	 eax, DWORD PTR _t_windowHeight$[ebp]
  0012a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0012d	c6 47 44 01	 mov	 BYTE PTR [edi+68], 1
  00131	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00136	0f 57 c0	 xorps	 xmm0, xmm0

; 81   :     m_game.board = new gameplay::Board(BOARD_ROWS, BOARD_COLS, BOARD_VISIBLE_ROWS, BOARD_GRID_SIZE);

  00139	6a 28		 push	 40			; 00000028H
; File c:\dev\tetris\src\graphics\graphics.hpp

; 36   :             inline void SetRenderer(SDL_Renderer *t_renderer) { m_renderer = t_renderer; }

  0013b	89 30		 mov	 DWORD PTR [eax], esi
; File c:\dev\tetris\src\game.cpp

; 80   :     m_game = {};

  0013d	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  00141	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0

; 81   :     m_game.board = new gameplay::Board(BOARD_ROWS, BOARD_COLS, BOARD_VISIBLE_ROWS, BOARD_GRID_SIZE);

  00145	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0014a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014d	89 45 1c	 mov	 DWORD PTR $T4[ebp], eax
  00150	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00157	85 c0		 test	 eax, eax
  00159	74 11		 je	 SHORT $LN13@Game
  0015b	6a 1e		 push	 30			; 0000001eH
  0015d	6a 14		 push	 20			; 00000014H
  0015f	6a 0a		 push	 10			; 0000000aH
  00161	6a 16		 push	 22			; 00000016H
  00163	8b c8		 mov	 ecx, eax
  00165	e8 00 00 00 00	 call	 ??0Board@gameplay@core@@QAE@HHHH@Z ; core::gameplay::Board::Board
  0016a	eb 02		 jmp	 SHORT $LN14@Game
$LN13@Game:
  0016c	33 c0		 xor	 eax, eax
$LN14@Game:

; 83   :     m_game.stats = new gameplay::Stats();

  0016e	6a 2c		 push	 44			; 0000002cH
  00170	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00177	89 47 10	 mov	 DWORD PTR [edi+16], eax
  0017a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0017f	83 c4 04	 add	 esp, 4
  00182	89 45 1c	 mov	 DWORD PTR $T3[ebp], eax
  00185	85 c0		 test	 eax, eax
  00187	74 25		 je	 SHORT $LN15@Game
; File c:\dev\tetris\src\stats.hpp

; 17   :             i32 m_pendingLineCount = 0;

  00189	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 18   :             i32 m_startLevel = 0;

  00190	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 19   :             i32 m_level = 0;

  00197	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 20   :             i32 m_lineCount = 0;

  0019e	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 21   :             i32 m_points = 0;

  001a5	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File c:\dev\tetris\src\game.cpp

; 83   :     m_game.stats = new gameplay::Stats();

  001ac	eb 02		 jmp	 SHORT $LN16@Game
$LN15@Game:
  001ae	33 c0		 xor	 eax, eax
$LN16@Game:

; 84   :     m_game.piece = new gameplay::Piece(m_game.board, &m_game.time, m_game.stats, 0, 0, 0, 0);

  001b0	6a 1c		 push	 28			; 0000001cH
  001b2	89 47 18	 mov	 DWORD PTR [edi+24], eax
  001b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ba	83 c4 04	 add	 esp, 4
  001bd	89 45 1c	 mov	 DWORD PTR $T2[ebp], eax
  001c0	85 c0		 test	 eax, eax
  001c2	74 2f		 je	 SHORT $LN17@Game
; File c:\dev\tetris\src\piece.hpp

; 31   :                 : m_board(t_board), m_time(t_time), m_stats(t_stats), m_tetrominoIndex(t_tetrominoIndex), m_rowOffset(t_rowOffset), m_colOffset(t_colOffset), m_rotation(t_rotation) {}

  001c4	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
; File c:\dev\tetris\src\game.cpp

; 84   :     m_game.piece = new gameplay::Piece(m_game.board, &m_game.time, m_game.stats, 0, 0, 0, 0);

  001c7	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
; File c:\dev\tetris\src\piece.hpp

; 31   :                 : m_board(t_board), m_time(t_time), m_stats(t_stats), m_tetrominoIndex(t_tetrominoIndex), m_rowOffset(t_rowOffset), m_colOffset(t_colOffset), m_rotation(t_rotation) {}

  001ca	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\dev\tetris\src\game.cpp

; 84   :     m_game.piece = new gameplay::Piece(m_game.board, &m_game.time, m_game.stats, 0, 0, 0, 0);

  001cc	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
; File c:\dev\tetris\src\piece.hpp

; 31   :                 : m_board(t_board), m_time(t_time), m_stats(t_stats), m_tetrominoIndex(t_tetrominoIndex), m_rowOffset(t_rowOffset), m_colOffset(t_colOffset), m_rotation(t_rotation) {}

  001cf	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001d2	89 50 08	 mov	 DWORD PTR [eax+8], edx
  001d5	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  001dc	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  001e3	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  001ea	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
; File c:\dev\tetris\src\game.cpp

; 84   :     m_game.piece = new gameplay::Piece(m_game.board, &m_game.time, m_game.stats, 0, 0, 0, 0);

  001f1	eb 02		 jmp	 SHORT $LN18@Game
$LN17@Game:
  001f3	33 c0		 xor	 eax, eax
$LN18@Game:
  001f5	0f 57 c0	 xorps	 xmm0, xmm0
  001f8	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 86   :     m_input = {};

  001fb	66 0f d6 47 30	 movq	 QWORD PTR [edi+48], xmm0
  00200	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h

; 536  :             return _time64(_Time);

  00207	6a 00		 push	 0
; File c:\dev\tetris\src\game.cpp

; 86   :     m_input = {};

  00209	66 c7 47 3c 00
	00		 mov	 WORD PTR [edi+60], 0
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h

; 536  :             return _time64(_Time);

  0020f	e8 00 00 00 00	 call	 __time64
; File c:\dev\tetris\src\game.cpp

; 89   :     srand(m_game.seed);

  00214	50		 push	 eax
  00215	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  00218	e8 00 00 00 00	 call	 _srand
  0021d	83 c4 08	 add	 esp, 8

; 90   :     std::cout << "Game seed: " << m_game.seed << "\n";

  00220	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00225	ff 77 2c	 push	 DWORD PTR [edi+44]
  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EGEHIPLI@Game?5seed?3?5@
  0022d	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00232	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00237	83 c4 08	 add	 esp, 8
  0023a	8b c8		 mov	 ecx, eax
  0023c	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00241	50		 push	 eax
  00242	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00247	83 c4 08	 add	 esp, 8

; 91   : }

  0024a	8b c7		 mov	 eax, edi
  0024c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00256	59		 pop	 ecx
  00257	5f		 pop	 edi
  00258	5e		 pop	 esi
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 1c 00	 ret	 28			; 0000001cH
$LN6@Game:

; 30   :             }
; 31   :             else
; 32   :             {
; 33   :                 std::cerr << "Renderer could not be created. SDL error: " 

  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00264	e8 00 00 00 00	 call	 _SDL_GetError
  00269	50		 push	 eax
  0026a	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MNJLHHGI@Renderer?5could?5not?5be?5created?4?5@

; 34   :                     << SDL_GetError() << "\n";
; 35   :                 exit(1);

  0026f	eb 7b		 jmp	 SHORT $LN32@Game
$LN4@Game:

; 36   :             }
; 37   :         }
; 38   :         else
; 39   :         {
; 40   :             std::cerr << "Window could not be created. SDL error: " << SDL_GetError() << "\n";

  00271	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00276	e8 00 00 00 00	 call	 _SDL_GetError
  0027b	50		 push	 eax
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PIFBGGOL@Window?5could?5not?5be?5created?4?5SD@

; 41   :             exit(1);

  00281	eb 69		 jmp	 SHORT $LN32@Game
$LN2@Game:

; 42   :         }
; 43   :     }
; 44   :     else
; 45   :     {
; 46   :         std::cerr << "Unable to intialize SDL. SDL error: " << SDL_GetError() << "\n";

  00283	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00288	e8 00 00 00 00	 call	 _SDL_GetError
  0028d	50		 push	 eax
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DAJCNOPK@Unable?5to?5intialize?5SDL?4?5SDL?5er@

; 47   :         exit(1);

  00293	eb 57		 jmp	 SHORT $LN32@Game
$LN10@Game:

; 59   :                 << ") has been loaded\n";
; 60   :         }
; 61   :         else
; 62   :         {
; 63   :             std::cerr << "Font " << t_fontName << "(" << t_fontSize 

  00295	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IMMMKLFB@?$CJ?5has?5not?5been?5loaded?6@
  0029a	56		 push	 esi
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_01ODHLEDKK@?$CI@
  002a0	50		 push	 eax
  002a1	68 00 00 00 00	 push	 OFFSET ??_C@_05JBNLDDKP@Font?5@
  002a6	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  002ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b0	83 c4 08	 add	 esp, 8
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002b9	83 c4 08	 add	 esp, 8
  002bc	50		 push	 eax
  002bd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002c2	83 c4 08	 add	 esp, 8
  002c5	8b c8		 mov	 ecx, eax
  002c7	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  002cc	50		 push	 eax
  002cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002d2	83 c4 08	 add	 esp, 8

; 64   :                 << ") has not been loaded\n";
; 65   :             exit(1);

  002d5	6a 01		 push	 1
  002d7	e8 00 00 00 00	 call	 _exit
$LN8@Game:

; 66   :         }
; 67   :     }
; 68   :     else
; 69   :     {
; 70   :         std::cerr << "Unable to initialize SDL_TTF. SDL_TTF error: " << TTF_GetError() << "\n";

  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  002e1	e8 00 00 00 00	 call	 _SDL_GetError
  002e6	50		 push	 eax
  002e7	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@CJNDLNMC@Unable?5to?5initialize?5SDL_TTF?4?5S@
$LN32@Game:

; 91   : }

  002ec	68 00 00 00 00	 push	 OFFSET ?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  002f1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f6	83 c4 08	 add	 esp, 8
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002ff	83 c4 08	 add	 esp, 8
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00308	83 c4 08	 add	 esp, 8
  0030b	6a 01		 push	 1
  0030d	e8 00 00 00 00	 call	 _exit
$LN31@Game:
  00312	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Game@core@@QAE@PBDHHHH0H@Z$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	8b 45 1c	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$??0Game@core@@QAE@PBDHHHH0H@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Game@core@@QAE@PBDHHHH0H@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Game@core@@QAE@PBDHHHH0H@Z ENDP			; core::Game::Game
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?RenderGameStats@Game@core@@AAEXHH@Z
_TEXT	SEGMENT
_buffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?RenderGameStats@Game@core@@AAEXHH@Z PROC		; core::Game::RenderGameStats, COMDAT
; _this$ = ecx

; 313  : {

  00000	b8 04 10 00 00	 mov	 eax, 4100		; 00001004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4100], eax
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx

; 314  :     char buffer[4096];
; 315  :     
; 316  :     i32 xPos = 5;
; 317  :     i32 yPos = 20;
; 318  :     
; 319  :     snprintf(buffer, sizeof(buffer), "LEVEL: %d", m_game.stats->GetLevel());

  0001b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0001e	ff 70 20	 push	 DWORD PTR [eax+32]
  00021	8d 44 24 08	 lea	 eax, DWORD PTR _buffer$[esp+4108]
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_09IFKCHJNG@LEVEL?3?5?$CFd@
  0002a	68 00 10 00 00	 push	 4096			; 00001000H
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00035	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 320  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	8b cc		 mov	 ecx, esp
  0003f	6a 00		 push	 0
  00041	6a 14		 push	 20			; 00000014H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00043	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 320  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  00045	8d 44 24 10	 lea	 eax, DWORD PTR _buffer$[esp+4116]
  00049	6a 05		 push	 5
  0004b	50		 push	 eax
  0004c	ff 76 40	 push	 DWORD PTR [esi+64]
  0004f	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 321  :     
; 322  :     yPos += 30;
; 323  :     snprintf(buffer, sizeof(buffer), "LINES: %d", m_game.stats->GetLineCount());

  0005b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005e	ff 70 24	 push	 DWORD PTR [eax+36]
  00061	8d 44 24 08	 lea	 eax, DWORD PTR _buffer$[esp+4108]
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_09DOEIBABC@LINES?3?5?$CFd@
  0006a	68 00 10 00 00	 push	 4096			; 00001000H
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 324  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	8b cc		 mov	 ecx, esp
  0007f	6a 00		 push	 0
  00081	6a 32		 push	 50			; 00000032H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00083	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 324  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  00085	8d 44 24 10	 lea	 eax, DWORD PTR _buffer$[esp+4116]
  00089	6a 05		 push	 5
  0008b	50		 push	 eax
  0008c	ff 76 40	 push	 DWORD PTR [esi+64]
  0008f	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 325  :     
; 326  :     yPos += 30;
; 327  :     snprintf(buffer, sizeof(buffer), "POINTS: %d", m_game.stats->GetPoints());

  0009b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0009e	ff 70 28	 push	 DWORD PTR [eax+40]
  000a1	8d 44 24 08	 lea	 eax, DWORD PTR _buffer$[esp+4108]
  000a5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OEGFDINF@POINTS?3?5?$CFd@
  000aa	68 00 10 00 00	 push	 4096			; 00001000H
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 328  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bd	8b cc		 mov	 ecx, esp
  000bf	6a 00		 push	 0
  000c1	6a 50		 push	 80			; 00000050H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  000c3	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 328  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos, TEXT_ALIGN_LEFT, Palette::s_highlightColor);

  000c5	8d 44 24 10	 lea	 eax, DWORD PTR _buffer$[esp+4116]
  000c9	6a 05		 push	 5
  000cb	50		 push	 eax
  000cc	ff 76 40	 push	 DWORD PTR [esi+64]
  000cf	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  000d4	8b c8		 mov	 ecx, eax
  000d6	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 329  : }

  000db	8b 8c 24 04 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4104]
  000e2	5e		 pop	 esi
  000e3	33 cc		 xor	 ecx, esp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  000f0	c2 08 00	 ret	 8
?RenderGameStats@Game@core@@AAEXHH@Z ENDP		; core::Game::RenderGameStats
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?RenderGameOver@Game@core@@AAEXHH@Z
_TEXT	SEGMENT
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?RenderGameOver@Game@core@@AAEXHH@Z PROC		; core::Game::RenderGameOver, COMDAT
; _this$ = ecx

; 308  :     i32 yPos = (BOARD_ROWS * BOARD_GRID_SIZE + t_yOffset) / 2;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _t_yOffset$[esp-4]
  00004	56		 push	 esi

; 309  :     Graphics::Instance()->DrawText(m_font, "GAME OVER", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00005	51		 push	 ecx
  00006	05 94 02 00 00	 add	 eax, 660		; 00000294H
  0000b	8b f1		 mov	 esi, ecx
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 308  :     i32 yPos = (BOARD_ROWS * BOARD_GRID_SIZE + t_yOffset) / 2;

  00013	99		 cdq
  00014	2b c2		 sub	 eax, edx

; 309  :     Graphics::Instance()->DrawText(m_font, "GAME OVER", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00016	8b d4		 mov	 edx, esp
  00018	6a 01		 push	 1
  0001a	d1 f8		 sar	 eax, 1
  0001c	50		 push	 eax
  0001d	68 96 00 00 00	 push	 150			; 00000096H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00022	89 0a		 mov	 DWORD PTR [edx], ecx
; File c:\dev\tetris\src\game.cpp

; 309  :     Graphics::Instance()->DrawText(m_font, "GAME OVER", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00024	68 00 00 00 00	 push	 OFFSET ??_C@_09MAOEPLNL@GAME?5OVER@
  00029	ff 76 40	 push	 DWORD PTR [esi+64]
  0002c	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00031	8b c8		 mov	 ecx, eax
  00033	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 310  : }

  00038	5e		 pop	 esi
  00039	c2 08 00	 ret	 8
?RenderGameOver@Game@core@@AAEXHH@Z ENDP		; core::Game::RenderGameOver
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?RenderGameLine@Game@core@@AAEXHH@Z
_TEXT	SEGMENT
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?RenderGameLine@Game@core@@AAEXHH@Z PROC		; core::Game::RenderGameLine, COMDAT
; _this$ = ecx

; 293  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 294  :     for (i32 row = 0; row < BOARD_ROWS; ++row)

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR _t_yOffset$[esp+8]
  00007	8b d9		 mov	 ebx, ecx
  00009	33 f6		 xor	 esi, esi
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@RenderGame:

; 295  :     {
; 296  :         if (m_game.stats->GetLines()[row])

  00010	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00013	80 3c 06 00	 cmp	 BYTE PTR [esi+eax], 0
  00017	74 20		 je	 SHORT $LN2@RenderGame
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 300  :             Graphics::Instance()->DrawFillRect(xPos, yPos, BOARD_COLS * BOARD_GRID_SIZE, BOARD_GRID_SIZE, Palette::s_highlightColor);

  0001e	51		 push	 ecx
  0001f	8b cc		 mov	 ecx, esp
  00021	6a 1e		 push	 30			; 0000001eH
  00023	68 2c 01 00 00	 push	 300			; 0000012cH
  00028	57		 push	 edi
  00029	6a 00		 push	 0
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0002b	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 300  :             Graphics::Instance()->DrawFillRect(xPos, yPos, BOARD_COLS * BOARD_GRID_SIZE, BOARD_GRID_SIZE, Palette::s_highlightColor);

  0002d	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawFillRect
$LN2@RenderGame:

; 294  :     for (i32 row = 0; row < BOARD_ROWS; ++row)

  00039	46		 inc	 esi
  0003a	83 c7 1e	 add	 edi, 30			; 0000001eH
  0003d	83 fe 16	 cmp	 esi, 22			; 00000016H
  00040	7c ce		 jl	 SHORT $LL4@RenderGame

; 301  :         }
; 302  :     }
; 303  : }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	c2 08 00	 ret	 8
?RenderGameLine@Game@core@@AAEXHH@Z ENDP		; core::Game::RenderGameLine
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?RenderGamePlay@Game@core@@AAEXHH@Z
_TEXT	SEGMENT
_piece$ = -28						; size = 28
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?RenderGamePlay@Game@core@@AAEXHH@Z PROC		; core::Game::RenderGamePlay, COMDAT
; _this$ = ecx

; 279  : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	56		 push	 esi

; 280  :     m_game.piece->DrawPiece(0, t_yOffset);

  00004	6a 00		 push	 0
  00006	ff 74 24 2c	 push	 DWORD PTR _t_yOffset$[esp+32]
  0000a	8b f1		 mov	 esi, ecx
  0000c	6a 00		 push	 0
  0000e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00011	e8 00 00 00 00	 call	 ?DrawPiece@Piece@gameplay@core@@QAEXHH_N@Z ; core::gameplay::Piece::DrawPiece

; 281  :     
; 282  :     Piece piece = *(m_game.piece);

  00016	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 284  :     while (piece.IsValid())

  00019	8d 4c 24 04	 lea	 ecx, DWORD PTR _piece$[esp+32]
  0001d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00020	0f 11 44 24 04	 movups	 XMMWORD PTR _piece$[esp+32], xmm0
  00025	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0002a	66 0f d6 44 24
	14		 movq	 QWORD PTR _piece$[esp+48], xmm0
  00030	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00033	89 44 24 1c	 mov	 DWORD PTR _piece$[esp+56], eax
  00037	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  0003c	5e		 pop	 esi
  0003d	84 c0		 test	 al, al
  0003f	74 10		 je	 SHORT $LN3@RenderGame
$LL2@RenderGame:
; File c:\dev\tetris\src\piece.hpp

; 46   :             inline void SetRowOffset(i32 t_rowOffset) { m_rowOffset = t_rowOffset; }

  00041	ff 44 24 10	 inc	 DWORD PTR _piece$[esp+44]
; File c:\dev\tetris\src\game.cpp

; 284  :     while (piece.IsValid())

  00045	8d 0c 24	 lea	 ecx, DWORD PTR _piece$[esp+28]
  00048	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  0004d	84 c0		 test	 al, al
  0004f	75 f0		 jne	 SHORT $LL2@RenderGame
$LN3@RenderGame:
; File c:\dev\tetris\src\piece.hpp

; 46   :             inline void SetRowOffset(i32 t_rowOffset) { m_rowOffset = t_rowOffset; }

  00051	ff 4c 24 10	 dec	 DWORD PTR _piece$[esp+44]
; File c:\dev\tetris\src\game.cpp

; 289  :     piece.DrawPiece(0, t_yOffset, true);

  00055	8d 0c 24	 lea	 ecx, DWORD PTR _piece$[esp+28]
  00058	6a 01		 push	 1
  0005a	ff 74 24 28	 push	 DWORD PTR _t_yOffset$[esp+28]
  0005e	6a 00		 push	 0
  00060	e8 00 00 00 00	 call	 ?DrawPiece@Piece@gameplay@core@@QAEXHH_N@Z ; core::gameplay::Piece::DrawPiece

; 290  : }

  00065	83 c4 1c	 add	 esp, 28			; 0000001cH
  00068	c2 08 00	 ret	 8
?RenderGamePlay@Game@core@@AAEXHH@Z ENDP		; core::Game::RenderGamePlay
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\color.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?RenderGameStart@Game@core@@AAEXHH@Z
_TEXT	SEGMENT
_buffer$ = -4100					; size = 4096
__$ArrayPad$ = -4					; size = 4
_t_xOffset$ = 8						; size = 4
_t_yOffset$ = 12					; size = 4
?RenderGameStart@Game@core@@AAEXHH@Z PROC		; core::Game::RenderGameStart, COMDAT
; _this$ = ecx

; 268  : {

  00000	b8 04 10 00 00	 mov	 eax, 4100		; 00001004H
  00005	e8 00 00 00 00	 call	 __chkstk
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000f	33 c4		 xor	 eax, esp
  00011	89 84 24 00 10
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+4100], eax

; 270  :     i32 yPos = (BOARD_ROWS * BOARD_GRID_SIZE + t_yOffset) / 2;

  00018	8b 84 24 0c 10
	00 00		 mov	 eax, DWORD PTR _t_yOffset$[esp+4096]
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	05 94 02 00 00	 add	 eax, 660		; 00000294H
  00026	8b f9		 mov	 edi, ecx

; 271  :     Graphics::Instance()->DrawText(m_font, "Press Enter to start", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00028	51		 push	 ecx
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 270  :     i32 yPos = (BOARD_ROWS * BOARD_GRID_SIZE + t_yOffset) / 2;

  0002f	99		 cdq
  00030	2b c2		 sub	 eax, edx

; 271  :     Graphics::Instance()->DrawText(m_font, "Press Enter to start", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00032	8b d4		 mov	 edx, esp
  00034	8b f0		 mov	 esi, eax
  00036	6a 01		 push	 1
  00038	d1 fe		 sar	 esi, 1
  0003a	56		 push	 esi
  0003b	68 96 00 00 00	 push	 150			; 00000096H
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00040	89 0a		 mov	 DWORD PTR [edx], ecx
; File c:\dev\tetris\src\game.cpp

; 271  :     Graphics::Instance()->DrawText(m_font, "Press Enter to start", xPos, yPos, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LKPPLCNE@Press?5Enter?5to?5start@
  00047	ff 77 40	 push	 DWORD PTR [edi+64]
  0004a	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  0004f	8b c8		 mov	 ecx, eax
  00051	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 272  :     
; 273  :     char buffer[4096];
; 274  :     snprintf(buffer, sizeof(buffer), "STARTING LEVEL: %d", m_game.stats->GetStartLevel());

  00056	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00059	ff 70 1c	 push	 DWORD PTR [eax+28]
  0005c	8d 44 24 0c	 lea	 eax, DWORD PTR _buffer$[esp+4112]
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CFKFPENJ@STARTING?5LEVEL?3?5?$CFd@
  00065	68 00 10 00 00	 push	 4096			; 00001000H
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _snprintf
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  00070	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_highlightColor@Palette@core@@2VColor@2@B ; core::Palette::s_highlightColor
; File c:\dev\tetris\src\game.cpp

; 275  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos + 30, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	8b cc		 mov	 ecx, esp
  0007a	6a 01		 push	 1
; File c:\dev\tetris\src\color.hpp

; 21   :             *this = t_color;

  0007c	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\dev\tetris\src\game.cpp

; 275  :     Graphics::Instance()->DrawText(m_font, buffer, xPos, yPos + 30, TEXT_ALIGN_CENTER, Palette::s_highlightColor);

  0007e	8d 46 1e	 lea	 eax, DWORD PTR [esi+30]
  00081	50		 push	 eax
  00082	68 96 00 00 00	 push	 150			; 00000096H
  00087	8d 44 24 18	 lea	 eax, DWORD PTR _buffer$[esp+4124]
  0008b	50		 push	 eax
  0008c	ff 77 40	 push	 DWORD PTR [edi+64]
  0008f	e8 00 00 00 00	 call	 ?Instance@Graphics@graphics@core@@SAPAV123@XZ ; core::graphics::Graphics::Instance
  00094	8b c8		 mov	 ecx, eax
  00096	e8 00 00 00 00	 call	 ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText

; 276  : }

  0009b	8b 8c 24 08 10
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+4108]
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	33 cc		 xor	 ecx, esp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	81 c4 04 10 00
	00		 add	 esp, 4100		; 00001004H
  000b1	c2 08 00	 ret	 8
?RenderGameStart@Game@core@@AAEXHH@Z ENDP		; core::Game::RenderGameStart
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?UpdateGameOver@Game@core@@AAEXXZ
_TEXT	SEGMENT
?UpdateGameOver@Game@core@@AAEXXZ PROC			; core::Game::UpdateGameOver, COMDAT
; _this$ = ecx

; 235  :     if (m_input.denter > 0)

  00000	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00004	7e 07		 jle	 SHORT $LN2@UpdateGame

; 236  :     {
; 237  :         m_game.phase = GAME_PHASE_START;

  00006	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
$LN2@UpdateGame:

; 238  :     }
; 239  : }

  0000d	c3		 ret	 0
?UpdateGameOver@Game@core@@AAEXXZ ENDP			; core::Game::UpdateGameOver
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?UpdateGameLine@Game@core@@AAEXXZ
_TEXT	SEGMENT
?UpdateGameLine@Game@core@@AAEXXZ PROC			; core::Game::UpdateGameLine, COMDAT
; _this$ = ecx

; 216  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 217  :     if (m_game.time.time >= m_game.time.highlightEndTime)

  00003	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00008	0f 2f 47 24	 comiss	 xmm0, DWORD PTR [edi+36]
  0000c	72 3a		 jb	 SHORT $LN2@UpdateGame

; 218  :     {
; 219  :         m_game.board->ClearLines(m_game.stats);

  0000e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00011	56		 push	 esi
  00012	ff 77 18	 push	 DWORD PTR [edi+24]
  00015	e8 00 00 00 00	 call	 ?ClearLines@Board@gameplay@core@@QAEXPAVStats@23@@Z ; core::gameplay::Board::ClearLines
; File c:\dev\tetris\src\stats.hpp

; 35   :             inline i32 GetLineCount() { return m_lineCount; }

  0001a	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]

; 42   :             inline void SetLineCount(i32 t_lineCount) { m_lineCount = t_lineCount; }

  0001d	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00020	01 41 24	 add	 DWORD PTR [ecx+36], eax
; File c:\dev\tetris\src\game.cpp

; 222  :         m_game.stats->ComputePoints();

  00023	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00026	e8 00 00 00 00	 call	 ?ComputePoints@Stats@gameplay@core@@QAEXXZ ; core::gameplay::Stats::ComputePoints
; File c:\dev\tetris\src\stats.hpp

; 35   :             inline i32 GetLineCount() { return m_lineCount; }

  0002b	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0002e	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]
; File c:\dev\tetris\src\game.cpp

; 224  :         if (m_game.stats->GetLineCount() >= m_game.stats->GetLinesForNextLevel())

  00031	e8 00 00 00 00	 call	 ?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ; core::gameplay::Stats::GetLinesForNextLevel
  00036	3b f0		 cmp	 esi, eax
  00038	5e		 pop	 esi
  00039	7c 06		 jl	 SHORT $LN3@UpdateGame
; File c:\dev\tetris\src\stats.hpp

; 34   :             inline i32 GetLevel() { return m_level; }

  0003b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 41   :             inline void SetLevel(i32 t_level) { m_level = t_level; }

  0003e	ff 40 20	 inc	 DWORD PTR [eax+32]
$LN3@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 229  :         m_game.phase = GAME_PHASE_PLAY;

  00041	c7 47 1c 01 00
	00 00		 mov	 DWORD PTR [edi+28], 1
$LN2@UpdateGame:
  00048	5f		 pop	 edi

; 230  :     }
; 231  : }

  00049	c3		 ret	 0
?UpdateGameLine@Game@core@@AAEXXZ ENDP			; core::Game::UpdateGameLine
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\piece.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?UpdateGamePlay@Game@core@@AAEXXZ
_TEXT	SEGMENT
_piece$ = -28						; size = 28
?UpdateGamePlay@Game@core@@AAEXXZ PROC			; core::Game::UpdateGamePlay, COMDAT
; _this$ = ecx

; 164  : {

  00000	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 165  :     Piece piece = *(m_game.piece);
; 166  :     
; 167  :     if (m_input.dleft > 0)

  00006	80 7e 37 00	 cmp	 BYTE PTR [esi+55], 0
  0000a	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 44 24 04	 movups	 XMMWORD PTR _piece$[esp+32], xmm0
  00015	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001a	66 0f d6 44 24
	14		 movq	 QWORD PTR _piece$[esp+48], xmm0
  00020	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00023	8b 44 24 18	 mov	 eax, DWORD PTR _piece$[esp+52]
  00027	89 4c 24 1c	 mov	 DWORD PTR _piece$[esp+56], ecx
  0002b	7e 05		 jle	 SHORT $LN4@UpdateGame
; File c:\dev\tetris\src\piece.hpp

; 47   :             inline void SetColOffset(i32 t_colOffset) { m_colOffset = t_colOffset; }

  0002d	48		 dec	 eax
  0002e	89 44 24 18	 mov	 DWORD PTR _piece$[esp+52], eax
$LN4@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 172  :     if (m_input.dright > 0)

  00032	80 7e 38 00	 cmp	 BYTE PTR [esi+56], 0
  00036	7e 05		 jle	 SHORT $LN5@UpdateGame
; File c:\dev\tetris\src\piece.hpp

; 47   :             inline void SetColOffset(i32 t_colOffset) { m_colOffset = t_colOffset; }

  00038	40		 inc	 eax
  00039	89 44 24 18	 mov	 DWORD PTR _piece$[esp+52], eax
$LN5@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 177  :     if (m_input.dup > 0)

  0003d	80 7e 39 00	 cmp	 BYTE PTR [esi+57], 0
  00041	7e 05		 jle	 SHORT $LN6@UpdateGame
; File c:\dev\tetris\src\piece.hpp

; 48   :             inline void SetRotation(i32 t_rotation)   { m_rotation = t_rotation; }

  00043	41		 inc	 ecx
  00044	89 4c 24 1c	 mov	 DWORD PTR _piece$[esp+56], ecx
$LN6@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 182  :     if (piece.IsValid())

  00048	8d 4c 24 04	 lea	 ecx, DWORD PTR _piece$[esp+32]
  0004c	e8 00 00 00 00	 call	 ?IsValid@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::IsValid
  00051	84 c0		 test	 al, al
  00053	74 1d		 je	 SHORT $LN7@UpdateGame

; 183  :     {
; 184  :         *(m_game.piece) = piece;

  00055	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00058	0f 10 44 24 04	 movups	 xmm0, XMMWORD PTR _piece$[esp+32]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00060	f3 0f 7e 44 24
	14		 movq	 xmm0, QWORD PTR _piece$[esp+48]
  00066	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  0006b	8b 44 24 1c	 mov	 eax, DWORD PTR _piece$[esp+56]
  0006f	89 41 18	 mov	 DWORD PTR [ecx+24], eax
$LN7@UpdateGame:

; 185  :     }
; 186  :     
; 187  :     if (m_input.ddown > 0)

  00072	80 7e 3a 00	 cmp	 BYTE PTR [esi+58], 0
  00076	7e 08		 jle	 SHORT $LN8@UpdateGame

; 188  :     {
; 189  :         m_game.piece->SoftDrop();

  00078	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0007b	e8 00 00 00 00	 call	 ?SoftDrop@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::SoftDrop
$LN8@UpdateGame:

; 190  :     }
; 191  :     
; 192  :     if (m_input.dz > 0)

  00080	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  00084	7e 08		 jle	 SHORT $LN27@UpdateGame

; 193  :     {
; 194  :         m_game.piece->HardDrop();

  00086	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00089	e8 00 00 00 00	 call	 ?HardDrop@Piece@gameplay@core@@QAEXXZ ; core::gameplay::Piece::HardDrop
$LN27@UpdateGame:

; 195  :     }
; 196  :     
; 197  :     while (m_game.time.time >= m_game.time.nextDropTime)

  0008e	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  00093	0f 2f 46 20	 comiss	 xmm0, DWORD PTR [esi+32]
  00097	72 1a		 jb	 SHORT $LN3@UpdateGame
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@UpdateGame:

; 198  :     {
; 199  :         m_game.piece->SoftDrop();

  000a0	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000a3	e8 00 00 00 00	 call	 ?SoftDrop@Piece@gameplay@core@@QAE_NXZ ; core::gameplay::Piece::SoftDrop
  000a8	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  000ad	0f 2f 46 20	 comiss	 xmm0, DWORD PTR [esi+32]
  000b1	73 ed		 jae	 SHORT $LL2@UpdateGame
$LN3@UpdateGame:

; 200  :     }
; 201  :     
; 202  :     m_game.board->FindLines(m_game.stats);

  000b3	ff 76 18	 push	 DWORD PTR [esi+24]
  000b6	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000b9	e8 00 00 00 00	 call	 ?FindLines@Board@gameplay@core@@QAEXPAVStats@23@@Z ; core::gameplay::Board::FindLines

; 203  :     if (m_game.stats->GetPendingLineCount() > 0)

  000be	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000c1	83 78 18 00	 cmp	 DWORD PTR [eax+24], 0
  000c5	7e 19		 jle	 SHORT $LN10@UpdateGame

; 204  :     {
; 205  :         m_game.phase = GAME_PHASE_LINE;
; 206  :         m_game.time.highlightEndTime = m_game.time.time + 0.35f;

  000c7	f3 0f 10 46 28	 movss	 xmm0, DWORD PTR [esi+40]
  000cc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3eb33333
  000d4	c7 46 1c 02 00
	00 00		 mov	 DWORD PTR [esi+28], 2
  000db	f3 0f 11 46 24	 movss	 DWORD PTR [esi+36], xmm0
$LN10@UpdateGame:

; 207  :     }
; 208  :     
; 209  :     if (!m_game.board->IsRowEmpty(0))

  000e0	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000e3	6a 00		 push	 0
  000e5	e8 00 00 00 00	 call	 ?IsRowEmpty@Board@gameplay@core@@QAE_NH@Z ; core::gameplay::Board::IsRowEmpty
  000ea	84 c0		 test	 al, al
  000ec	75 07		 jne	 SHORT $LN11@UpdateGame

; 210  :     {
; 211  :         m_game.phase = GAME_PHASE_OVER;

  000ee	c7 46 1c 03 00
	00 00		 mov	 DWORD PTR [esi+28], 3
$LN11@UpdateGame:
  000f5	5e		 pop	 esi

; 212  :     }
; 213  : }

  000f6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f9	c3		 ret	 0
?UpdateGamePlay@Game@core@@AAEXXZ ENDP			; core::Game::UpdateGamePlay
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\board.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\game.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\dev\tetris\src\game.cpp
; File c:\dev\tetris\src\stats.hpp
; File c:\dev\tetris\src\game.cpp
;	COMDAT ?UpdateGameStart@Game@core@@AAEXXZ
_TEXT	SEGMENT
?UpdateGameStart@Game@core@@AAEXXZ PROC			; core::Game::UpdateGameStart, COMDAT
; _this$ = ecx

; 140  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 141  :     if (m_input.dup > 0)

  00003	80 7e 39 00	 cmp	 BYTE PTR [esi+57], 0
  00007	7e 06		 jle	 SHORT $LN2@UpdateGame
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  00009	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 40   :             inline void SetStartLevel(i32 t_startLevel) { m_startLevel = t_startLevel;  }

  0000c	ff 40 1c	 inc	 DWORD PTR [eax+28]
$LN2@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 146  :     if (m_input.ddown > 0 && m_game.stats->GetStartLevel() > 0)

  0000f	80 7e 3a 00	 cmp	 BYTE PTR [esi+58], 0
  00013	7e 0e		 jle	 SHORT $LN3@UpdateGame
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  00015	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File c:\dev\tetris\src\game.cpp

; 146  :     if (m_input.ddown > 0 && m_game.stats->GetStartLevel() > 0)

  00018	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0001b	85 c0		 test	 eax, eax
  0001d	7e 04		 jle	 SHORT $LN3@UpdateGame

; 147  :     {
; 148  :         m_game.stats->SetStartLevel(m_game.stats->GetStartLevel() - 1);

  0001f	48		 dec	 eax
; File c:\dev\tetris\src\stats.hpp

; 40   :             inline void SetStartLevel(i32 t_startLevel) { m_startLevel = t_startLevel;  }

  00020	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
$LN3@UpdateGame:
; File c:\dev\tetris\src\game.cpp

; 151  :     if (m_input.denter > 0)

  00023	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00027	7e 4e		 jle	 SHORT $LN4@UpdateGame
; File c:\dev\tetris\src\board.hpp

; 47   :             inline void Clear() { m_boardData.Clear(); }

  00029	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002c	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  0002d	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  00030	8b ca		 mov	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00032	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  00035	2b cf		 sub	 ecx, edi
  00037	83 c1 03	 add	 ecx, 3
  0003a	33 c0		 xor	 eax, eax
  0003c	c1 e9 02	 shr	 ecx, 2
  0003f	3b fa		 cmp	 edi, edx
  00041	0f 47 c8	 cmova	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 2902 : 	for (; _First != _Last; ++_First)

  00044	85 c9		 test	 ecx, ecx
  00046	74 02		 je	 SHORT $LN80@UpdateGame
; File c:\dev\tetris\src\game.cpp

; 153  :         m_game.board->Clear();

  00048	f3 ab		 rep stosd
$LN80@UpdateGame:
; File c:\dev\tetris\src\stats.hpp

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  0004a	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 41   :             inline void SetLevel(i32 t_level) { m_level = t_level; }

  0004d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00050	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 42   :             inline void SetLineCount(i32 t_lineCount) { m_lineCount = t_lineCount; }

  00053	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00056	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 43   :             inline void SetPoints(i32 t_points) { m_points = t_points; }

  0005d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00060	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File c:\dev\tetris\src\game.cpp

; 157  :         m_game.piece->SpawnNewPiece();

  00067	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0006a	e8 00 00 00 00	 call	 ?SpawnNewPiece@Piece@gameplay@core@@QAEXXZ ; core::gameplay::Piece::SpawnNewPiece

; 158  :         m_game.phase = GAME_PHASE_PLAY;

  0006f	c7 46 1c 01 00
	00 00		 mov	 DWORD PTR [esi+28], 1
  00076	5f		 pop	 edi
$LN4@UpdateGame:

; 159  :     }
; 160  :     
; 161  : }

  00077	5e		 pop	 esi
  00078	c3		 ret	 0
?UpdateGameStart@Game@core@@AAEXXZ ENDP			; core::Game::UpdateGameStart
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?SetRotation@Piece@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_rotation$ = 8					; size = 4
?SetRotation@Piece@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Piece::SetRotation, COMDAT
; _this$ = ecx

; 48   :             inline void SetRotation(i32 t_rotation)   { m_rotation = t_rotation; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_rotation$[esp-4]
  00004	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00007	c2 04 00	 ret	 4
?SetRotation@Piece@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Piece::SetRotation
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?SetColOffset@Piece@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_colOffset$ = 8					; size = 4
?SetColOffset@Piece@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Piece::SetColOffset, COMDAT
; _this$ = ecx

; 47   :             inline void SetColOffset(i32 t_colOffset) { m_colOffset = t_colOffset; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_colOffset$[esp-4]
  00004	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00007	c2 04 00	 ret	 4
?SetColOffset@Piece@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Piece::SetColOffset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?SetRowOffset@Piece@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_rowOffset$ = 8					; size = 4
?SetRowOffset@Piece@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Piece::SetRowOffset, COMDAT
; _this$ = ecx

; 46   :             inline void SetRowOffset(i32 t_rowOffset) { m_rowOffset = t_rowOffset; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_rowOffset$[esp-4]
  00004	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00007	c2 04 00	 ret	 4
?SetRowOffset@Piece@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Piece::SetRowOffset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?GetRotation@Piece@gameplay@core@@QBEHXZ
_TEXT	SEGMENT
?GetRotation@Piece@gameplay@core@@QBEHXZ PROC		; core::gameplay::Piece::GetRotation, COMDAT
; _this$ = ecx

; 43   :             inline i32 GetRotation()       const { return m_rotation; }

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetRotation@Piece@gameplay@core@@QBEHXZ ENDP		; core::gameplay::Piece::GetRotation
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?GetColOffset@Piece@gameplay@core@@QBEHXZ
_TEXT	SEGMENT
?GetColOffset@Piece@gameplay@core@@QBEHXZ PROC		; core::gameplay::Piece::GetColOffset, COMDAT
; _this$ = ecx

; 42   :             inline i32 GetColOffset()      const { return m_colOffset; }

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?GetColOffset@Piece@gameplay@core@@QBEHXZ ENDP		; core::gameplay::Piece::GetColOffset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ?GetRowOffset@Piece@gameplay@core@@QBEHXZ
_TEXT	SEGMENT
?GetRowOffset@Piece@gameplay@core@@QBEHXZ PROC		; core::gameplay::Piece::GetRowOffset, COMDAT
; _this$ = ecx

; 41   :             inline i32 GetRowOffset()      const { return m_rowOffset; }

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	c3		 ret	 0
?GetRowOffset@Piece@gameplay@core@@QBEHXZ ENDP		; core::gameplay::Piece::GetRowOffset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\piece.hpp
;	COMDAT ??0Piece@gameplay@core@@QAE@PAVBoard@12@PAUGameTime@@PAVStats@12@HHHH@Z
_TEXT	SEGMENT
_t_board$ = 8						; size = 4
_t_time$ = 12						; size = 4
_t_stats$ = 16						; size = 4
_t_tetrominoIndex$ = 20					; size = 4
_t_rowOffset$ = 24					; size = 4
_t_colOffset$ = 28					; size = 4
_t_rotation$ = 32					; size = 4
??0Piece@gameplay@core@@QAE@PAVBoard@12@PAUGameTime@@PAVStats@12@HHHH@Z PROC ; core::gameplay::Piece::Piece, COMDAT
; _this$ = ecx

; 31   :                 : m_board(t_board), m_time(t_time), m_stats(t_stats), m_tetrominoIndex(t_tetrominoIndex), m_rowOffset(t_rowOffset), m_colOffset(t_colOffset), m_rotation(t_rotation) {}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_board$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax
  00006	8b 44 24 08	 mov	 eax, DWORD PTR _t_time$[esp-4]
  0000a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000d	8b 44 24 0c	 mov	 eax, DWORD PTR _t_stats$[esp-4]
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00014	8b 44 24 10	 mov	 eax, DWORD PTR _t_tetrominoIndex$[esp-4]
  00018	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001b	8b 44 24 14	 mov	 eax, DWORD PTR _t_rowOffset$[esp-4]
  0001f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00022	8b 44 24 18	 mov	 eax, DWORD PTR _t_colOffset$[esp-4]
  00026	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00029	8b 44 24 1c	 mov	 eax, DWORD PTR _t_rotation$[esp-4]
  0002d	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00030	8b c1		 mov	 eax, ecx
  00032	c2 1c 00	 ret	 28			; 0000001cH
??0Piece@gameplay@core@@QAE@PAVBoard@12@PAUGameTime@@PAVStats@12@HHHH@Z ENDP ; core::gameplay::Piece::Piece
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\board.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\board.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\board.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\dev\tetris\src\board.hpp
;	COMDAT ?Clear@Board@gameplay@core@@QAEXXZ
_TEXT	SEGMENT
?Clear@Board@gameplay@core@@QAEXXZ PROC			; core::gameplay::Board::Clear, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File c:\dev\tetris\src\board.hpp

; 47   :             inline void Clear() { m_boardData.Clear(); }

  00003	33 d2		 xor	 edx, edx
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00006	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
; File c:\dev\tetris\src\board.hpp

; 47   :             inline void Clear() { m_boardData.Clear(); }

  00009	8b c8		 mov	 ecx, eax
  0000b	2b cf		 sub	 ecx, edi
  0000d	83 c1 03	 add	 ecx, 3
  00010	c1 e9 02	 shr	 ecx, 2
  00013	3b f8		 cmp	 edi, eax
  00015	0f 47 ca	 cmova	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 2902 : 	for (; _First != _Last; ++_First)

  00018	85 c9		 test	 ecx, ecx
  0001a	74 04		 je	 SHORT $LN65@Clear
; File c:\dev\tetris\src\board.hpp

; 47   :             inline void Clear() { m_boardData.Clear(); }

  0001c	33 c0		 xor	 eax, eax
  0001e	f3 ab		 rep stosd
$LN65@Clear:
  00020	5f		 pop	 edi
  00021	c3		 ret	 0
?Clear@Board@gameplay@core@@QAEXXZ ENDP			; core::gameplay::Board::Clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?SetPoints@Stats@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_points$ = 8						; size = 4
?SetPoints@Stats@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Stats::SetPoints, COMDAT
; _this$ = ecx

; 43   :             inline void SetPoints(i32 t_points) { m_points = t_points; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_points$[esp-4]
  00004	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00007	c2 04 00	 ret	 4
?SetPoints@Stats@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Stats::SetPoints
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?SetLineCount@Stats@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_lineCount$ = 8					; size = 4
?SetLineCount@Stats@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Stats::SetLineCount, COMDAT
; _this$ = ecx

; 42   :             inline void SetLineCount(i32 t_lineCount) { m_lineCount = t_lineCount; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_lineCount$[esp-4]
  00004	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00007	c2 04 00	 ret	 4
?SetLineCount@Stats@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Stats::SetLineCount
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?SetLevel@Stats@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_level$ = 8						; size = 4
?SetLevel@Stats@gameplay@core@@QAEXH@Z PROC		; core::gameplay::Stats::SetLevel, COMDAT
; _this$ = ecx

; 41   :             inline void SetLevel(i32 t_level) { m_level = t_level; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_level$[esp-4]
  00004	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  00007	c2 04 00	 ret	 4
?SetLevel@Stats@gameplay@core@@QAEXH@Z ENDP		; core::gameplay::Stats::SetLevel
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?SetStartLevel@Stats@gameplay@core@@QAEXH@Z
_TEXT	SEGMENT
_t_startLevel$ = 8					; size = 4
?SetStartLevel@Stats@gameplay@core@@QAEXH@Z PROC	; core::gameplay::Stats::SetStartLevel, COMDAT
; _this$ = ecx

; 40   :             inline void SetStartLevel(i32 t_startLevel) { m_startLevel = t_startLevel;  }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_startLevel$[esp-4]
  00004	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  00007	c2 04 00	 ret	 4
?SetStartLevel@Stats@gameplay@core@@QAEXH@Z ENDP	; core::gameplay::Stats::SetStartLevel
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetPoints@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetPoints@Stats@gameplay@core@@QAEHXZ PROC		; core::gameplay::Stats::GetPoints, COMDAT
; _this$ = ecx

; 36   :             inline i32 GetPoints() { return m_points; }

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00003	c3		 ret	 0
?GetPoints@Stats@gameplay@core@@QAEHXZ ENDP		; core::gameplay::Stats::GetPoints
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetLineCount@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetLineCount@Stats@gameplay@core@@QAEHXZ PROC		; core::gameplay::Stats::GetLineCount, COMDAT
; _this$ = ecx

; 35   :             inline i32 GetLineCount() { return m_lineCount; }

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetLineCount@Stats@gameplay@core@@QAEHXZ ENDP		; core::gameplay::Stats::GetLineCount
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetLevel@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetLevel@Stats@gameplay@core@@QAEHXZ PROC		; core::gameplay::Stats::GetLevel, COMDAT
; _this$ = ecx

; 34   :             inline i32 GetLevel() { return m_level; }

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	c3		 ret	 0
?GetLevel@Stats@gameplay@core@@QAEHXZ ENDP		; core::gameplay::Stats::GetLevel
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetStartLevel@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetStartLevel@Stats@gameplay@core@@QAEHXZ PROC		; core::gameplay::Stats::GetStartLevel, COMDAT
; _this$ = ecx

; 33   :             inline i32 GetStartLevel() { return m_startLevel; }

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	c3		 ret	 0
?GetStartLevel@Stats@gameplay@core@@QAEHXZ ENDP		; core::gameplay::Stats::GetStartLevel
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetPendingLineCount@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetPendingLineCount@Stats@gameplay@core@@QAEHXZ PROC	; core::gameplay::Stats::GetPendingLineCount, COMDAT
; _this$ = ecx

; 32   :             inline i32 GetPendingLineCount() { return m_pendingLineCount; }

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetPendingLineCount@Stats@gameplay@core@@QAEHXZ ENDP	; core::gameplay::Stats::GetPendingLineCount
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ?GetLines@Stats@gameplay@core@@QAEPA_NXZ
_TEXT	SEGMENT
?GetLines@Stats@gameplay@core@@QAEPA_NXZ PROC		; core::gameplay::Stats::GetLines, COMDAT
; _this$ = ecx

; 31   :             inline bool* GetLines() { return m_lines; }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
?GetLines@Stats@gameplay@core@@QAEPA_NXZ ENDP		; core::gameplay::Stats::GetLines
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.hpp
;	COMDAT ??0Stats@gameplay@core@@QAE@XZ
_TEXT	SEGMENT
??0Stats@gameplay@core@@QAE@XZ PROC			; core::gameplay::Stats::Stats, COMDAT
; _this$ = ecx

; 17   :             i32 m_pendingLineCount = 0;

  00000	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 25   :             Stats() {}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00010	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00017	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  0001e	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00025	c3		 ret	 0
??0Stats@gameplay@core@@QAE@XZ ENDP			; core::gameplay::Stats::Stats
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$fill@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0ABH@Z PROC ; std::fill<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,int>, COMDAT

; 2923 : 	{	// copy _Val through [_First, _Last)

  00000	53		 push	 ebx

; 2917 : 	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]

; 2924 : 	_Adl_verify_range(_First, _Last);
; 2925 : 	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);

  00005	33 c9		 xor	 ecx, ecx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Last$[esp+4]
  0000c	33 d2		 xor	 edx, edx
  0000e	2b eb		 sub	 ebp, ebx
  00010	83 c5 03	 add	 ebp, 3
  00013	c1 ed 02	 shr	 ebp, 2
  00016	3b 5c 24 10	 cmp	 ebx, DWORD PTR __Last$[esp+4]
  0001a	0f 47 e9	 cmova	 ebp, ecx

; 2902 : 	for (; _First != _Last; ++_First)

  0001d	85 ed		 test	 ebp, ebp
  0001f	74 52		 je	 SHORT $LN21@fill
  00021	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  00025	57		 push	 edi
  00026	83 fd 04	 cmp	 ebp, 4
  00029	72 32		 jb	 SHORT $LN27@fill

; 2903 : 		*_First = _Val;

  0002b	8b 38		 mov	 edi, DWORD PTR [eax]

; 2924 : 	_Adl_verify_range(_First, _Last);
; 2925 : 	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);

  0002d	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  00030	8d 0c a9	 lea	 ecx, DWORD PTR [ecx+ebp*4]
  00033	3b d8		 cmp	 ebx, eax
  00035	77 04		 ja	 SHORT $LN28@fill
  00037	3b c8		 cmp	 ecx, eax
  00039	73 22		 jae	 SHORT $LN27@fill
$LN28@fill:
  0003b	56		 push	 esi
  0003c	8b f5		 mov	 esi, ebp
  0003e	83 e6 fc	 and	 esi, -4			; fffffffcH
$LL22@fill:

; 2902 : 	for (; _First != _Last; ++_First)

  00041	83 c2 04	 add	 edx, 4
  00044	3b d6		 cmp	 edx, esi
  00046	75 f9		 jne	 SHORT $LL22@fill

; 2924 : 	_Adl_verify_range(_First, _Last);
; 2925 : 	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);

  00048	c1 e6 02	 shl	 esi, 2
  0004b	8b c7		 mov	 eax, edi
  0004d	8b ce		 mov	 ecx, esi
  0004f	8b fb		 mov	 edi, ebx
  00051	c1 e9 02	 shr	 ecx, 2
  00054	03 de		 add	 ebx, esi
  00056	f3 ab		 rep stosd
  00058	8b 44 24 1c	 mov	 eax, DWORD PTR __Val$[esp+12]
  0005c	5e		 pop	 esi
$LN27@fill:

; 2902 : 	for (; _First != _Last; ++_First)

  0005d	5f		 pop	 edi
  0005e	3b d5		 cmp	 edx, ebp
  00060	74 11		 je	 SHORT $LN21@fill
$LL26@fill:

; 2903 : 		*_First = _Val;

  00062	8b 00		 mov	 eax, DWORD PTR [eax]

; 2924 : 	_Adl_verify_range(_First, _Last);
; 2925 : 	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);

  00064	8d 5b 04	 lea	 ebx, DWORD PTR [ebx+4]

; 2902 : 	for (; _First != _Last; ++_First)

  00067	42		 inc	 edx

; 2903 : 		*_First = _Val;

  00068	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
  0006b	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0006f	3b d5		 cmp	 edx, ebp
  00071	75 ef		 jne	 SHORT $LL26@fill
$LN21@fill:
  00073	5d		 pop	 ebp

; 2926 : 	}

  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
??$fill@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0ABH@Z ENDP ; std::fill<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >,int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 327  : 		return (this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  : 		}

  00002	c3		 ret	 0
?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr(_Parg)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Parg$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 254  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr(_Parg)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Parg$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 43   : 		this->_Adopt(_Pvector);
; 44   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<int> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\math\matrix.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\math\matrix.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
; File c:\dev\tetris\src\math\matrix.hpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\dev\tetris\src\math\matrix.hpp
;	COMDAT ?Clear@Matrix@math@core@@QAEXXZ
_TEXT	SEGMENT
?Clear@Matrix@math@core@@QAEXXZ PROC			; core::math::Matrix::Clear, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\dev\tetris\src\math\matrix.hpp

; 53   :                 std::fill(m_data.begin(), m_data.end(), 0);

  00003	33 d2		 xor	 edx, edx
  00005	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector

; 41   : 		: _Ptr(_Parg)

  00006	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
; File c:\dev\tetris\src\math\matrix.hpp

; 53   :                 std::fill(m_data.begin(), m_data.end(), 0);

  00009	8b c8		 mov	 ecx, eax
  0000b	2b cf		 sub	 ecx, edi
  0000d	83 c1 03	 add	 ecx, 3
  00010	c1 e9 02	 shr	 ecx, 2
  00013	3b f8		 cmp	 edi, eax
  00015	0f 47 ca	 cmova	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 2902 : 	for (; _First != _Last; ++_First)

  00018	85 c9		 test	 ecx, ecx
  0001a	74 04		 je	 SHORT $LN63@Clear
; File c:\dev\tetris\src\math\matrix.hpp

; 53   :                 std::fill(m_data.begin(), m_data.end(), 0);

  0001c	33 c0		 xor	 eax, eax
  0001e	f3 ab		 rep stosd
$LN63@Clear:

; 54   :             }

  00020	5f		 pop	 edi
  00021	c3		 ret	 0
?Clear@Matrix@math@core@@QAEXXZ ENDP			; core::math::Matrix::Clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr(_Parg)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 1629 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));
; 1630 : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 41   : 		: _Ptr(_Parg)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 1619 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));
; 1620 : 		}

  00008	c2 04 00	 ret	 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAPAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.hpp
;	COMDAT ?SetRenderer@Graphics@graphics@core@@QAEXPAUSDL_Renderer@@@Z
_TEXT	SEGMENT
_t_renderer$ = 8					; size = 4
?SetRenderer@Graphics@graphics@core@@QAEXPAUSDL_Renderer@@@Z PROC ; core::graphics::Graphics::SetRenderer, COMDAT
; _this$ = ecx

; 36   :             inline void SetRenderer(SDL_Renderer *t_renderer) { m_renderer = t_renderer; }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_renderer$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax
  00006	c2 04 00	 ret	 4
?SetRenderer@Graphics@graphics@core@@QAEXPAUSDL_Renderer@@@Z ENDP ; core::graphics::Graphics::SetRenderer
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\color.hpp
;	COMDAT ??0Color@core@@QAE@EEEE@Z
_TEXT	SEGMENT
_r$ = 8							; size = 1
_g$ = 12						; size = 1
_b$ = 16						; size = 1
_a$ = 20						; size = 1
??0Color@core@@QAE@EEEE@Z PROC				; core::Color::Color, COMDAT
; _this$ = ecx

; 25   :         {
; 26   :             this->r = r;

  00000	8a 44 24 04	 mov	 al, BYTE PTR _r$[esp-4]
  00004	88 01		 mov	 BYTE PTR [ecx], al

; 27   :             this->g = g;

  00006	8a 44 24 08	 mov	 al, BYTE PTR _g$[esp-4]
  0000a	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 28   :             this->b = b;

  0000d	8a 44 24 0c	 mov	 al, BYTE PTR _b$[esp-4]
  00011	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 29   :             this->a = a;

  00014	8a 44 24 10	 mov	 al, BYTE PTR _a$[esp-4]
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 30   :         }

  0001b	8b c1		 mov	 eax, ecx
  0001d	c2 10 00	 ret	 16			; 00000010H
??0Color@core@@QAE@EEEE@Z ENDP				; core::Color::Color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\color.hpp
;	COMDAT ??0Color@core@@QAE@ABV01@@Z
_TEXT	SEGMENT
_t_color$ = 8						; size = 4
??0Color@core@@QAE@ABV01@@Z PROC			; core::Color::Color, COMDAT
; _this$ = ecx

; 20   :         {
; 21   :             *this = t_color;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_color$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 22   :         }

  00008	8b c1		 mov	 eax, ecx
  0000a	c2 04 00	 ret	 4
??0Color@core@@QAE@ABV01@@Z ENDP			; core::Color::Color
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 536  :             return _time64(_Time);

  00000	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 444  : 		{	// get locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 445  : 		return (*_Ploc);

  00023	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 303  : 		{	// construct by copying

  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 304  : 		_Ptr->_Incref();

  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	ff 52 04	 call	 DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 445  : 		return (*_Ploc);

  0003b	8b c6		 mov	 eax, esi

; 446  : 		}

  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?getloc@ios_base@std@@QBE?AVlocale@2@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?getloc@ios_base@std@@QBE?AVlocale@2@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 438  : 		const streamsize _Oldwidth = _Wide;

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00006	56		 push	 esi

; 439  : 		_Wide = _Newwidth;

  00007	8b 74 24 08	 mov	 esi, DWORD PTR __Newwidth$[esp]
  0000b	89 71 20	 mov	 DWORD PTR [ecx+32], esi
  0000e	8b 74 24 0c	 mov	 esi, DWORD PTR __Newwidth$[esp+4]
  00012	89 71 24	 mov	 DWORD PTR [ecx+36], esi

; 440  : 		return (_Oldwidth);

  00015	5e		 pop	 esi

; 441  : 		}

  00016	c2 08 00	 ret	 8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 433  : 		return (_Wide);

  00000	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00003	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]

; 434  : 		}

  00006	c3		 ret	 0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 421  : 		return (_Prec);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]

; 422  : 		}

  00006	c3		 ret	 0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 390  : 		return (_Fmtfl);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 391  : 		}

  00003	c3		 ret	 0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 352  : 		return (rdstate() == ios_base::goodbit);

  00000	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00004	0f 94 c0	 sete	 al

; 353  : 		}

  00007	c3		 ret	 0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 330  : 		return (_Mystate);

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 331  : 		}

  00003	c3		 ret	 0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
$T2 = -20						; size = 20
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 288  : 		_State &= _Statmask;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __State$[esp-4]
  00004	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00007	83 e0 17	 and	 eax, 23			; 00000017H

; 289  : 		_Mystate = _State;

  0000a	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 290  : 		const auto _Filtered = _State & _Except;

  0000d	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00010	23 c8		 and	 ecx, eax

; 291  : 		if (_Filtered)

  00012	74 09		 je	 SHORT $LN2@clear

; 292  : 			{
; 293  : 			if (_Reraise)

  00014	80 7c 24 24 00	 cmp	 BYTE PTR __Reraise$[esp+24], 0
  00019	74 11		 je	 SHORT $LN3@clear
  0001b	eb 06		 jmp	 SHORT $LN11@clear
$LN2@clear:

; 313  : 			}
; 314  : 		}

  0001d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00020	c2 08 00	 ret	 8
$LN11@clear:

; 294  : 				{
; 295  : 				_RERAISE;

  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:
  0002c	56		 push	 esi

; 296  : 				}
; 297  : 
; 298  : 			const char * _Msg;
; 299  : 			if (_Filtered & ios_base::badbit)

  0002d	f6 c1 04	 test	 cl, 4
  00030	74 07		 je	 SHORT $LN4@clear

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

  00032	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00037	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

  00039	f6 c1 02	 test	 cl, 2
  0003c	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00041	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00046	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";
; 306  : 				}
; 307  : 			else
; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";
; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

  00049	8d 44 24 04	 lea	 eax, DWORD PTR $T1[esp+32]
  0004d	6a 01		 push	 1
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00055	83 c4 08	 add	 esp, 8
  00058	8d 4c 24 0c	 lea	 ecx, DWORD PTR $T2[esp+32]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00063	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00068	8d 44 24 10	 lea	 eax, DWORD PTR $T2[esp+36]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
  00072	5e		 pop	 esi
$LN12@clear:
$LN9@clear:
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN18@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 68   :     {

  00000	56		 push	 esi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR ___that$[esp]
  00005	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 67   :         : _Data()

  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0000e	50		 push	 eax
  0000f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ___std_exception_copy
  00022	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002e	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00031	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00034	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00037	8b c7		 mov	 eax, edi
  00039	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -44					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d d4	 mov	 DWORD PTR _this$[ebp], ebx
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Message$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00036	51		 push	 ecx
  00037	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 238  : 			{	// construct with message

  0003a	89 5d d4	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
  0003d	8b 38		 mov	 edi, DWORD PTR [eax]
  0003f	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00042	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00049	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00050	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00054	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 439  : 		: _Mybase(_Errcode, _Message)

  00059	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00063	50		 push	 eax
  00064	56		 push	 esi
  00065	57		 push	 edi
  00066	8b cb		 mov	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0006d	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  00070	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00073	72 28		 jb	 SHORT $LN69@failure
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00075	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00078	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00079	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0007b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00081	72 10		 jb	 SHORT $LN68@failure

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00083	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00086	83 c2 23	 add	 edx, 35			; 00000023H
  00089	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0008e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00091	77 30		 ja	 SHORT $LN91@failure
$LN68@failure:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00093	52		 push	 edx
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009a	83 c4 08	 add	 esp, 8
$LN69@failure:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xiosbase

; 238  : 			{	// construct with message

  0009d	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

  000a3	8b c3		 mov	 eax, ebx
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	33 cd		 xor	 ecx, ebp
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN91@failure:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN89@failure:
  000c8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 608  : 	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
; 609  : 	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
; 610  : 	static void * _Flag = nullptr;
; 611  : 	static aligned_union_t<1, _Ty> _Storage;
; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00000	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00005	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000a	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  0000f	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 84 00 00 00
	00		 je	 _terminate

; 613  : 		{	// _Execute_once should never fail if the callback never fails
; 614  : 		_STD terminate();
; 615  : 		}
; 616  : 
; 617  : 	return (reinterpret_cast<_Ty&>(_Storage));

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage

; 618  : 	}

  00024	c3		 ret	 0
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	74 0b		 je	 SHORT $LN12@scalar
  0000a	6a 08		 push	 8
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00012	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 517  : 		if (_Errcode == (int)io_errc::stream)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Errcode$[esp-4]
  00004	56		 push	 esi
  00005	83 f8 01	 cmp	 eax, 1
  00008	75 07		 jne	 SHORT $LN2@message
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 519  : 			return ("iostream stream error");

  0000f	eb 0a		 jmp	 SHORT $LN47@message
$LN2@message:

; 496  : 		return (_Syserror_map(_Errcode));

  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
  00017	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0001a	50		 push	 eax
$LN47@message:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 525  : 		}

  0001b	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0001f	8b ce		 mov	 ecx, esi
  00021	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00028	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0002f	c6 06 00	 mov	 BYTE PTR [esi], 0
  00032	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	c2 08 00	 ret	 8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 512  : 		return ("iostream");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 513  : 		}

  00005	c3		 ret	 0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 505  : 	_Iostream_error_category() noexcept

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;
; 508  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 05 00
	00 00		 mov	 DWORD PTR [ecx+4], 5
  0000f	c3		 ret	 0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	74 0b		 je	 SHORT $LN9@scalar
  0000a	6a 08		 push	 8
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00012	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c2 04 00	 ret	 4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 495  : 		{	// convert to name of error

  00000	56		 push	 esi

; 496  : 		return (_Syserror_map(_Errcode));

  00001	ff 74 24 0c	 push	 DWORD PTR __Errcode$[esp]
  00005	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0000a	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  0000e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00011	8b ce		 mov	 ecx, esi

; 3976 : 		_My_data._Mysize = 0;

  00013	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001a	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 2185 : 		assign(_Ptr);

  00021	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00022	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 496  : 		return (_Syserror_map(_Errcode));

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 497  : 		}

  0002d	c2 08 00	 ret	 8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 491  : 		return ("generic");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_07DCLBNMLN@generic@

; 492  : 		}

  00005	c3		 ret	 0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 484  : 	_Generic_error_category() noexcept

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Generic_error_category@std@@6B@

; 485  : 		{	// default constructor
; 486  : 		_Addr = _Generic_addr;
; 487  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 03 00
	00 00		 mov	 DWORD PTR [ecx+4], 3
  0000f	c3		 ret	 0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN15@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN15@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx

; 68   :     {

  00000	56		 push	 esi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR ___that$[esp]
  00005	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 67   :         : _Data()

  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0000e	50		 push	 eax
  0000f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ___std_exception_copy
  00022	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002e	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00031	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00034	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00037	8b c7		 mov	 eax, edi
  00039	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
_this$GSCopy$ = -44					; size = 4
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 440  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002e	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00031	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00034	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 440  : 		{	// construct from error code and message string

  00035	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00038	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003f	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00046	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  0004a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 439  : 		: _Mybase(_Errcode, _Message)

  0004f	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00059	50		 push	 eax
  0005a	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp+4]
  0005d	8b ce		 mov	 ecx, esi
  0005f	ff 75 08	 push	 DWORD PTR __Errcode$[ebp]
  00062	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00067	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  0006a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0006d	72 28		 jb	 SHORT $LN66@system_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006f	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00072	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00073	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00075	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0007b	72 10		 jb	 SHORT $LN65@system_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0007d	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00080	83 c2 23	 add	 edx, 35			; 00000023H
  00083	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00085	83 c0 fc	 add	 eax, -4			; fffffffcH
  00088	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008b	77 2e		 ja	 SHORT $LN87@system_err
$LN65@system_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0008d	52		 push	 edx
  0008e	51		 push	 ecx
  0008f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00094	83 c4 08	 add	 esp, 8
$LN66@system_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 440  : 		{	// construct from error code and message string

  00097	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7system_error@std@@6B@

; 441  : 		}

  0009d	8b c6		 mov	 eax, esi
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5e		 pop	 esi
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ae	33 cd		 xor	 ecx, ebp
  000b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 0c 00	 ret	 12			; 0000000cH
$LN87@system_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@system_err:
  000c0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN12@scalar
  0001c	6a 14		 push	 20			; 00000014H
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 68   :     {

  00000	56		 push	 esi

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR ___that$[esp]
  00005	0f 57 c0	 xorps	 xmm0, xmm0

; 68   :     {

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 67   :         : _Data()

  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  0000e	50		 push	 eax
  0000f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00015	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00019	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ___std_exception_copy
  00022	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  00028	83 c4 08	 add	 esp, 8
  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0002e	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00031	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00034	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00037	8b c7		 mov	 eax, edi
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 24
__Result$1$ = -76					; size = 4
__InitData$3 = -72					; size = 8
__Errcode$2$ = -68					; size = 4
__Right_size$1$ = -68					; size = 4
_this$GSCopy$ = -68					; size = 4
_this$ = -68						; size = 4
$T4 = -64						; size = 24
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 415  : 		{	// construct from error code and message string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f9		 mov	 edi, ecx
  0002c	89 7d bc	 mov	 DWORD PTR _this$[ebp], edi
  0002f	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00032	89 7d bc	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00035	89 45 b4	 mov	 DWORD PTR __Result$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00038	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0003c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0003f	89 4d bc	 mov	 DWORD PTR __Right_size$1$[ebp], ecx

; 1815 : 		if (_Large_string_engaged())

  00042	72 05		 jb	 SHORT $LN36@System_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	89 45 b4	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN36@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00049	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0004c	73 10		 jae	 SHORT $LN25@System_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0004e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  00051	c7 45 b0 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00058	0f 11 45 9c	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2406 : 			return;

  0005c	eb 37		 jmp	 SHORT $LN362@System_err
$LN25@System_err:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();
; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0005e	8b f1		 mov	 esi, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	83 ce 0f	 or	 esi, 15			; 0000000fH

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00068	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  0006b	3b f0		 cmp	 esi, eax
  0006d	0f 47 f0	 cmova	 esi, eax
  00070	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  00079	8b c8		 mov	 ecx, eax

; 2412 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);
; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0007b	8b 45 bc	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0007e	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0007f	89 4d 9c	 mov	 DWORD PTR $T2[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00082	50		 push	 eax
  00083	ff 75 b4	 push	 DWORD PTR __Result$1$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  0008c	8b 4d bc	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2415 : 		_My_data._Myres = _New_capacity;

  00092	89 75 b0	 mov	 DWORD PTR $T2[ebp+20], esi
$LN362@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 413  : 		: runtime_error(_Makestr(_Errcode, _Message)),

  00095	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00098	8b 75 0c	 mov	 esi, DWORD PTR __Errcode$[ebp+4]
  0009b	89 4d ac	 mov	 DWORD PTR $T2[ebp+16], ecx
  0009e	89 45 bc	 mov	 DWORD PTR __Errcode$2$[ebp], eax

; 401  : 		{	// compose error message

  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 		if (!_Message.empty())

  000a8	85 c9		 test	 ecx, ecx
  000aa	74 0f		 je	 SHORT $LN77@System_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000ac	6a 02		 push	 2
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  000b3	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  000b6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN77@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 182  : 		return (category().message(value()));

  000bb	ff 75 bc	 push	 DWORD PTR __Errcode$2$[ebp]
  000be	8b 06		 mov	 eax, DWORD PTR [esi]
  000c0	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  000c3	51		 push	 ecx
  000c4	8b ce		 mov	 ecx, esi
  000c6	ff 50 08	 call	 DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000c9	83 7d ec 10	 cmp	 DWORD PTR $T5[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000cd	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  000d0	ff 75 e8	 push	 DWORD PTR $T5[ebp+16]

; 1815 : 		if (_Large_string_engaged())

  000d3	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T5[ebp]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  000d7	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  000da	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 407  : 		_Message.append(_Errcode.message());

  000db	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  000df	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e4	8b 55 ec	 mov	 edx, DWORD PTR $T5[ebp+20]
  000e7	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  000ea	72 2c		 jb	 SHORT $LN161@System_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ec	8b 4d d8	 mov	 ecx, DWORD PTR $T5[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000ef	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f0	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000f2	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000f8	72 14		 jb	 SHORT $LN160@System_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000fa	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000fd	83 c2 23	 add	 edx, 35			; 00000023H
  00100	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00102	83 c0 fc	 add	 eax, -4			; fffffffcH
  00105	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00108	0f 87 b6 00 00
	00		 ja	 $LN364@System_err
$LN160@System_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0010e	52		 push	 edx
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN161@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00118	0f 10 4d 9c	 movups	 xmm1, XMMWORD PTR $T2[ebp]

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0011c	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0011f	83 7d b0 10	 cmp	 DWORD PTR $T2[ebp+20], 16 ; 00000010H

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00123	f3 0f 7e 45 ac	 movq	 xmm0, QWORD PTR $T2[ebp+16]

; 1815 : 		if (_Large_string_engaged())

  00128	66 0f 7e c8	 movd	 eax, xmm1

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0012c	66 0f d6 45 d0	 movq	 QWORD PTR $T4[ebp+16], xmm0
  00131	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 55   :     {

  00134	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1815 : 		if (_Large_string_engaged())

  0013a	0f 43 c8	 cmovae	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 54   :         : _Data()

  0013d	66 0f d6 47 04	 movq	 QWORD PTR [edi+4], xmm0
  00142	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 56   :         __std_exception_data _InitData = { _Message, true };

  00145	89 4d b8	 mov	 DWORD PTR __InitData$3[ebp], ecx

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00148	50		 push	 eax
  00149	8d 45 b8	 lea	 eax, DWORD PTR __InitData$3[ebp]
  0014c	c6 45 bc 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  00150	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00151	0f 11 4d c0	 movups	 XMMWORD PTR $T4[ebp], xmm1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00155	e8 00 00 00 00	 call	 ___std_exception_copy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0015a	8b 55 d4	 mov	 edx, DWORD PTR $T4[ebp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 57   :         __std_exception_copy(&_InitData, &_Data);

  0015d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept

; 165  : 		{	// construct from message string

  00160	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7runtime_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00166	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00169	72 28		 jb	 SHORT $LN343@System_err
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016b	8b 4d c0	 mov	 ecx, DWORD PTR $T4[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0016e	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0016f	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00171	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00177	72 10		 jb	 SHORT $LN342@System_err

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00179	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0017c	83 c2 23	 add	 edx, 35			; 00000023H
  0017f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00181	83 c0 fc	 add	 eax, -4			; fffffffcH
  00184	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00187	77 40		 ja	 SHORT $LN365@System_err
$LN342@System_err:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00189	52		 push	 edx
  0018a	51		 push	 ecx
  0018b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00190	83 c4 08	 add	 esp, 8
$LN343@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 414  : 		_Mycode(_Errcode)

  00193	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]

; 416  : 		}

  00196	8b c7		 mov	 eax, edi
  00198	89 4f 0c	 mov	 DWORD PTR [edi+12], ecx
  0019b	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  0019e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  001a4	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  001a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b1	59		 pop	 ecx
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b7	33 cd		 xor	 ecx, ebp
  001b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001be	8b e5		 mov	 esp, ebp
  001c0	5d		 pop	 ebp
  001c1	c2 0c 00	 ret	 12			; 0000000cH
$LN364@System_err:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN365@System_err:
  001c9	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN361@System_err:
  001ce	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -44				; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 24
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 401  : 		{	// compose error message

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0002c	89 75 d4	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi

; 402  : 		if (!_Message.empty())

  0002f	83 7d 24 00	 cmp	 DWORD PTR __Message$[ebp+16], 0
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	74 0f		 je	 SHORT $LN2@Makestr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003c	6a 02		 push	 2
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  00043	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00046	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 182  : 		return (category().message(value()));

  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  0004e	8d 55 d8	 lea	 edx, DWORD PTR $T2[ebp]
  00051	ff 75 0c	 push	 DWORD PTR __Errcode$[ebp]
  00054	52		 push	 edx
  00055	8b 01		 mov	 eax, DWORD PTR [ecx]
  00057	ff 50 08	 call	 DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0005a	83 7d ec 10	 cmp	 DWORD PTR $T2[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0005e	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00061	ff 75 e8	 push	 DWORD PTR $T2[ebp+16]

; 1815 : 		if (_Large_string_engaged())

  00064	0f 43 45 d8	 cmovae	 eax, DWORD PTR $T2[ebp]

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00068	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  0006b	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 407  : 		_Message.append(_Errcode.message());

  0006c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  00070	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00075	8b 55 ec	 mov	 edx, DWORD PTR $T2[ebp+20]
  00078	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0007b	72 28		 jb	 SHORT $LN86@Makestr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007d	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00080	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00081	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00083	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00089	72 10		 jb	 SHORT $LN85@Makestr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0008b	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0008e	83 c2 23	 add	 edx, 35			; 00000023H
  00091	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00093	83 c0 fc	 add	 eax, -4			; fffffffcH
  00096	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00099	77 45		 ja	 SHORT $LN210@Makestr
$LN85@Makestr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0009b	52		 push	 edx
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a2	83 c4 08	 add	 esp, 8
$LN86@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000a5	0f 10 45 14	 movups	 xmm0, XMMWORD PTR __Message$[ebp]

; 1784 : 		_Mysize(0),

  000a9	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 408  : 		return (_Message);

  000b0	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1785 : 		_Myres(0)

  000b2	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000b9	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000bc	f3 0f 7e 45 24	 movq	 xmm0, QWORD PTR __Message$[ebp+16]
  000c1	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error

; 409  : 		}

  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	5e		 pop	 esi
  000d2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	33 cd		 xor	 ecx, ebp
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN210@Makestr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN208@Makestr:
  000e5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR __Message$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 95   : 		return (_Addr == _Right._Addr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]

; 285  : 	{	// test errors for equality

  00004	56		 push	 esi

; 95   : 		return (_Addr == _Right._Addr);

  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Right$[esp]
  00009	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00012	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]

; 286  : 	return (_Left.category() == _Right.category()

  00015	75 0a		 jne	 SHORT $LN3@operator
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001b	75 04		 jne	 SHORT $LN3@operator
  0001d	b0 01		 mov	 al, 1
  0001f	5e		 pop	 esi

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

  00020	c3		 ret	 0
$LN3@operator:

; 286  : 	return (_Left.category() == _Right.category()

  00021	32 c0		 xor	 al, al
  00023	5e		 pop	 esi

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

  00024	c3		 ret	 0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 247  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 248  : 		}

  00003	c3		 ret	 0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 242  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 243  : 		}

  00002	c3		 ret	 0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 206  : 		: _Myval(_Val),

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 207  : 		_Mycat(&_Cat)

  00006	8b 44 24 08	 mov	 eax, DWORD PTR __Cat$[esp-4]
  0000a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 209  : 		}

  0000d	8b c1		 mov	 eax, ecx
  0000f	c2 08 00	 ret	 8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 175  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 182  : 		return (category().message(value()));

  00003	ff 31		 push	 DWORD PTR [ecx]
  00005	8b c8		 mov	 ecx, eax
  00007	ff 74 24 08	 push	 DWORD PTR ___$ReturnUdt$[esp]
  0000b	8b 10		 mov	 edx, DWORD PTR [eax]
  0000d	ff 52 08	 call	 DWORD PTR [edx+8]
  00010	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 183  : 		}

  00014	c2 04 00	 ret	 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 175  : 		return (*_Mycat);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 176  : 		}

  00003	c3		 ret	 0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 170  : 		return (_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 171  : 		}

  00002	c3		 ret	 0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 134  : 		: _Myval(_Val),

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 		_Mycat(&_Cat)

  00006	8b 44 24 08	 mov	 eax, DWORD PTR __Cat$[esp-4]
  0000a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 137  : 		}

  0000d	8b c1		 mov	 eax, ecx
  0000f	c2 08 00	 ret	 8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 95   : 		return (_Addr == _Right._Addr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000a	0f 94 c0	 sete	 al

; 96   : 		}

  0000d	c2 04 00	 ret	 4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 95   : 		return (_Addr == _Right._Addr);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 338  : 	{	// test if conditions same for this category

  00003	56		 push	 esi

; 95   : 		return (_Addr == _Right._Addr);

  00004	8b 74 24 08	 mov	 esi, DWORD PTR __Code$[esp]
  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  0000e	75 0e		 jne	 SHORT $LN3@equivalent
  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	3b 44 24 0c	 cmp	 eax, DWORD PTR __Errval$[esp]
  00016	75 06		 jne	 SHORT $LN3@equivalent
  00018	b0 01		 mov	 al, 1
  0001a	5e		 pop	 esi

; 340  : 	}

  0001b	c2 08 00	 ret	 8
$LN3@equivalent:

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  0001e	32 c0		 xor	 al, al
  00020	5e		 pop	 esi

; 340  : 	}

  00021	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 334  : 	return (default_error_condition(_Errval) == _Cond);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8d 54 24 f8	 lea	 edx, DWORD PTR $T1[esp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi
  0000a	ff 74 24 10	 push	 DWORD PTR __Errval$[esp+8]
  0000e	52		 push	 edx
  0000f	ff 50 0c	 call	 DWORD PTR [eax+12]

; 95   : 		return (_Addr == _Right._Addr);

  00012	8b 74 24 14	 mov	 esi, DWORD PTR __Cond$[esp+8]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 286  : 	return (_Left.category() == _Right.category()

  00022	75 0f		 jne	 SHORT $LN5@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN5@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 335  : 	}

  0002d	83 c4 08	 add	 esp, 8
  00030	c2 08 00	 ret	 8
$LN5@equivalent:

; 286  : 	return (_Left.category() == _Right.category()

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 335  : 	}

  00036	83 c4 08	 add	 esp, 8
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 206  : 		: _Myval(_Val),

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Errval$[esp-4]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 207  : 		_Mycat(&_Cat)

  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 329  : 	return (error_condition(_Errval, *this));
; 330  : 	}

  0000d	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 81   : 		}

  00000	c3		 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 75   : 		{	// default constructor
; 76   : 		_Addr = reinterpret_cast<uintptr_t>(this);

  00000	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 77   : 		}

  00003	8b c1		 mov	 eax, ecx
  00005	c3		 ret	 0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00000	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00005	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000a	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  0000f	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 84 00 00 00
	00		 je	 _terminate

; 628  : 	return (_Immortalize<_Iostream_error_category>());
; 629  : 	}

  0001f	b8 00 00 00 00	 mov	 eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00024	c3		 ret	 0
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

  00000	68 00 00 00 00	 push	 OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
  00005	68 00 00 00 00	 push	 OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
  0000a	68 00 00 00 00	 push	 OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
  0000f	e8 00 00 00 00	 call	 ?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	85 c0		 test	 eax, eax
  00019	0f 84 00 00 00
	00		 je	 _terminate

; 134  : 		: _Myval(_Val),

  0001f	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00023	8b 4c 24 08	 mov	 ecx, DWORD PTR __Errno$[esp-4]
  00027	89 08		 mov	 DWORD PTR [eax], ecx

; 135  : 		_Mycat(&_Cat)

  00029	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage

; 356  : 	return (error_code((int)_Errno, iostream_category()));
; 357  : 	}

  00030	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 52
$T3 = -44						; size = 16
__Lock$4 = -28						; size = 4
__Psave$1$ = -24					; size = 4
$T5 = -24						; size = 4
__Lock$6 = -20						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Psave_guard$8 = 8					; size = 4
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 116  : 			if (_Id == 0)

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 116  : 			if (_Id == 0)

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 122  : 						}
; 123  : 				_END_LOCK()

  00072	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00080	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00083	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00086	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00089	73 10		 jae	 SHORT $LN20@use_facet
  0008b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0008e	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00091	85 f6		 test	 esi, esi
  00093	0f 85 c1 00 00
	00		 jne	 $LN94@use_facet
  00099	eb 02		 jmp	 SHORT $LN97@use_facet
$LN20@use_facet:

; 432  : 		}
; 433  : 
; 434  : 	const facet *_Getfacet(size_t _Id) const
; 435  : 		{	// look up a facet in locale object
; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0009b	33 f6		 xor	 esi, esi
$LN97@use_facet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  0009d	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000a1	74 10		 je	 SHORT $LN17@use_facet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  000a3	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  000a8	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000ab	73 0e		 jae	 SHORT $LN98@use_facet
  000ad	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000b0	8b 34 b8	 mov	 esi, DWORD PTR [eax+edi*4]
$LN17@use_facet:

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;
; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);
; 512  : 
; 513  : 		if (_Pf == nullptr)

  000b3	85 f6		 test	 esi, esi
  000b5	0f 85 9f 00 00
	00		 jne	 $LN94@use_facet
$LN98@use_facet:

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

  000bb	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000be	85 c0		 test	 eax, eax
  000c0	74 07		 je	 SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

  000c2	8b f0		 mov	 esi, eax

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  000c4	e9 91 00 00 00	 jmp	 $LN94@use_facet
$LN3@use_facet:

; 2632 : 			*_Ppf = new ctype<_Elem>(

  000c9	6a 18		 push	 24			; 00000018H
  000cb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d0	8b f0		 mov	 esi, eax
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000d8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000dc	85 f6		 test	 esi, esi
  000de	74 4d		 je	 SHORT $LN27@use_facet

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  000e0	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  000e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	75 07		 jne	 SHORT $LN35@use_facet
  000ea	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  000ef	eb 0a		 jmp	 SHORT $LN40@use_facet
$LN35@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  000f1	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000f4	85 c0		 test	 eax, eax
  000f6	75 03		 jne	 SHORT $LN40@use_facet
  000f8	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN40@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2632 : 			*_Ppf = new ctype<_Elem>(

  000fb	50		 push	 eax
  000fc	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  000ff	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00104	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2632 : 			*_Ppf = new ctype<_Elem>(

  00107	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  0010e	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0010f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2624 : 		{	// construct from current locale

  00116	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  0011c	e8 00 00 00 00	 call	 __Getctype
  00121	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2658 : 		_Ctype = _Lobj._Getctype();

  00124	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00127	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2632 : 			*_Ppf = new ctype<_Elem>(

  0012b	eb 02		 jmp	 SHORT $LN28@use_facet
$LN27@use_facet:
  0012d	33 f6		 xor	 esi, esi
$LN28@use_facet:
  0012f	f6 45 f0 01	 test	 BYTE PTR $T7[ebp], 1
  00133	74 08		 je	 SHORT $LN32@use_facet
  00135	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00138	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN32@use_facet:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0013d	89 75 08	 mov	 DWORD PTR __Psave_guard$8[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 535  : 				_Facet_Register(_Pfmod);

  00140	56		 push	 esi
  00141	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00145	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

  0014a	8b 16		 mov	 edx, DWORD PTR [esi]
  0014c	83 c4 04	 add	 esp, 4
  0014f	8b ce		 mov	 ecx, esi
  00151	ff 52 04	 call	 DWORD PTR [edx+4]

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

  00154	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN94@use_facet:

; 540  : 				_Pf = _Psave;
; 541  : 
; 542  : 				(void) _Psave_guard.release();
; 543  : 				}
; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

  0015a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0015d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00162	8b c6		 mov	 eax, esi

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

  00164	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00167	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0016e	59		 pop	 ecx
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$3:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2652 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2663 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2652 : 		{	// destroy the object

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2663 : 		if (0 < _Ctype._Delfl)

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN21@scalar

; 2664 : 			_CSTD free((void *)_Ctype._Table);

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN22@scalar
$LN21@scalar:

; 2665 : 		else if (_Ctype._Delfl < 0)

  0001a	79 0b		 jns	 SHORT $LN10@scalar

; 2666 : 			delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN22@scalar:

; 2667 : 
; 2668 : 		_CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN10@scalar:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0003d	74 0b		 je	 SHORT $LN20@scalar
  0003f	6a 18		 push	 24			; 00000018H
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
$LN20@scalar:
  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2726 : 		_Adl_verify_range(_First, _Last);
; 2727 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	2b ca		 sub	 ecx, edx
  0000a	51		 push	 ecx
  0000b	52		 push	 edx
  0000c	ff 74 24 18	 push	 DWORD PTR __Dest$[esp+4]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2728 : 		return (_Last);

  00015	8b 44 24 14	 mov	 eax, DWORD PTR __Last$[esp+8]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2729 : 		}

  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2720 : 		return (_Ch);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Ch$[esp-4]

; 2721 : 		}

  00004	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2713 : 		_Adl_verify_range(_First, _Last);
; 2714 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	2b ca		 sub	 ecx, edx
  0000a	51		 push	 ecx
  0000b	52		 push	 edx
  0000c	ff 74 24 14	 push	 DWORD PTR __Dest$[esp+4]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2715 : 		return (_Last);

  00015	8b 44 24 14	 mov	 eax, DWORD PTR __Last$[esp+8]
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2716 : 		}

  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2707 : 		return (_Byte);

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Byte$[esp-4]

; 2708 : 		}

  00004	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2695 : 		{	// convert [_First, _Last) in place to upper case

  00000	53		 push	 ebx

; 2696 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2697 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	33 d2		 xor	 edx, edx
  00007	56		 push	 esi
  00008	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000c	2b de		 sub	 ebx, esi
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	3b 74 24 14	 cmp	 esi, DWORD PTR __Last$[esp+8]
  00015	0f 47 da	 cmova	 ebx, edx
  00018	85 db		 test	 ebx, ebx
  0001a	74 1a		 je	 SHORT $LN14@do_toupper
  0001c	55		 push	 ebp
  0001d	8d 69 08	 lea	 ebp, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2698 : 			{
; 2699 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  00020	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 __Toupper
  0002a	88 06		 mov	 BYTE PTR [esi], al
  0002c	47		 inc	 edi
  0002d	83 c4 08	 add	 esp, 8
  00030	46		 inc	 esi
  00031	3b fb		 cmp	 edi, ebx
  00033	75 eb		 jne	 SHORT $LL4@do_toupper

; 2700 : 			}
; 2701 : 
; 2702 : 		return ((const _Elem *)_First);

  00035	5d		 pop	 ebp
$LN14@do_toupper:
  00036	5f		 pop	 edi

; 2703 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2690 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	50		 push	 eax
  00004	0f b6 44 24 08	 movzx	 eax, BYTE PTR __Ch$[esp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Toupper
  0000f	83 c4 08	 add	 esp, 8

; 2691 : 		}

  00012	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2678 : 		{	// convert [_First, _Last) in place to lower case

  00000	53		 push	 ebx

; 2679 : 		_Adl_verify_range((const _Elem *)_First, _Last);
; 2680 : 		for (; _First != _Last; ++_First)

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	33 d2		 xor	 edx, edx
  00007	56		 push	 esi
  00008	8b 74 24 0c	 mov	 esi, DWORD PTR __First$[esp+4]
  0000c	2b de		 sub	 ebx, esi
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	3b 74 24 14	 cmp	 esi, DWORD PTR __Last$[esp+8]
  00015	0f 47 da	 cmova	 ebx, edx
  00018	85 db		 test	 ebx, ebx
  0001a	74 1a		 je	 SHORT $LN14@do_tolower
  0001c	55		 push	 ebp
  0001d	8d 69 08	 lea	 ebp, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2681 : 			{
; 2682 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  00020	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00023	55		 push	 ebp
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 __Tolower
  0002a	88 06		 mov	 BYTE PTR [esi], al
  0002c	47		 inc	 edi
  0002d	83 c4 08	 add	 esp, 8
  00030	46		 inc	 esi
  00031	3b fb		 cmp	 edi, ebx
  00033	75 eb		 jne	 SHORT $LL4@do_tolower

; 2683 : 			}
; 2684 : 
; 2685 : 		return ((const _Elem *)_First);

  00035	5d		 pop	 ebp
$LN14@do_tolower:
  00036	5f		 pop	 edi

; 2686 : 		}

  00037	8b c6		 mov	 eax, esi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2673 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	50		 push	 eax
  00004	0f b6 44 24 08	 movzx	 eax, BYTE PTR __Ch$[esp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 __Tolower
  0000f	83 c4 08	 add	 esp, 8

; 2674 : 		}

  00012	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2662 : 		{	// free any allocated storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2663 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax
  00008	7e 18		 jle	 SHORT $LN6@Tidy

; 2664 : 			_CSTD free((void *)_Ctype._Table);

  0000a	ff 76 0c	 push	 DWORD PTR [esi+12]
  0000d	e8 00 00 00 00	 call	 _free

; 2667 : 
; 2668 : 		_CSTD free(_Ctype._LocaleName);

  00012	83 c4 04	 add	 esp, 4
  00015	ff 76 14	 push	 DWORD PTR [esi+20]
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
  00020	5e		 pop	 esi

; 2669 : 		}

  00021	c3		 ret	 0
$LN6@Tidy:

; 2665 : 		else if (_Ctype._Delfl < 0)

  00022	79 0b		 jns	 SHORT $LN4@Tidy

; 2666 : 			delete[] _Ctype._Table;

  00024	ff 76 0c	 push	 DWORD PTR [esi+12]
  00027	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 2667 : 
; 2668 : 		_CSTD free(_Ctype._LocaleName);

  0002c	83 c4 04	 add	 esp, 4
$LN4@Tidy:
  0002f	ff 76 14	 push	 DWORD PTR [esi+20]
  00032	e8 00 00 00 00	 call	 _free
  00037	83 c4 04	 add	 esp, 4
  0003a	5e		 pop	 esi

; 2669 : 		}

  0003b	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2657 : 		{	// initialize from _Lobj

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T1[esp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2657 : 		{	// initialize from _Lobj

  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00007	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2657 : 		{	// initialize from _Lobj

  00008	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  0000a	e8 00 00 00 00	 call	 __Getctype
  0000f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2658 : 		_Ctype = _Lobj._Getctype();

  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  00019	5e		 pop	 esi

; 2659 : 		}

  0001a	83 c4 10	 add	 esp, 16			; 00000010H
  0001d	c2 04 00	 ret	 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2652 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2663 : 		if (0 < _Ctype._Delfl)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2652 : 		{	// destroy the object

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2663 : 		if (0 < _Ctype._Delfl)

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN16@ctype

; 2664 : 			_CSTD free((void *)_Ctype._Table);

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN17@ctype
$LN16@ctype:

; 2665 : 		else if (_Ctype._Delfl < 0)

  0001a	79 0b		 jns	 SHORT $LN6@ctype

; 2666 : 			delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN17@ctype:

; 2667 : 
; 2668 : 		_CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN6@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2654 : 		}

  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -84						; size = 52
$T3 = -32						; size = 16
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 8							; size = 4
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2630 : 		{	// return locale category mask and construct standard facet

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 2631 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

  00027	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  0002a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0
  00031	85 ff		 test	 edi, edi
  00033	74 7e		 je	 SHORT $LN31@Getcat
  00035	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00038	75 79		 jne	 SHORT $LN31@Getcat

; 2632 : 			*_Ppf = new ctype<_Elem>(

  0003a	6a 18		 push	 24			; 00000018H
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b f0		 mov	 esi, eax
  00043	83 c4 04	 add	 esp, 4
  00046	89 75 08	 mov	 DWORD PTR $T5[ebp], esi
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	85 f6		 test	 esi, esi
  00052	74 4d		 je	 SHORT $LN4@Getcat

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00054	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	75 07		 jne	 SHORT $LN12@Getcat
  0005e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
  00063	eb 0a		 jmp	 SHORT $LN17@Getcat
$LN12@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00065	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00068	85 c0		 test	 eax, eax
  0006a	75 03		 jne	 SHORT $LN17@Getcat
  0006c	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
$LN17@Getcat:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2632 : 			*_Ppf = new ctype<_Elem>(

  0006f	50		 push	 eax
  00070	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  00073	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00078	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2632 : 			*_Ppf = new ctype<_Elem>(

  0007b	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T4[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00082	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00083	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2624 : 		{	// construct from current locale

  0008a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00090	e8 00 00 00 00	 call	 __Getctype
  00095	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2658 : 		_Ctype = _Lobj._Getctype();

  00098	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0009b	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2632 : 			*_Ppf = new ctype<_Elem>(

  0009f	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a1	33 f6		 xor	 esi, esi
$LN5@Getcat:
  000a3	f6 45 f0 01	 test	 BYTE PTR $T4[ebp], 1
  000a7	89 37		 mov	 DWORD PTR [edi], esi
  000a9	74 08		 je	 SHORT $LN31@Getcat
  000ab	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  000ae	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN31@Getcat:

; 2633 : 				_Locinfo(_Ploc->c_str()));
; 2634 : 		return (_X_CTYPE);
; 2635 : 		}

  000b3	b8 02 00 00 00	 mov	 eax, 2
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 16
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2624 : 		{	// construct from current locale

  00000	83 ec 14	 sub	 esp, 20			; 00000014H

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00003	8b 44 24 1c	 mov	 eax, DWORD PTR __Refs$[esp+16]

; 2624 : 		{	// construct from current locale

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 74 24 04	 mov	 DWORD PTR _this$[esp+24], esi

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  00011	8d 44 24 08	 lea	 eax, DWORD PTR $T1[esp+24]
  00015	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2624 : 		{	// construct from current locale

  00016	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 117  : 		return (::_Getctype());

  0001c	e8 00 00 00 00	 call	 __Getctype
  00021	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2658 : 		_Ctype = _Lobj._Getctype();

  00024	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 2625 : 		_Init(_Lobj);
; 2626 : 		}

  00027	8b c6		 mov	 eax, esi

; 2658 : 		_Ctype = _Lobj._Getctype();

  00029	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2625 : 		_Init(_Lobj);
; 2626 : 		}

  0002d	5e		 pop	 esi
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	c2 08 00	 ret	 8
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z PROC		; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2584 : 		return (do_widen(_First, _Last, _Dest));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 1c	 jmp	 DWORD PTR [eax+28]
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0000e	74 0b		 je	 SHORT $LN12@scalar
  00010	6a 08		 push	 8
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 2230 : 		}

  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2225 : 		{	// default constructor

  00000	51		 push	 ecx

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00001	8b 44 24 08	 mov	 eax, DWORD PTR __Refs$[esp]
  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2226 : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@
  00013	59		 pop	 ecx
  00014	c2 04 00	 ret	 4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});
; 617  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	56		 push	 esi
  00004	8b 74 24 08	 mov	 esi, DWORD PTR __Id$[esp]
  00008	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0000b	73 0c		 jae	 SHORT $LN6@Getfacet
  0000d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00010	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  00013	85 c0		 test	 eax, eax
  00015	75 20		 jne	 SHORT $LN3@Getfacet
  00017	eb 02		 jmp	 SHORT $LN10@Getfacet
$LN6@Getfacet:

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  00019	33 c0		 xor	 eax, eax
$LN10@Getfacet:

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

  0001b	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  0001f	74 16		 je	 SHORT $LN3@Getfacet

; 439  : 			return (_Facptr);	// found facet or not transparent
; 440  : 		else
; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00021	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 443  : 			return (_Id < _Ptr0->_Facetcount

  00026	3b 70 0c	 cmp	 esi, DWORD PTR [eax+12]
  00029	73 0a		 jae	 SHORT $LN8@Getfacet
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002e	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  00031	5e		 pop	 esi

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

  00032	c2 04 00	 ret	 4
$LN8@Getfacet:

; 443  : 			return (_Id < _Ptr0->_Facetcount

  00035	33 c0		 xor	 eax, eax
$LN3@Getfacet:
  00037	5e		 pop	 esi

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

  00038	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 06		 jne	 SHORT $LN3@c_str
  00007	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@

; 432  : 		}

  0000c	c3		 ret	 0
$LN3@c_str:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  0000d	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00010	85 c9		 test	 ecx, ecx
  00012	74 03		 je	 SHORT $LN7@c_str
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

  00014	8b c1		 mov	 eax, ecx

; 432  : 		}

  00016	c3		 ret	 0
$LN7@c_str:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00017	83 c0 1c	 add	 eax, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 432  : 		}

  0001a	c3		 ret	 0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 408  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1locale@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 409  : 		if (_Ptr != nullptr)

  00022	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00025	85 c9		 test	 ecx, ecx
  00027	74 11		 je	 SHORT $LN4@locale

; 410  : 			delete _Ptr->_Decref();

  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	ff 50 08	 call	 DWORD PTR [eax+8]
  0002e	85 c0		 test	 eax, eax
  00030	74 08		 je	 SHORT $LN4@locale
  00032	8b 10		 mov	 edx, DWORD PTR [eax]
  00034	8b c8		 mov	 ecx, eax
  00036	6a 01		 push	 1
  00038	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 411  : 		}

  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 303  : 		{	// construct by copying

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0locale@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 302  : 		: _Ptr(_Right._Ptr)

  00025	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 304  : 		_Ptr->_Incref();

  0002e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00030	ff 50 04	 call	 DWORD PTR [eax+4]

; 305  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00038	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003f	59		 pop	 ecx
  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@ABV01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@ABV01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0000e	74 0b		 je	 SHORT $LN9@scalar
  00010	6a 08		 push	 8
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale

; 177  : 			}

  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 172  : 			{	// construct with initial reference count

  00000	51		 push	 ecx

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

  00001	8b 44 24 08	 mov	 eax, DWORD PTR __Initrefs$[esp]
  00005	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  : 			}

  00008	8b c1		 mov	 eax, ecx
  0000a	89 0c 24	 mov	 DWORD PTR _this$[esp+4], ecx
  0000d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7facet@locale@std@@6B@
  00013	59		 pop	 ecx
  00014	c2 04 00	 ret	 4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 158  : 			if (_MT_DECR(_Myrefs) == 0)

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 159  : 				{
; 160  : 				return (this);
; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);
; 164  : 			}

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 153  : 			_MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 154  : 			}

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 115  : 			{	// get stamp, with lazy allocation

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 116  : 			if (_Id == 0)

  00004	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00007	75 26		 jne	 SHORT $LN6@operator

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00009	6a 00		 push	 0
  0000b	8d 4c 24 08	 lea	 ecx, DWORD PTR __Lock$1[esp+12]
  0000f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	75 0d		 jne	 SHORT $LN3@operator

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0001e	40		 inc	 eax
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00024	89 06		 mov	 DWORD PTR [esi], eax
$LN3@operator:

; 122  : 						}
; 123  : 				_END_LOCK()

  00026	8d 4c 24 04	 lea	 ecx, DWORD PTR __Lock$1[esp+8]
  0002a	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
$LN6@operator:

; 124  : 				}
; 125  : 			return (_Id);
; 126  : 			}

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	5e		 pop	 esi
  00032	59		 pop	 ecx
  00033	c3		 ret	 0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 110  : 			: _Id(_Val)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 112  : 			}

  00006	8b c1		 mov	 eax, ecx
  00008	c2 04 00	 ret	 4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0000e	74 0b		 je	 SHORT $LN6@scalar
  00010	6a 04		 push	 4
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
$LN6@scalar:
  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 26   : 		{	// ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@

; 27   : 		}

  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;
; 4179 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 4143 : 		_Tidy();
; 4144 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00000	33 c0		 xor	 eax, eax
  00002	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00008	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 4088 : 		}

  0000c	8b c1		 mov	 eax, ecx
  0000e	c3		 ret	 0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN4@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN4@Tidy:

; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;
; 4179 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	85 c0		 test	 eax, eax
  00004	75 03		 jne	 SHORT $LN4@c_str
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
$LN4@c_str:

; 4154 : 		}

  00009	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4169 : 		if (_Myptr != nullptr)

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN6@Yarn

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN6@Yarn:

; 4143 : 		_Tidy();
; 4144 : 		}

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 4088 : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  0000c	c3		 ret	 0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 172  : 		return ("true");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_04LOAJBDKD@true@

; 173  : 		}

  00005	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 167  : 		return ("false");

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_05LAPONLG@false@

; 168  : 		}

  00005	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 127  : 		return (localeconv());

  00000	e9 00 00 00 00	 jmp	 _localeconv
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = -44						; size = 44
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 121  : 		{	// return codecvt stuff

  00000	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 122  : 		return (::_Getcvt());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T1[esp+44]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getcvt
  0000c	8b 54 24 34	 mov	 edx, DWORD PTR ___$ReturnUdt$[esp+44]
  00010	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00013	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00016	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00019	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001d	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00021	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00026	8b c2		 mov	 eax, edx
  00028	66 0f d6 42 20	 movq	 QWORD PTR [edx+32], xmm0
  0002d	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 123  : 		}

  00030	83 c4 30	 add	 esp, 48			; 00000030H
  00033	c2 04 00	 ret	 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

  00000	83 ec 10	 sub	 esp, 16			; 00000010H

; 117  : 		return (::_Getctype());

  00003	8d 04 24	 lea	 eax, DWORD PTR $T1[esp+16]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __Getctype
  0000c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0000f	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  00013	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 118  : 		}

  00016	83 c4 14	 add	 esp, 20			; 00000014H
  00019	c2 04 00	 ret	 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 95   : 		_Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 95   : 		_Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4169 : 		if (_Myptr != nullptr)

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN6@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN6@Locinfo:

; 4178 : 		_Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 4169 : 		if (_Myptr != nullptr)

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN11@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN11@Locinfo:

; 4178 : 		_Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 4169 : 		if (_Myptr != nullptr)

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN16@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN16@Locinfo:

; 4178 : 		_Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 4169 : 		if (_Myptr != nullptr)

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN21@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN21@Locinfo:

; 4178 : 		_Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4169 : 		if (_Myptr != nullptr)

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN26@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN26@Locinfo:

; 4178 : 		_Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 4169 : 		if (_Myptr != nullptr)

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN31@Locinfo

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN31@Locinfo:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 96   : 		}

  000b1	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4178 : 		_Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 96   : 		}

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 73   : 		: _Lock(_LOCK_LOCALE)

  0002b	6a 00		 push	 0
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility

; 4086 : 		: _Myptr(nullptr), _Nul(0)

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00040	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0004b	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004f	33 c0		 xor	 eax, eax
  00051	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00058	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005c	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005f	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00063	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00066	88 46 28	 mov	 BYTE PTR [esi+40], al
  00069	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006c	88 46 30	 mov	 BYTE PTR [esi+48], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xlocinfo

; 77   : 		if (_Pch == nullptr)

  0006f	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00072	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00076	85 c0		 test	 eax, eax
  00078	74 1e		 je	 SHORT $LN26@Locinfo

; 79   : 		_Locinfo_ctor(this, _Pch);

  0007a	50		 push	 eax
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  00081	83 c4 08	 add	 esp, 8

; 80   : 		}

  00084	8b c6		 mov	 eax, esi
  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
$LN26@Locinfo:

; 78   : 			_THROW(runtime_error("bad locale name"));

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009d	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  000a0	e8 00 00 00 00	 call	 ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error
  000a5	68 00 00 00 00	 push	 OFFSET __TI2?AVruntime_error@std@@
  000aa	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN24@Locinfo:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN9@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_typeinfo.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 131  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 132  :     }

  00003	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 61   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 62   :     {
; 63   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_typeinfo.h

; 131  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 132  :     }

  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN9@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 68   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	0f 57 c0	 xorps	 xmm0, xmm0

; 67   :         : _Data()

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00009	50		 push	 eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00010	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00014	8b 44 24 0c	 mov	 eax, DWORD PTR ___that$[esp+4]
  00018	83 c0 04	 add	 eax, 4
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ___std_exception_copy
  00021	83 c4 08	 add	 esp, 8
  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
__InitData$1 = -8					; size = 8
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

  00000	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 56   :         __std_exception_data _InitData = { _Message, true };

  00003	8b 44 24 0c	 mov	 eax, DWORD PTR __Message$[esp+4]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept

; 170  : 		{	// construct from message string

  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 74 24 04	 mov	 DWORD PTR _this$[esp+12], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 54   :         : _Data()

  00011	8d 56 04	 lea	 edx, DWORD PTR [esi+4]

; 56   :         __std_exception_data _InitData = { _Message, true };

  00014	89 44 24 04	 mov	 DWORD PTR __InitData$1[esp+12], eax

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00018	8d 44 24 04	 lea	 eax, DWORD PTR __InitData$1[esp+12]
  0001c	52		 push	 edx
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00023	50		 push	 eax
  00024	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00028	c6 44 24 10 01	 mov	 BYTE PTR __InitData$1[esp+24], 1
  0002d	e8 00 00 00 00	 call	 ___std_exception_copy
  00032	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept

; 170  : 		{	// construct from message string

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	83 c4 08	 add	 esp, 8
  00041	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__InitData$1 = -8					; size = 8
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 165  : 		{	// construct from message string

  00000	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00003	8b 54 24 0c	 mov	 edx, DWORD PTR __Message$[esp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept

; 165  : 		{	// construct from message string

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 74 24 04	 mov	 DWORD PTR _this$[esp+12], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00012	72 02		 jb	 SHORT $LN11@runtime_er
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00014	8b 12		 mov	 edx, DWORD PTR [edx]
$LN11@runtime_er:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h

; 54   :         : _Data()

  00016	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 55   :     {

  00019	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0001f	0f 57 c0	 xorps	 xmm0, xmm0

; 56   :         __std_exception_data _InitData = { _Message, true };

  00022	89 54 24 04	 mov	 DWORD PTR __InitData$1[esp+12], edx

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00026	50		 push	 eax
  00027	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0002b	8d 44 24 08	 lea	 eax, DWORD PTR __InitData$1[esp+16]
  0002f	50		 push	 eax
  00030	c6 44 24 10 01	 mov	 BYTE PTR __InitData$1[esp+24], 1
  00035	e8 00 00 00 00	 call	 ___std_exception_copy
  0003a	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\stdexcept

; 165  : 		{	// construct from message string

  0003d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@

; 166  : 		}

  00043	8b c6		 mov	 eax, esi
  00045	5e		 pop	 esi
  00046	83 c4 08	 add	 esp, 8
  00049	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4004 : 		_Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3985 : 		this->_Orphan_all();
; 3986 : 		auto& _My_data = this->_Get_data();
; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 27		 jb	 SHORT $LN41@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN40@Tidy_deall

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN37@Tidy_deall

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN40@Tidy_deall:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN41@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 4000 : 		}

  00044	c3		 ret	 0
$LN37@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3975 : 		auto& _My_data = this->_Get_data();
; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00007	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  0000e	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3981 : 		}

  00011	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 3969 : 		auto& _My_data = this->_Get_data();
; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  00004	8b 54 24 04	 mov	 edx, DWORD PTR __Newsize$[esp-4]
  00008	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 1804 : 		if (_Large_string_engaged())

  0000b	72 09		 jb	 SHORT $LN16@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  0000f	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3971 : 		}

  00013	c2 04 00	 ret	 4
$LN16@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00016	c6 04 11 00	 mov	 BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3971 : 		}

  0001a	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3867 : 		const size_type _Max = max_size();
; 3868 : 		auto& _My_data = this->_Get_data();
; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Requested$[esp-4]
  00004	83 ca 0f	 or	 edx, 15			; 0000000fH
  00007	56		 push	 esi
  00008	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0000e	77 20		 ja	 SHORT $LN25@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);
; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00010	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 3876 : 		if (_Old > _Max - _Old / 2)

  00013	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00018	8b ce		 mov	 ecx, esi
  0001a	d1 e9		 shr	 ecx, 1
  0001c	2b c1		 sub	 eax, ecx
  0001e	3b f0		 cmp	 esi, eax
  00020	77 0e		 ja	 SHORT $LN25@Calculate_

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00022	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00025	3b d0		 cmp	 edx, eax
  00027	5e		 pop	 esi
  00028	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0002b	8b c2		 mov	 eax, edx

; 3882 : 		}

  0002d	c2 04 00	 ret	 4
$LN25@Calculate_:

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00030	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00035	5e		 pop	 esi

; 3882 : 		}

  00036	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3371 : 		return (size() == 0);

  00000	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00004	0f 94 c0	 sete	 al

; 3372 : 		}

  00007	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 3319 : 		const size_type _Old_size = size();
; 3320 : 		if (_Newsize <= _Old_size)

  00003	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00007	3b c2		 cmp	 eax, edx
  00009	77 12		 ja	 SHORT $LN2@resize

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  0000b	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000e	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00012	72 02		 jb	 SHORT $LN18@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00014	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN18@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00016	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3328 : 		}

  0001a	c2 08 00	 ret	 8
$LN2@resize:

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);
; 3323 : 			}
; 3324 : 		else
; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

  0001d	2b c2		 sub	 eax, edx
  0001f	89 44 24 04	 mov	 DWORD PTR __Newsize$[esp-4], eax
  00023	e9 00 00 00 00	 jmp	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
; 3310 : 		return (_Min_value(

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3302 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 3303 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN14@c_str

; 3280 : 		return (this->_Get_data()._Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3281 : 		}

  00008	c3		 ret	 0
$LN14@c_str:

; 3280 : 		return (this->_Get_data()._Myptr());

  00009	8b c1		 mov	 eax, ecx

; 3281 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Off$[esp-4]
  00008	72 02		 jb	 SHORT $LN14@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3216 : 		}

  0000c	03 c1		 add	 eax, ecx
  0000e	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Off$[esp-4]
  00008	72 02		 jb	 SHORT $LN14@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN14@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3207 : 		}

  0000c	03 c1		 add	 eax, ecx
  0000e	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__New_ptr$1$ = -16					; size = 4
__Old$1$ = -12						; size = 4
tv619 = -8						; size = 4
tv617 = -4						; size = 4
__Off$ = 8						; size = 4
tv618 = 12						; size = 4
__Count$ = 12						; size = 4
tv627 = 16						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2786 : 		{	// insert _Count * _Ch at _Off

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1830 : 		if (_Mysize < _Off)

  00007	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Off$[esp+20]
  0000b	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  0000e	3b d9		 cmp	 ebx, ecx
  00010	0f 82 71 01 00
	00		 jb	 $LN127@insert

; 2787 : 		auto& _My_data = this->_Get_data();
; 2788 : 		_My_data._Check_offset(_Off);
; 2789 : 		const size_type _Old_size = _My_data._Mysize;
; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

  00016	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00019	8b c2		 mov	 eax, edx
  0001b	55		 push	 ebp
  0001c	8b 6c 24 24	 mov	 ebp, DWORD PTR __Count$[esp+24]
  00020	2b c3		 sub	 eax, ebx
  00022	89 54 24 10	 mov	 DWORD PTR __Old$1$[esp+28], edx
  00026	56		 push	 esi
  00027	3b e8		 cmp	 ebp, eax
  00029	77 3c		 ja	 SHORT $LN2@insert

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

  0002b	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  0002e	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00031	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00033	83 fa 10	 cmp	 edx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00036	72 02		 jb	 SHORT $LN13@insert
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00038	8b 07		 mov	 eax, DWORD PTR [edi]
$LN13@insert:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0003a	2b d9		 sub	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

  0003c	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  0003f	43		 inc	 ebx
  00040	8d 04 2e	 lea	 eax, DWORD PTR [esi+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00043	53		 push	 ebx
  00044	56		 push	 esi
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memmove

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0004b	0f be 44 24 38	 movsx	 eax, BYTE PTR __Ch$[esp+40]
  00050	55		 push	 ebp
  00051	50		 push	 eax
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 _memset
  00058	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2807 : 		}

  0005b	8b c7		 mov	 eax, edi
  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	5f		 pop	 edi
  00060	5b		 pop	 ebx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	c2 0c 00	 ret	 12			; 0000000cH
$LN2@insert:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00067	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0006c	8b c1		 mov	 eax, ecx
  0006e	2b c3		 sub	 eax, ebx
  00070	3b c5		 cmp	 eax, ebp
  00072	0f 82 14 01 00
	00		 jb	 $LN128@insert

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00078	8d 34 2b	 lea	 esi, DWORD PTR [ebx+ebp]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0007b	83 ce 0f	 or	 esi, 15			; 0000000fH
  0007e	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00080	76 04		 jbe	 SHORT $LN47@insert

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00082	8b f1		 mov	 esi, ecx
  00084	eb 18		 jmp	 SHORT $LN46@insert
$LN47@insert:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00086	8b c2		 mov	 eax, edx
  00088	d1 e8		 shr	 eax, 1
  0008a	2b c8		 sub	 ecx, eax
  0008c	3b d1		 cmp	 edx, ecx
  0008e	76 07		 jbe	 SHORT $LN48@insert

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00090	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00095	eb 07		 jmp	 SHORT $LN46@insert
$LN48@insert:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00097	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00099	3b f0		 cmp	 esi, eax
  0009b	0f 42 f0	 cmovb	 esi, eax
$LN46@insert:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0009e	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000a1	8b cf		 mov	 ecx, edi
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
  000a9	8b c8		 mov	 ecx, eax

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;

  000ab	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000ae	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  000b1	89 4c 24 10	 mov	 DWORD PTR __New_ptr$1$[esp+32], ecx
  000b5	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000b8	0f be 44 24 2c	 movsx	 eax, BYTE PTR __Ch$[esp+28]
  000bd	89 44 24 2c	 mov	 DWORD PTR tv627[esp+28], eax
  000c1	8b 44 24 24	 mov	 eax, DWORD PTR __Off$[esp+28]
  000c5	2b d8		 sub	 ebx, eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c7	50		 push	 eax
  000c8	8d 53 01	 lea	 edx, DWORD PTR [ebx+1]
  000cb	8b 5c 24 18	 mov	 ebx, DWORD PTR __Old$1$[esp+36]
  000cf	89 54 24 2c	 mov	 DWORD PTR tv618[esp+32], edx
  000d3	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  000d6	89 74 24 1c	 mov	 DWORD PTR tv619[esp+36], esi
  000da	8d 14 2e	 lea	 edx, DWORD PTR [esi+ebp]
  000dd	89 54 24 20	 mov	 DWORD PTR tv617[esp+36], edx
  000e1	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e4	72 66		 jb	 SHORT $LN25@insert

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000e6	8b 37		 mov	 esi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e8	56		 push	 esi
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000ef	55		 push	 ebp
  000f0	ff 74 24 3c	 push	 DWORD PTR tv627[esp+44]
  000f4	ff 74 24 2c	 push	 DWORD PTR tv619[esp+52]
  000f8	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000fd	ff 74 24 40	 push	 DWORD PTR tv618[esp+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00101	8b 44 24 40	 mov	 eax, DWORD PTR __Off$[esp+56]
  00105	03 c6		 add	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00107	50		 push	 eax
  00108	8b 44 24 3c	 mov	 eax, DWORD PTR tv617[esp+64]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00112	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00113	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00116	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0011c	72 12		 jb	 SHORT $LN102@insert

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0011e	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00121	83 c3 23	 add	 ebx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00124	2b f1		 sub	 esi, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	77 63		 ja	 SHORT $LN99@insert

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0012e	8b f1		 mov	 esi, ecx
$LN102@insert:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00130	53		 push	 ebx
  00131	56		 push	 esi
  00132	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2807 : 		}

  00137	8b 44 24 18	 mov	 eax, DWORD PTR __New_ptr$1$[esp+40]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0013b	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2807 : 		}

  0013e	89 07		 mov	 DWORD PTR [edi], eax
  00140	8b c7		 mov	 eax, edi
  00142	5e		 pop	 esi
  00143	5d		 pop	 ebp
  00144	5f		 pop	 edi
  00145	5b		 pop	 ebx
  00146	83 c4 10	 add	 esp, 16			; 00000010H
  00149	c2 0c 00	 ret	 12			; 0000000cH
$LN25@insert:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0014c	57		 push	 edi
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00153	55		 push	 ebp
  00154	ff 74 24 3c	 push	 DWORD PTR tv627[esp+44]
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 _memset

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0015e	ff 74 24 40	 push	 DWORD PTR tv618[esp+52]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00162	8b 44 24 40	 mov	 eax, DWORD PTR __Off$[esp+56]
  00166	03 c7		 add	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00168	50		 push	 eax
  00169	8d 04 2e	 lea	 eax, DWORD PTR [esi+ebp]
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2807 : 		}

  00172	8b 44 24 34	 mov	 eax, DWORD PTR __New_ptr$1$[esp+68]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00176	83 c4 24	 add	 esp, 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2807 : 		}

  00179	89 07		 mov	 DWORD PTR [edi], eax
  0017b	8b c7		 mov	 eax, edi
  0017d	5e		 pop	 esi
  0017e	5d		 pop	 ebp
  0017f	5f		 pop	 edi
  00180	5b		 pop	 ebx
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	c2 0c 00	 ret	 12			; 0000000cH
$LN127@insert:

; 1832 : 			_Xran();

  00187	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN128@insert:

; 3925 : 			_Xlen();	// result too long

  0018c	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN129@insert:
$LN99@insert:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00191	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN130@insert:
$LN124@insert:
  00196	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__New_ptr$1$ = 8					; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2680 : 		{	// assign _Count * _Ch

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	57		 push	 edi

; 2681 : 		auto& _My_data = this->_Get_data();
; 2682 : 		if (_Count <= _My_data._Myres)

  00006	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+12]
  0000a	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0000d	3b fd		 cmp	 edi, ebp
  0000f	77 29		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00011	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00013	83 fd 10	 cmp	 ebp, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00016	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00018	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0001a	0f be 44 24 18	 movsx	 eax, BYTE PTR __Ch$[esp+12]
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2685 : 			_My_data._Mysize = _Count;

  00022	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00025	e8 00 00 00 00	 call	 _memset
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0002d	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2695 : 		}

  00031	8b c6		 mov	 eax, esi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5d		 pop	 ebp
  00036	5b		 pop	 ebx
  00037	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  0003a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00040	0f 87 99 00 00
	00		 ja	 $LN109@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00046	8b df		 mov	 ebx, edi
  00048	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004b	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00051	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00053	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00058	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0005a	8b cd		 mov	 ecx, ebp
  0005c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00061	d1 e9		 shr	 ecx, 1
  00063	2b c1		 sub	 eax, ecx
  00065	3b e8		 cmp	 ebp, eax
  00067	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00069	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0006e	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00070	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00073	3b d8		 cmp	 ebx, eax
  00075	0f 42 d8	 cmovb	 ebx, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00078	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0007b	8b ce		 mov	 ecx, esi
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00083	0f be 4c 24 18	 movsx	 ecx, BYTE PTR __Ch$[esp+12]
  00088	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  00089	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0008c	8b d8		 mov	 ebx, eax
  0008e	51		 push	 ecx
  0008f	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00090	89 44 24 20	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  00094	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00097	e8 00 00 00 00	 call	 _memset
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0009f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000a3	83 fd 10	 cmp	 ebp, 16			; 00000010H
  000a6	72 27		 jb	 SHORT $LN21@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a8	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000aa	45		 inc	 ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000ab	81 fd 00 10 00
	00		 cmp	 ebp, 4096		; 00001000H
  000b1	72 12		 jb	 SHORT $LN94@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000b3	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000b6	83 c5 23	 add	 ebp, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b9	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000be	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c1	77 17		 ja	 SHORT $LN91@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c3	8b c1		 mov	 eax, ecx
$LN94@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000c5	55		 push	 ebp
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cc	83 c4 08	 add	 esp, 8
$LN21@assign:
  000cf	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2695 : 		}

  000d0	89 1e		 mov	 DWORD PTR [esi], ebx
  000d2	8b c6		 mov	 eax, esi
  000d4	5e		 pop	 esi
  000d5	5d		 pop	 ebp
  000d6	5b		 pop	 ebx
  000d7	c2 08 00	 ret	 8
$LN91@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000da	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN109@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN107@assign:
  000e4	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__New_ptr$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00007	8b 4c 24 18	 mov	 ecx, DWORD PTR __Ptr$[esp+16]
  0000b	8b f1		 mov	 esi, ecx
  0000d	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL114@assign:
  00010	8a 06		 mov	 al, BYTE PTR [esi]
  00012	46		 inc	 esi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL114@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2659 : 		if (_Count <= _My_data._Myres)

  00017	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0001a	2b f2		 sub	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2659 : 		if (_Count <= _My_data._Myres)

  0001c	3b f5		 cmp	 esi, ebp
  0001e	77 25		 ja	 SHORT $LN8@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00020	8b df		 mov	 ebx, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 fd 10	 cmp	 ebp, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00025	72 02		 jb	 SHORT $LN15@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00027	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN15@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00029	56		 push	 esi
  0002a	51		 push	 ecx
  0002b	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  0002c	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0002f	e8 00 00 00 00	 call	 _memmove
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00037	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003b	8b c7		 mov	 eax, edi
  0003d	5f		 pop	 edi

; 2677 : 		}

  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp
  00040	5b		 pop	 ebx
  00041	59		 pop	 ecx
  00042	c2 04 00	 ret	 4
$LN8@assign:

; 3889 : 		if (_New_size > max_size())

  00045	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0004b	0f 87 98 00 00
	00		 ja	 $LN117@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00051	8b de		 mov	 ebx, esi
  00053	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00056	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0005c	76 07		 jbe	 SHORT $LN49@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0005e	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00063	eb 1e		 jmp	 SHORT $LN48@assign
$LN49@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00065	8b cd		 mov	 ecx, ebp
  00067	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0006c	d1 e9		 shr	 ecx, 1
  0006e	2b c1		 sub	 eax, ecx
  00070	3b e8		 cmp	 ebp, eax
  00072	76 07		 jbe	 SHORT $LN50@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00074	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00079	eb 08		 jmp	 SHORT $LN48@assign
$LN50@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0007b	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0007e	3b d8		 cmp	 ebx, eax
  00080	0f 42 d8	 cmovb	 ebx, eax
$LN48@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00083	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00086	8b cf		 mov	 ecx, edi
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0008e	56		 push	 esi
  0008f	ff 74 24 1c	 push	 DWORD PTR __Ptr$[esp+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  00093	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00096	8b d8		 mov	 ebx, eax
  00098	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00099	89 44 24 1c	 mov	 DWORD PTR __New_ptr$1$[esp+32], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  0009d	89 77 10	 mov	 DWORD PTR [edi+16], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000a0	e8 00 00 00 00	 call	 _memcpy
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  000a8	c6 04 33 00	 mov	 BYTE PTR [ebx+esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000ac	83 fd 10	 cmp	 ebp, 16			; 00000010H
  000af	72 27		 jb	 SHORT $LN27@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b1	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000b3	45		 inc	 ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000b4	81 fd 00 10 00
	00		 cmp	 ebp, 4096		; 00001000H
  000ba	72 12		 jb	 SHORT $LN100@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000bc	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000bf	83 c5 23	 add	 ebp, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c2	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c4	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ca	77 18		 ja	 SHORT $LN97@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cc	8b c1		 mov	 eax, ecx
$LN100@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000ce	55		 push	 ebp
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d5	83 c4 08	 add	 esp, 8
$LN27@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000d8	89 1f		 mov	 DWORD PTR [edi], ebx
  000da	8b c7		 mov	 eax, edi
  000dc	5f		 pop	 edi

; 2677 : 		}

  000dd	5e		 pop	 esi
  000de	5d		 pop	 ebp
  000df	5b		 pop	 ebx
  000e0	59		 pop	 ecx
  000e1	c2 04 00	 ret	 4
$LN97@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e4	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN117@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000e9	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN115@assign:
  000ee	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__New_ptr$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	57		 push	 edi

; 2658 : 		auto& _My_data = this->_Get_data();
; 2659 : 		if (_Count <= _My_data._Myres)

  00006	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+12]
  0000a	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0000d	3b fd		 cmp	 edi, ebp
  0000f	77 27		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00011	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00013	83 fd 10	 cmp	 ebp, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00016	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00018	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN9@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0001a	57		 push	 edi
  0001b	ff 74 24 18	 push	 DWORD PTR __Ptr$[esp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  0001f	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00022	53		 push	 ebx
  00023	e8 00 00 00 00	 call	 _memmove
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0002b	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2672 : 		}

  0002f	8b c6		 mov	 eax, esi
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5d		 pop	 ebp
  00034	5b		 pop	 ebx
  00035	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  00038	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0003e	0f 87 97 00 00
	00		 ja	 $LN109@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00044	8b df		 mov	 ebx, edi
  00046	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00049	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0004f	76 07		 jbe	 SHORT $LN43@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00051	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00056	eb 1e		 jmp	 SHORT $LN42@assign
$LN43@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00058	8b cd		 mov	 ecx, ebp
  0005a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0005f	d1 e9		 shr	 ecx, 1
  00061	2b c1		 sub	 eax, ecx
  00063	3b e8		 cmp	 ebp, eax
  00065	76 07		 jbe	 SHORT $LN44@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00067	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0006c	eb 08		 jmp	 SHORT $LN42@assign
$LN44@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0006e	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00071	3b d8		 cmp	 ebx, eax
  00073	0f 42 d8	 cmovb	 ebx, eax
$LN42@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00076	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00079	8b ce		 mov	 ecx, esi
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00081	57		 push	 edi
  00082	ff 74 24 18	 push	 DWORD PTR __Ptr$[esp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  00086	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00089	8b d8		 mov	 ebx, eax
  0008b	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  0008c	89 44 24 24	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  00090	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00093	e8 00 00 00 00	 call	 _memcpy
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0009b	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  0009f	83 fd 10	 cmp	 ebp, 16			; 00000010H
  000a2	72 27		 jb	 SHORT $LN21@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a4	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000a6	45		 inc	 ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000a7	81 fd 00 10 00
	00		 cmp	 ebp, 4096		; 00001000H
  000ad	72 12		 jb	 SHORT $LN94@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000af	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000b2	83 c5 23	 add	 ebp, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b5	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000bd	77 17		 ja	 SHORT $LN91@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000bf	8b c1		 mov	 eax, ecx
$LN94@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000c1	55		 push	 ebp
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c8	83 c4 08	 add	 esp, 8
$LN21@assign:
  000cb	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2672 : 		}

  000cc	89 1e		 mov	 DWORD PTR [esi], ebx
  000ce	8b c6		 mov	 eax, esi
  000d0	5e		 pop	 esi
  000d1	5d		 pop	 ebp
  000d2	5b		 pop	 ebx
  000d3	c2 08 00	 ret	 8
$LN91@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN109@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN107@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Old$1$ = -12						; size = 4
tv604 = -8						; size = 4
tv603 = -4						; size = 4
__New_ptr$1$ = 8					; size = 4
__Count$ = 8						; size = 4
tv613 = 12						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2596 : 		{	// append _Count * _Ch

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 2597 : 		auto& _My_data = this->_Get_data();
; 2598 : 		const size_type _Old_size = _My_data._Mysize;
; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

  00004	8b 5c 24 14	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00010	8b c1		 mov	 eax, ecx
  00012	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00015	2b c5		 sub	 eax, ebp
  00017	89 4c 24 10	 mov	 DWORD PTR __Old$1$[esp+28], ecx
  0001b	3b d8		 cmp	 ebx, eax
  0001d	77 32		 ja	 SHORT $LN2@append

; 2600 : 			{
; 2601 : 			_My_data._Mysize = _Old_size + _Count;

  0001f	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  00022	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00025	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00027	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002a	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  0002e	8d 34 28	 lea	 esi, DWORD PTR [eax+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00031	0f be 44 24 24	 movsx	 eax, BYTE PTR __Ch$[esp+24]
  00036	53		 push	 ebx
  00037	50		 push	 eax
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memset
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2615 : 		}

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	5b		 pop	 ebx
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	c2 08 00	 ret	 8
$LN2@append:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00051	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  00056	8b c2		 mov	 eax, edx
  00058	2b c5		 sub	 eax, ebp
  0005a	3b c3		 cmp	 eax, ebx
  0005c	0f 82 e6 00 00
	00		 jb	 $LN122@append

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00062	8d 34 2b	 lea	 esi, DWORD PTR [ebx+ebp]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00065	83 ce 0f	 or	 esi, 15			; 0000000fH
  00068	3b f2		 cmp	 esi, edx

; 3870 : 		if (_Masked > _Max)

  0006a	76 04		 jbe	 SHORT $LN43@append

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0006c	8b f2		 mov	 esi, edx
  0006e	eb 18		 jmp	 SHORT $LN42@append
$LN43@append:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00070	8b c1		 mov	 eax, ecx
  00072	d1 e8		 shr	 eax, 1
  00074	2b d0		 sub	 edx, eax
  00076	3b ca		 cmp	 ecx, edx
  00078	76 07		 jbe	 SHORT $LN44@append

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0007a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0007f	eb 07		 jmp	 SHORT $LN42@append
$LN44@append:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00081	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00083	3b f0		 cmp	 esi, eax
  00085	0f 42 f0	 cmovb	 esi, eax
$LN42@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00088	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0008b	8b cf		 mov	 ecx, edi
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00093	83 7c 24 10 10	 cmp	 DWORD PTR __Old$1$[esp+28], 16 ; 00000010H
  00098	8d 0c 2b	 lea	 ecx, DWORD PTR [ebx+ebp]
  0009b	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0009e	0f be 4c 24 24	 movsx	 ecx, BYTE PTR __Ch$[esp+24]
  000a3	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000a6	8d 34 28	 lea	 esi, DWORD PTR [eax+ebp]
  000a9	89 4c 24 24	 mov	 DWORD PTR tv613[esp+24], ecx
  000ad	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000b0	89 44 24 20	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax
  000b4	89 74 24 14	 mov	 DWORD PTR tv604[esp+28], esi
  000b8	89 4c 24 18	 mov	 DWORD PTR tv603[esp+28], ecx
  000bc	55		 push	 ebp
  000bd	72 5c		 jb	 SHORT $LN21@append

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000bf	8b 37		 mov	 esi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c1	56		 push	 esi
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000c8	53		 push	 ebx
  000c9	ff 74 24 34	 push	 DWORD PTR tv613[esp+40]
  000cd	ff 74 24 28	 push	 DWORD PTR tv604[esp+48]
  000d1	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  000d6	8b 44 24 30	 mov	 eax, DWORD PTR tv603[esp+52]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000da	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000dd	8b 4c 24 10	 mov	 ecx, DWORD PTR __Old$1$[esp+28]
  000e1	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000e2	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000e5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000eb	72 12		 jb	 SHORT $LN98@append

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000ed	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000f0	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f3	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f5	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000f8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fb	77 50		 ja	 SHORT $LN95@append

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000fd	8b f2		 mov	 esi, edx
$LN98@append:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000ff	51		 push	 ecx
  00100	56		 push	 esi
  00101	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2615 : 		}

  00106	8b 44 24 28	 mov	 eax, DWORD PTR __New_ptr$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0010a	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2615 : 		}

  0010d	89 07		 mov	 DWORD PTR [edi], eax
  0010f	8b c7		 mov	 eax, edi
  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	5d		 pop	 ebp
  00114	5b		 pop	 ebx
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH
  00118	c2 08 00	 ret	 8
$LN21@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0011b	57		 push	 edi
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 _memcpy

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00122	53		 push	 ebx
  00123	ff 74 24 34	 push	 DWORD PTR tv613[esp+40]
  00127	56		 push	 esi
  00128	e8 00 00 00 00	 call	 _memset

; 506  : 		_Left = _Right;

  0012d	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00130	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00133	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2615 : 		}

  00136	8b 44 24 20	 mov	 eax, DWORD PTR __New_ptr$1$[esp+24]
  0013a	89 07		 mov	 DWORD PTR [edi], eax
  0013c	8b c7		 mov	 eax, edi
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	5d		 pop	 ebp
  00141	5b		 pop	 ebx
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	c2 08 00	 ret	 8
$LN122@append:

; 3925 : 			_Xlen();	// result too long

  00148	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN95@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@append:
  00152	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2591 : 		{	// append [_Ptr, <null>)

  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 464  : 		return (_CSTD strlen(_First));

  0000a	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000d	0f 1f 00	 npad	 3
$LL7@append:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@append
  00017	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 2593 : 		}

  00024	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -12						; size = 4
tv597 = -8						; size = 4
tv596 = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1$ = 12					; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2569 : 		{	// append [_Ptr, _Ptr + _Count)

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx

; 2570 : 		auto& _My_data = this->_Get_data();
; 2571 : 		const size_type _Old_size = _My_data._Mysize;
; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

  00004	8b 5c 24 18	 mov	 ebx, DWORD PTR __Count$[esp+12]
  00008	55		 push	 ebp
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00010	8b c1		 mov	 eax, ecx
  00012	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]
  00015	2b c5		 sub	 eax, ebp
  00017	89 4c 24 10	 mov	 DWORD PTR __Old$1$[esp+28], ecx
  0001b	3b d8		 cmp	 ebx, eax
  0001d	77 30		 ja	 SHORT $LN2@append

; 2573 : 			{
; 2574 : 			_My_data._Mysize = _Old_size + _Count;

  0001f	8d 04 2b	 lea	 eax, DWORD PTR [ebx+ebp]
  00022	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 1803 : 		value_type * _Result = _Bx._Buf;

  00025	8b c7		 mov	 eax, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00027	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  0002a	72 02		 jb	 SHORT $LN9@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  0002e	53		 push	 ebx
  0002f	ff 74 24 24	 push	 DWORD PTR __Ptr$[esp+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00033	8d 34 28	 lea	 esi, DWORD PTR [eax+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 _memmove
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0003f	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2588 : 		}

  00043	8b c7		 mov	 eax, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	5b		 pop	 ebx
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  0004f	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  00054	8b c2		 mov	 eax, edx
  00056	2b c5		 sub	 eax, ebp
  00058	3b c3		 cmp	 eax, ebx
  0005a	0f 82 dd 00 00
	00		 jb	 $LN122@append

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  00060	8d 34 2b	 lea	 esi, DWORD PTR [ebx+ebp]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00063	83 ce 0f	 or	 esi, 15			; 0000000fH
  00066	3b f2		 cmp	 esi, edx

; 3870 : 		if (_Masked > _Max)

  00068	76 04		 jbe	 SHORT $LN43@append

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  0006a	8b f2		 mov	 esi, edx
  0006c	eb 18		 jmp	 SHORT $LN42@append
$LN43@append:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0006e	8b c1		 mov	 eax, ecx
  00070	d1 e8		 shr	 eax, 1
  00072	2b d0		 sub	 edx, eax
  00074	3b ca		 cmp	 ecx, edx
  00076	76 07		 jbe	 SHORT $LN44@append

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00078	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0007d	eb 07		 jmp	 SHORT $LN42@append
$LN44@append:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0007f	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00081	3b f0		 cmp	 esi, eax
  00083	0f 42 f0	 cmovb	 esi, eax
$LN42@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00086	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00089	8b cf		 mov	 ecx, edi
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 3933 : 		_My_data._Orphan_all();
; 3934 : 		_My_data._Mysize = _New_size;
; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);
; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00091	83 7c 24 10 10	 cmp	 DWORD PTR __Old$1$[esp+28], 16 ; 00000010H
  00096	8d 0c 2b	 lea	 ecx, DWORD PTR [ebx+ebp]
  00099	89 77 14	 mov	 DWORD PTR [edi+20], esi
  0009c	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0009f	8d 34 28	 lea	 esi, DWORD PTR [eax+ebp]
  000a2	89 44 24 24	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax
  000a6	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a9	89 74 24 14	 mov	 DWORD PTR tv597[esp+28], esi
  000ad	89 4c 24 18	 mov	 DWORD PTR tv596[esp+28], ecx
  000b1	55		 push	 ebp
  000b2	72 5c		 jb	 SHORT $LN21@append

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000b4	8b 37		 mov	 esi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b6	56		 push	 esi
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _memcpy
  000bd	53		 push	 ebx
  000be	ff 74 24 30	 push	 DWORD PTR __Ptr$[esp+40]
  000c2	ff 74 24 28	 push	 DWORD PTR tv597[esp+48]
  000c6	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  000cb	8b 44 24 30	 mov	 eax, DWORD PTR tv596[esp+52]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000cf	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000d2	8b 4c 24 10	 mov	 ecx, DWORD PTR __Old$1$[esp+28]
  000d6	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  000d7	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000da	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e0	72 12		 jb	 SHORT $LN98@append

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000e2	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000e5	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e8	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ea	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000ed	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f0	77 50		 ja	 SHORT $LN95@append

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000f2	8b f2		 mov	 esi, edx
$LN98@append:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000f4	51		 push	 ecx
  000f5	56		 push	 esi
  000f6	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2588 : 		}

  000fb	8b 44 24 2c	 mov	 eax, DWORD PTR __New_ptr$1$[esp+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000ff	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2588 : 		}

  00102	89 07		 mov	 DWORD PTR [edi], eax
  00104	8b c7		 mov	 eax, edi
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5d		 pop	 ebp
  00109	5b		 pop	 ebx
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	c2 08 00	 ret	 8
$LN21@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00110	57		 push	 edi
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 _memcpy
  00117	53		 push	 ebx
  00118	ff 74 24 30	 push	 DWORD PTR __Ptr$[esp+40]
  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 _memcpy

; 506  : 		_Left = _Right;

  00122	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00125	83 c4 18	 add	 esp, 24			; 00000018H

; 506  : 		_Left = _Right;

  00128	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2588 : 		}

  0012b	8b 44 24 24	 mov	 eax, DWORD PTR __New_ptr$1$[esp+24]
  0012f	89 07		 mov	 DWORD PTR [edi], eax
  00131	8b c7		 mov	 eax, edi
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	5d		 pop	 ebp
  00136	5b		 pop	 ebx
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013a	c2 08 00	 ret	 8
$LN122@append:

; 3925 : 			_Xlen();	// result too long

  0013d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN95@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00142	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN119@append:
  00147	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b d0		 mov	 edx, eax

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  0000a	72 02		 jb	 SHORT $LN8@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  0000c	8b 10		 mov	 edx, DWORD PTR [eax]
$LN8@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

  0000e	ff 70 10	 push	 DWORD PTR [eax+16]
  00011	52		 push	 edx
  00012	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2540 : 		}

  00017	c2 04 00	 ret	 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 27		 jb	 SHORT $LN43@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN42@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN39@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN42@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN43@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2461 : 		}

  00044	c3		 ret	 0
$LN39@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	57		 push	 edi

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Right$[esp+8]
  00007	8b d9		 mov	 ebx, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00009	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0000d	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]

; 1815 : 		if (_Large_string_engaged())

  00010	72 02		 jb	 SHORT $LN13@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00012	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN13@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00014	83 fd 10	 cmp	 ebp, 16			; 00000010H
  00017	73 16		 jae	 SHORT $LN2@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00019	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0001c	5f		 pop	 edi
  0001d	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2416 : 		}

  00020	89 6b 10	 mov	 DWORD PTR [ebx+16], ebp
  00023	5d		 pop	 ebp
  00024	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0002b	5b		 pop	 ebx
  0002c	c2 04 00	 ret	 4
$LN2@Construct_:
  0002f	56		 push	 esi

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00030	8b f5		 mov	 esi, ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00032	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00037	83 ce 0f	 or	 esi, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0003a	3b f0		 cmp	 esi, eax
  0003c	0f 47 f0	 cmova	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  0003f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 2412 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);
; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  00048	8d 4d 01	 lea	 ecx, DWORD PTR [ebp+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0004b	89 03		 mov	 DWORD PTR [ebx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0004d	51		 push	 ecx
  0004e	57		 push	 edi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _memcpy
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2416 : 		}

  00058	89 6b 10	 mov	 DWORD PTR [ebx+16], ebp
  0005b	89 73 14	 mov	 DWORD PTR [ebx+20], esi
  0005e	5e		 pop	 esi
  0005f	5f		 pop	 edi
  00060	5d		 pop	 ebp
  00061	5b		 pop	 ebx
  00062	c2 04 00	 ret	 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();
; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())
; 2352 : 			{	// take ownership of _Right's iterators along with its buffer
; 2353 : 			this->_Swap_all(_Right);
; 2354 : 			}
; 2355 : 		else
; 2356 : 			{
; 2357 : 			_Right._Orphan_all();
; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;
; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;
; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00007	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0000a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0000f	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00014	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00022	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2367 : 		}

  00025	c2 08 00	 ret	 8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00007	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0000a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0000f	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00014	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00022	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2326 : 		}

  00025	c2 08 00	 ret	 8
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2315 : 		{	// assign by moving _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2302 : 		if (this != _STD addressof(_Right))

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]

; 2315 : 		{	// assign by moving _Right

  00006	8b f1		 mov	 esi, ecx

; 2302 : 		if (this != _STD addressof(_Right))

  00008	3b f7		 cmp	 esi, edi
  0000a	74 26		 je	 SHORT $LN54@assign

; 2303 : 			{	// different, assign it
; 2304 : 			_Tidy_deallocate();

  0000c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00011	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00017	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  0001c	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00021	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00028	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  0002f	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN54@assign:
  00032	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2318 : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2301 : 		{	// assign by moving _Right

  00000	56		 push	 esi
  00001	57		 push	 edi

; 2302 : 		if (this != _STD addressof(_Right))

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR __Right$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	3b f7		 cmp	 esi, edi
  0000a	74 26		 je	 SHORT $LN50@operator

; 2303 : 			{	// different, assign it
; 2304 : 			_Tidy_deallocate();

  0000c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00011	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00017	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  0001c	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00021	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00028	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  0002f	c6 07 00	 mov	 BYTE PTR [edi], 0
$LN50@operator:
  00032	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2312 : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]

; 1784 : 		_Mysize(0),

  00004	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1785 : 		_Myres(0)

  0000b	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00018	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001d	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00022	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00029	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00030	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2270 : 		}

  00033	8b c1		 mov	 eax, ecx
  00035	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__New_ptr$1$ = 8					; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2201 : 		{	// construct from _Count * _Ch

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	57		 push	 edi

; 2682 : 		if (_Count <= _My_data._Myres)

  00006	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+12]

; 3976 : 		_My_data._Mysize = 0;

  0000a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00011	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00018	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2682 : 		if (_Count <= _My_data._Myres)

  0001b	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  0001e	3b fd		 cmp	 edi, ebp
  00020	77 29		 ja	 SHORT $LN20@basic_stri

; 1803 : 		value_type * _Result = _Bx._Buf;

  00022	8b de		 mov	 ebx, esi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00024	83 fd 10	 cmp	 ebp, 16			; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00027	72 02		 jb	 SHORT $LN27@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00029	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN27@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0002b	0f be 44 24 18	 movsx	 eax, BYTE PTR __Ch$[esp+12]
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2685 : 			_My_data._Mysize = _Count;

  00033	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00036	e8 00 00 00 00	 call	 _memset
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  0003e	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2204 : 		}

  00042	8b c6		 mov	 eax, esi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5d		 pop	 ebp
  00047	5b		 pop	 ebx
  00048	c2 08 00	 ret	 8
$LN20@basic_stri:

; 3889 : 		if (_New_size > max_size())

  0004b	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00051	0f 87 99 00 00
	00		 ja	 $LN128@basic_stri

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00057	8b df		 mov	 ebx, edi
  00059	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0005c	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  00062	76 07		 jbe	 SHORT $LN61@basic_stri

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00064	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00069	eb 1e		 jmp	 SHORT $LN60@basic_stri
$LN61@basic_stri:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0006b	8b cd		 mov	 ecx, ebp
  0006d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00072	d1 e9		 shr	 ecx, 1
  00074	2b c1		 sub	 eax, ecx
  00076	3b e8		 cmp	 ebp, eax
  00078	76 07		 jbe	 SHORT $LN62@basic_stri

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0007a	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0007f	eb 08		 jmp	 SHORT $LN60@basic_stri
$LN62@basic_stri:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00081	8d 04 29	 lea	 eax, DWORD PTR [ecx+ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00084	3b d8		 cmp	 ebx, eax
  00086	0f 42 d8	 cmovb	 ebx, eax
$LN60@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00089	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0008c	8b ce		 mov	 ecx, esi
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00094	0f be 4c 24 18	 movsx	 ecx, BYTE PTR __Ch$[esp+12]
  00099	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3901 : 		_My_data._Myres = _New_capacity;

  0009a	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  0009d	8b d8		 mov	 ebx, eax
  0009f	51		 push	 ecx
  000a0	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  000a1	89 44 24 20	 mov	 DWORD PTR __New_ptr$1$[esp+24], eax

; 3899 : 		_My_data._Orphan_all();
; 3900 : 		_My_data._Mysize = _New_size;

  000a5	89 7e 10	 mov	 DWORD PTR [esi+16], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  000a8	e8 00 00 00 00	 call	 _memset
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 506  : 		_Left = _Right;

  000b0	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000b4	83 fd 10	 cmp	 ebp, 16			; 00000010H
  000b7	72 27		 jb	 SHORT $LN39@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b9	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

  000bb	45		 inc	 ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000bc	81 fd 00 10 00
	00		 cmp	 ebp, 4096		; 00001000H
  000c2	72 12		 jb	 SHORT $LN112@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000c4	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  000c7	83 c5 23	 add	 ebp, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000ca	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000cc	83 c0 fc	 add	 eax, -4			; fffffffcH
  000cf	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d2	77 17		 ja	 SHORT $LN109@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000d4	8b c1		 mov	 eax, ecx
$LN112@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000d6	55		 push	 ebp
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000dd	83 c4 08	 add	 esp, 8
$LN39@basic_stri:
  000e0	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2204 : 		}

  000e1	89 1e		 mov	 DWORD PTR [esi], ebx
  000e3	8b c6		 mov	 eax, esi
  000e5	5e		 pop	 esi
  000e6	5d		 pop	 ebp
  000e7	5b		 pop	 ebx
  000e8	c2 08 00	 ret	 8
$LN109@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000eb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN128@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 3891 : 			_Xlen();	// result too long

  000f0	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN126@basic_stri:
  000f5	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	56		 push	 esi

; 2185 : 		assign(_Ptr);

  00001	ff 74 24 08	 push	 DWORD PTR __Ptr$[esp]
  00005	8b f1		 mov	 esi, ecx

; 3976 : 		_My_data._Mysize = 0;

  00007	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0000e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00015	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2185 : 		assign(_Ptr);

  00018	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2186 : 		}

  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2144 : 		}

  00007	8b c1		 mov	 eax, ecx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00009	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 506  : 		_Left = _Right;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2144 : 		}

  00013	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	57		 push	 edi

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00006	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]

; 1784 : 		_Mysize(0),

  0000a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00018	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0001c	8b 6f 10	 mov	 ebp, DWORD PTR [edi+16]

; 1815 : 		if (_Large_string_engaged())

  0001f	72 02		 jb	 SHORT $LN31@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstddef

; 346  : 	return (_Ptr);

  00021	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN31@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00023	83 fd 10	 cmp	 ebp, 16			; 00000010H
  00026	73 1a		 jae	 SHORT $LN20@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00028	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0002b	bb 0f 00 00 00	 mov	 ebx, 15			; 0000000fH

; 2132 : 		}

  00030	8b c6		 mov	 eax, esi
  00032	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00033	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2132 : 		}

  00036	89 6e 10	 mov	 DWORD PTR [esi+16], ebp
  00039	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	5b		 pop	 ebx
  0003f	c2 04 00	 ret	 4
$LN20@basic_stri:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00042	8b dd		 mov	 ebx, ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00044	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00049	83 cb 0f	 or	 ebx, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0004c	3b d8		 cmp	 ebx, eax
  0004e	0f 47 d8	 cmova	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00051	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate

; 2412 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);
; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0005a	8d 4d 01	 lea	 ecx, DWORD PTR [ebp+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

  0005d	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0005f	51		 push	 ecx
  00060	57		 push	 edi
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memcpy
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring

; 2132 : 		}

  0006a	89 6e 10	 mov	 DWORD PTR [esi+16], ebp
  0006d	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00070	8b c6		 mov	 eax, esi
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5d		 pop	 ebp
  00075	5b		 pop	 ebx
  00076	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2048 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2049 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2043 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2044 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2038 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2039 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2033 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2034 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1928 : 		_Pocma(_Getal(), _Al);
; 1929 : 		}

  00000	c2 04 00	 ret	 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1911 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1911 : 		}

  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1862 : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1846 : 		_Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1830 : 		if (_Mysize < _Off)

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	3b 44 24 04	 cmp	 eax, DWORD PTR __Off$[esp-4]
  00007	72 03		 jb	 SHORT $LN6@Check_offs

; 1833 : 			}
; 1834 : 		}

  00009	c2 04 00	 ret	 4
$LN6@Check_offs:

; 1831 : 			{
; 1832 : 			_Xran();

  0000c	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN4@Check_offs:
  00011	cc		 int	 3
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H
  00004	0f 93 c0	 setae	 al

; 1826 : 		}

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;
; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1821 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1821 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;
; 1804 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1810 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1810 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1787 : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 897  : 		return (_Al);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 898  : 		}

  00004	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000a	72 26		 jb	 SHORT $LN6@allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000c	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0000f	83 ca ff	 or	 edx, -1
  00012	3b c1		 cmp	 eax, ecx
  00014	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001d	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  0001f	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00022	85 c9		 test	 ecx, ecx
  00024	74 21		 je	 SHORT $LN15@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00026	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00029	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0002c	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0002f	c2 04 00	 ret	 4
$LN6@allocate:

; 188  : 	if (_Bytes != 0)

  00032	85 c9		 test	 ecx, ecx
  00034	74 0c		 je	 SHORT $LN7@allocate

; 52   : 		return (::operator new(_Bytes));

  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0003f	c2 04 00	 ret	 4
$LN7@allocate:

; 193  : 	return (nullptr);

  00042	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00044	c2 04 00	 ret	 4
$LN15@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@allocate:
  0004c	cc		 int	 3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00008	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000e	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00010	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00013	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00016	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00018	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001e	77 0f		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00020	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00022	51		 push	 ecx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8

; 993  : 		}

  0002c	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00034	cc		 int	 3
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1204 : 	return (_Len);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Len$[esp-4]

; 1205 : 	}

  00004	c3		 ret	 0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 115  : 	_Bytes += _Non_user_size;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Bytes$[esp-4]

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	83 00 23	 add	 DWORD PTR [eax], 35	; 00000023H
  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00010	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00012	83 c0 fc	 add	 eax, -4			; fffffffcH
  00015	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00018	77 03		 ja	 SHORT $LN7@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0001a	89 11		 mov	 DWORD PTR [ecx], edx

; 134  : 	}

  0001c	c3		 ret	 0
$LN7@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001d	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 52   : 		return (::operator new(_Bytes));

  00000	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 38   : 	return (_Count);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]

; 39   : 	}

  00004	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 54   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 43   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 541  : 		return (EOF);

  00000	83 c8 ff	 or	 eax, -1

; 542  : 		}

  00003	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 531  : 		return (_Left == _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  0000a	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000c	0f 94 c0	 sete	 al

; 532  : 		}

  0000f	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ch$[esp-4]
  00004	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 527  : 		}

  00007	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 506  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  0000a	88 08		 mov	 BYTE PTR [eax], cl

; 507  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

  00000	ff 74 24 08	 push	 DWORD PTR __Count$[esp-4]
  00004	0f be 44 24 10	 movsx	 eax, BYTE PTR __Ch$[esp]
  00009	50		 push	 eax
  0000a	ff 74 24 0c	 push	 DWORD PTR __First$[esp+4]
  0000e	e8 00 00 00 00	 call	 _memset
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH

; 502  : 		}

  00016	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00000	e9 00 00 00 00	 jmp	 _memcpy
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL3@length:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $LL3@length
  0000e	2b c2		 sub	 eax, edx

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 617  : 		return (INT_MAX);

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 618  : 		}

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 85   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 86   :         __std_exception_destroy(&_Data);

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ___std_exception_destroy
  00012	83 c4 04	 add	 esp, 4
  00015	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 0c		 push	 12			; 0000000cH
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 92   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 86   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 87   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 68   :     {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	0f 57 c0	 xorps	 xmm0, xmm0
  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

  00009	50		 push	 eax
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00010	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00014	8b 44 24 0c	 mov	 eax, DWORD PTR __Other$[esp+4]
  00018	83 c0 04	 add	 eax, 4
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ___std_exception_copy
  00021	83 c4 08	 add	 esp, 8

; 70   :     }

  00024	8b c6		 mov	 eax, esi
  00026	5e		 pop	 esi
  00027	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 63   :         _Data._What = _Message;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	0f 57 c0	 xorps	 xmm0, xmm0
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000d	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00012	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 64   :     }

  00015	8b c1		 mov	 eax, ecx
  00017	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -8					; size = 8
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 55   :     {

  00000	83 ec 08	 sub	 esp, 8

; 56   :         __std_exception_data _InitData = { _Message, true };

  00003	8b 44 24 0c	 mov	 eax, DWORD PTR __Message$[esp+4]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 44 24 04	 mov	 DWORD PTR __InitData$[esp+12], eax
  00011	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00014	c6 44 24 08 01	 mov	 BYTE PTR __InitData$[esp+16], 1

; 57   :         __std_exception_copy(&_InitData, &_Data);

  00019	52		 push	 edx
  0001a	8d 44 24 08	 lea	 eax, DWORD PTR __InitData$[esp+16]
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00024	50		 push	 eax
  00025	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00029	e8 00 00 00 00	 call	 ___std_exception_copy
  0002e	83 c4 08	 add	 esp, 8

; 58   :     }

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	83 c4 08	 add	 esp, 8
  00037	c2 04 00	 ret	 4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00000	8d 44 24 10	 lea	 eax, DWORD PTR __Format$[esp]
  00004	50		 push	 eax
  00005	6a 00		 push	 0
  00007	ff 74 24 14	 push	 DWORD PTR __Format$[esp+4]
  0000b	ff 74 24 14	 push	 DWORD PTR __BufferCount$[esp+8]
  0000f	ff 74 24 14	 push	 DWORD PTR __Buffer$[esp+12]
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	ff 70 04	 push	 DWORD PTR [eax+4]
  0001d	83 c9 02	 or	 ecx, 2
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);
; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1954 :         __crt_va_end(_ArgList);
; 1955 :         return _Result;
; 1956 :     }

  00031	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00000	8d 44 24 10	 lea	 eax, DWORD PTR __Format$[esp]
  00004	50		 push	 eax
  00005	6a 00		 push	 0
  00007	ff 74 24 14	 push	 DWORD PTR __Format$[esp+4]
  0000b	ff 74 24 14	 push	 DWORD PTR __BufferCount$[esp+8]
  0000f	ff 74 24 14	 push	 DWORD PTR __Buffer$[esp+12]
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	ff 30		 push	 DWORD PTR [eax]
  0001d	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00022	83 c9 ff	 or	 ecx, -1
  00025	83 c4 1c	 add	 esp, 28			; 0000001cH
  00028	85 c0		 test	 eax, eax
  0002a	0f 48 c1	 cmovs	 eax, ecx

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);
; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1846 :             __crt_va_end(_ArgList);
; 1847 :             return _Result;
; 1848 :         }

  0002d	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

  00000	ff 74 24 14	 push	 DWORD PTR __ArgList$[esp-4]
  00004	ff 74 24 14	 push	 DWORD PTR __Locale$[esp]
  00008	ff 74 24 14	 push	 DWORD PTR __Format$[esp+4]
  0000c	ff 74 24 14	 push	 DWORD PTR __BufferCount$[esp+8]
  00010	ff 74 24 14	 push	 DWORD PTR __Buffer$[esp+12]
  00014	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	ff 30		 push	 DWORD PTR [eax]
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1503 :     }

  0002e	c3		 ret	 0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsnprintf PROC						; COMDAT

; 1440 :         int const _Result = __stdio_common_vsprintf(

  00000	ff 74 24 10	 push	 DWORD PTR __ArgList$[esp-4]
  00004	6a 00		 push	 0
  00006	ff 74 24 14	 push	 DWORD PTR __Format$[esp+4]
  0000a	ff 74 24 14	 push	 DWORD PTR __BufferCount$[esp+8]
  0000e	ff 74 24 14	 push	 DWORD PTR __Buffer$[esp+12]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 02	 or	 ecx, 2
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1445 :     }

  00030	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
;	COMDAT _frexpl
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 4
_frexpl	PROC						; COMDAT

; 864  :         return frexp((double)_X, _Y);

  00000	ff 74 24 0c	 push	 DWORD PTR __Y$[esp-4]
  00004	f2 0f 10 44 24
	08		 movsd	 xmm0, QWORD PTR __X$[esp]
  0000a	83 ec 08	 sub	 esp, 8
  0000d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00012	e8 00 00 00 00	 call	 _frexp
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  :     }

  0001a	c3		 ret	 0
_frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_math.h
;	COMDAT _fabsl
_TEXT	SEGMENT
tv68 = -8						; size = 8
__X$ = 8						; size = 8
_fabsl	PROC						; COMDAT

; 842  :     {

  00000	83 ec 08	 sub	 esp, 8

; 843  :         return fabs((double)_X);

  00003	f2 0f 10 44 24
	0c		 movsd	 xmm0, QWORD PTR __X$[esp+4]
  00009	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00010	f2 0f 11 04 24	 movsd	 QWORD PTR tv68[esp+8], xmm0
  00015	dd 04 24	 fld	 QWORD PTR tv68[esp+8]

; 844  :     }

  00018	83 c4 08	 add	 esp, 8
  0001b	c3		 ret	 0
_fabsl	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.15.26726\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 186  :         (void)_Size;
; 187  :         return _Where;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Where$[esp-4]

; 188  :     }

  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
END
