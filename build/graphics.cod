; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	C:\Dev\Tetris\src\graphics\graphics.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_instance@Graphics@graphics@core@@0PAV123@A	; core::graphics::Graphics::s_instance
_BSS	SEGMENT
?s_instance@Graphics@graphics@core@@0PAV123@A DD 01H DUP (?) ; core::graphics::Graphics::s_instance
_BSS	ENDS
PUBLIC	??0Graphics@graphics@core@@AAE@XZ		; core::graphics::Graphics::Graphics
PUBLIC	?Instance@Graphics@graphics@core@@SAPAV123@XZ	; core::graphics::Graphics::Instance
PUBLIC	?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawFillRect
PUBLIC	?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawRect
PUBLIC	?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText
PUBLIC	?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z ; core::graphics::Graphics::FillBackground
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateTextureFromSurface:PROC
EXTRN	_SDL_SetRenderDrawColor:PROC
EXTRN	_SDL_RenderClear:PROC
EXTRN	_SDL_RenderDrawRect:PROC
EXTRN	_SDL_RenderFillRect:PROC
EXTRN	_SDL_RenderCopy:PROC
EXTRN	_SDL_DestroyTexture:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.cpp
;	COMDAT ?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z
_TEXT	SEGMENT
_t_color$ = 8						; size = 4
?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z PROC ; core::graphics::Graphics::FillBackground, COMDAT
; _this$ = ecx

; 20   :     SDL_SetRenderDrawColor(m_renderer, t_color.r, t_color.g, t_color.b, t_color.a);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_color$[esp-4]
  00004	8b d0		 mov	 edx, eax
  00006	56		 push	 esi
  00007	c1 ea 18	 shr	 edx, 24			; 00000018H
  0000a	8b f1		 mov	 esi, ecx
  0000c	52		 push	 edx
  0000d	8b d0		 mov	 edx, eax
  0000f	c1 ea 10	 shr	 edx, 16			; 00000010H
  00012	52		 push	 edx
  00013	8b d0		 mov	 edx, eax
  00015	c1 ea 08	 shr	 edx, 8
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	ff 36		 push	 DWORD PTR [esi]
  0001c	e8 00 00 00 00	 call	 _SDL_SetRenderDrawColor

; 21   :     SDL_RenderClear(m_renderer);

  00021	ff 36		 push	 DWORD PTR [esi]
  00023	e8 00 00 00 00	 call	 _SDL_RenderClear
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	5e		 pop	 esi

; 22   : }

  0002c	c2 04 00	 ret	 4
?FillBackground@Graphics@graphics@core@@QAEXVColor@3@@Z ENDP ; core::graphics::Graphics::FillBackground
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.cpp
;	COMDAT ?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z
_TEXT	SEGMENT
_color$ = -24						; size = 4
_destRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_t_font$ = 8						; size = 4
_t_text$ = 12						; size = 4
_t_x$ = 16						; size = 4
_t_y$ = 20						; size = 4
_t_alignment$ = 24					; size = 4
_t_color$ = 28						; size = 4
?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z PROC ; core::graphics::Graphics::DrawText, COMDAT
; _this$ = ecx

; 40   : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 14	 mov	 DWORD PTR __$ArrayPad$[esp+24], eax

; 41   :     SDL_Color color = { t_color.r, t_color.g, t_color.b };

  0000e	8b 44 24 30	 mov	 eax, DWORD PTR _t_color$[esp+20]
  00012	8b d0		 mov	 edx, eax
  00014	53		 push	 ebx
  00015	55		 push	 ebp
  00016	56		 push	 esi
  00017	8b 74 24 2c	 mov	 esi, DWORD PTR _t_text$[esp+32]
  0001b	8b e9		 mov	 ebp, ecx
  0001d	88 44 24 0c	 mov	 BYTE PTR _color$[esp+36], al
  00021	57		 push	 edi
  00022	8b 7c 24 2c	 mov	 edi, DWORD PTR _t_font$[esp+36]
  00026	c1 ea 08	 shr	 edx, 8
  00029	c1 e8 10	 shr	 eax, 16			; 00000010H
  0002c	88 54 24 11	 mov	 BYTE PTR _color$[esp+41], dl
  00030	88 44 24 12	 mov	 BYTE PTR _color$[esp+42], al
  00034	c6 44 24 13 00	 mov	 BYTE PTR _color$[esp+43], 0

; 42   :     SDL_Surface *textSurface = TTF_RenderText_Blended(t_font, t_text, color);

  00039	ff 74 24 10	 push	 DWORD PTR _color$[esp+40]
  0003d	56		 push	 esi
  0003e	57		 push	 edi
  0003f	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  00044	8b f8		 mov	 edi, eax

; 43   :     SDL_Texture *textTexture = SDL_CreateTextureFromSurface(m_renderer, textSurface);

  00046	57		 push	 edi
  00047	ff 75 00	 push	 DWORD PTR [ebp]
  0004a	e8 00 00 00 00	 call	 _SDL_CreateTextureFromSurface

; 44   :     
; 45   :     SDL_Rect destRect = { t_x, t_y, textSurface->w, textSurface->h };

  0004f	8b 4c 24 4c	 mov	 ecx, DWORD PTR _t_y$[esp+56]
  00053	8b d8		 mov	 ebx, eax
  00055	8b 74 24 48	 mov	 esi, DWORD PTR _t_x$[esp+56]
  00059	83 c4 14	 add	 esp, 20			; 00000014H

; 46   :     
; 47   :     switch (t_alignment)

  0005c	8b 44 24 3c	 mov	 eax, DWORD PTR _t_alignment$[esp+36]
  00060	89 74 24 14	 mov	 DWORD PTR _destRect$[esp+40], esi
  00064	89 4c 24 18	 mov	 DWORD PTR _destRect$[esp+44], ecx
  00068	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0006b	89 4c 24 1c	 mov	 DWORD PTR _destRect$[esp+48], ecx
  0006f	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00072	89 4c 24 20	 mov	 DWORD PTR _destRect$[esp+52], ecx
  00076	83 e8 00	 sub	 eax, 0
  00079	74 1d		 je	 SHORT $LN4@DrawText
  0007b	83 e8 01	 sub	 eax, 1
  0007e	74 0a		 je	 SHORT $LN5@DrawText
  00080	83 e8 01	 sub	 eax, 1
  00083	75 13		 jne	 SHORT $LN4@DrawText

; 57   :         } break;
; 58   :         
; 59   :         case TEXT_ALIGN_RIGHT:
; 60   :         {
; 61   :             destRect.x = t_x - textSurface->w;

  00085	2b 77 08	 sub	 esi, DWORD PTR [edi+8]
  00088	eb 0a		 jmp	 SHORT $LN8@DrawText
$LN5@DrawText:

; 48   :     {
; 49   :         case TEXT_ALIGN_LEFT:
; 50   :         {
; 51   :             destRect.x = t_x;
; 52   :         } break;
; 53   :         
; 54   :         case TEXT_ALIGN_CENTER:
; 55   :         {
; 56   :             destRect.x = t_x - textSurface->w / 2;

  0008a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0008d	99		 cdq
  0008e	2b c2		 sub	 eax, edx
  00090	d1 f8		 sar	 eax, 1
  00092	2b f0		 sub	 esi, eax
$LN8@DrawText:

; 62   :         } break;
; 63   :     }
; 64   :     
; 65   :     SDL_RenderCopy(m_renderer, textTexture, 0, &destRect);

  00094	89 74 24 14	 mov	 DWORD PTR _destRect$[esp+40], esi
$LN4@DrawText:
  00098	8d 44 24 14	 lea	 eax, DWORD PTR _destRect$[esp+40]
  0009c	50		 push	 eax
  0009d	6a 00		 push	 0
  0009f	53		 push	 ebx
  000a0	ff 75 00	 push	 DWORD PTR [ebp]
  000a3	e8 00 00 00 00	 call	 _SDL_RenderCopy

; 66   :     
; 67   :     SDL_FreeSurface(textSurface);

  000a8	57		 push	 edi
  000a9	e8 00 00 00 00	 call	 _SDL_FreeSurface

; 68   :     SDL_DestroyTexture(textTexture);

  000ae	53		 push	 ebx
  000af	e8 00 00 00 00	 call	 _SDL_DestroyTexture

; 69   : }

  000b4	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+64]
  000b8	83 c4 18	 add	 esp, 24			; 00000018H
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5d		 pop	 ebp
  000be	5b		 pop	 ebx
  000bf	33 cc		 xor	 ecx, esp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	83 c4 18	 add	 esp, 24			; 00000018H
  000c9	c2 18 00	 ret	 24			; 00000018H
?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ENDP ; core::graphics::Graphics::DrawText
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.cpp
;	COMDAT ?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z
_TEXT	SEGMENT
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_t_x$ = 8						; size = 4
_t_y$ = 12						; size = 4
_t_width$ = 16						; size = 4
_t_height$ = 20						; size = 4
_t_color$ = 24						; size = 4
?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z PROC ; core::graphics::Graphics::DrawRect, COMDAT
; _this$ = ecx

; 32   : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax

; 33   :     SDL_Rect rect = { t_x, t_y, t_width, t_height };

  0000e	8b 44 24 18	 mov	 eax, DWORD PTR _t_x$[esp+16]
  00012	89 04 24	 mov	 DWORD PTR _rect$[esp+20], eax
  00015	8b 44 24 1c	 mov	 eax, DWORD PTR _t_y$[esp+16]
  00019	89 44 24 04	 mov	 DWORD PTR _rect$[esp+24], eax
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR _t_width$[esp+16]
  00021	56		 push	 esi
  00022	8b f1		 mov	 esi, ecx
  00024	89 44 24 0c	 mov	 DWORD PTR _rect$[esp+32], eax
  00028	8b 44 24 28	 mov	 eax, DWORD PTR _t_height$[esp+20]
  0002c	89 44 24 10	 mov	 DWORD PTR _rect$[esp+36], eax

; 34   :     SDL_SetRenderDrawColor(m_renderer, t_color.r, t_color.g, t_color.b, t_color.a);

  00030	8b 44 24 2c	 mov	 eax, DWORD PTR _t_color$[esp+20]
  00034	8b c8		 mov	 ecx, eax
  00036	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00039	51		 push	 ecx
  0003a	8b c8		 mov	 ecx, eax
  0003c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0003f	51		 push	 ecx
  00040	8b c8		 mov	 ecx, eax
  00042	c1 e9 08	 shr	 ecx, 8
  00045	51		 push	 ecx
  00046	50		 push	 eax
  00047	ff 36		 push	 DWORD PTR [esi]
  00049	e8 00 00 00 00	 call	 _SDL_SetRenderDrawColor

; 35   :     SDL_RenderDrawRect(m_renderer, &rect);

  0004e	8d 44 24 18	 lea	 eax, DWORD PTR _rect$[esp+44]
  00052	50		 push	 eax
  00053	ff 36		 push	 DWORD PTR [esi]
  00055	e8 00 00 00 00	 call	 _SDL_RenderDrawRect

; 36   : }

  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0005e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00061	5e		 pop	 esi
  00062	33 cc		 xor	 ecx, esp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	83 c4 14	 add	 esp, 20			; 00000014H
  0006c	c2 14 00	 ret	 20			; 00000014H
?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ENDP ; core::graphics::Graphics::DrawRect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.cpp
;	COMDAT ?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z
_TEXT	SEGMENT
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_t_x$ = 8						; size = 4
_t_y$ = 12						; size = 4
_t_width$ = 16						; size = 4
_t_height$ = 20						; size = 4
_t_color$ = 24						; size = 4
?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z PROC ; core::graphics::Graphics::DrawFillRect, COMDAT
; _this$ = ecx

; 25   : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	33 c4		 xor	 eax, esp
  0000a	89 44 24 10	 mov	 DWORD PTR __$ArrayPad$[esp+20], eax

; 26   :     SDL_Rect rect = { t_x, t_y, t_width, t_height };

  0000e	8b 44 24 18	 mov	 eax, DWORD PTR _t_x$[esp+16]
  00012	89 04 24	 mov	 DWORD PTR _rect$[esp+20], eax
  00015	8b 44 24 1c	 mov	 eax, DWORD PTR _t_y$[esp+16]
  00019	89 44 24 04	 mov	 DWORD PTR _rect$[esp+24], eax
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR _t_width$[esp+16]
  00021	56		 push	 esi
  00022	8b f1		 mov	 esi, ecx
  00024	89 44 24 0c	 mov	 DWORD PTR _rect$[esp+32], eax
  00028	8b 44 24 28	 mov	 eax, DWORD PTR _t_height$[esp+20]
  0002c	89 44 24 10	 mov	 DWORD PTR _rect$[esp+36], eax

; 27   :     SDL_SetRenderDrawColor(m_renderer, t_color.r, t_color.g, t_color.b, t_color.a);

  00030	8b 44 24 2c	 mov	 eax, DWORD PTR _t_color$[esp+20]
  00034	8b c8		 mov	 ecx, eax
  00036	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00039	51		 push	 ecx
  0003a	8b c8		 mov	 ecx, eax
  0003c	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0003f	51		 push	 ecx
  00040	8b c8		 mov	 ecx, eax
  00042	c1 e9 08	 shr	 ecx, 8
  00045	51		 push	 ecx
  00046	50		 push	 eax
  00047	ff 36		 push	 DWORD PTR [esi]
  00049	e8 00 00 00 00	 call	 _SDL_SetRenderDrawColor

; 28   :     SDL_RenderFillRect(m_renderer, &rect);

  0004e	8d 44 24 18	 lea	 eax, DWORD PTR _rect$[esp+44]
  00052	50		 push	 eax
  00053	ff 36		 push	 DWORD PTR [esi]
  00055	e8 00 00 00 00	 call	 _SDL_RenderFillRect

; 29   : }

  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+52]
  0005e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00061	5e		 pop	 esi
  00062	33 cc		 xor	 ecx, esp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	83 c4 14	 add	 esp, 20			; 00000014H
  0006c	c2 14 00	 ret	 20			; 00000014H
?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ENDP ; core::graphics::Graphics::DrawFillRect
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.cpp
;	COMDAT ?Instance@Graphics@graphics@core@@SAPAV123@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?Instance@Graphics@graphics@core@@SAPAV123@XZ PROC	; core::graphics::Graphics::Instance, COMDAT

; 9    : {

  00000	51		 push	 ecx

; 10   :     if (!s_instance)

  00001	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_instance@Graphics@graphics@core@@0PAV123@A ; core::graphics::Graphics::s_instance
  00006	85 c0		 test	 eax, eax
  00008	75 12		 jne	 SHORT $LN2@Instance

; 11   :     {
; 12   :         s_instance = new Graphics();

  0000a	6a 0c		 push	 12			; 0000000cH
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4
  00014	89 04 24	 mov	 DWORD PTR $T1[esp+4], eax
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?s_instance@Graphics@graphics@core@@0PAV123@A, eax ; core::graphics::Graphics::s_instance
$LN2@Instance:

; 13   :     }
; 14   :     
; 15   :     return s_instance;
; 16   : }

  0001c	59		 pop	 ecx
  0001d	c3		 ret	 0
?Instance@Graphics@graphics@core@@SAPAV123@XZ ENDP	; core::graphics::Graphics::Instance
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\graphics\graphics.hpp
;	COMDAT ??0Graphics@graphics@core@@AAE@XZ
_TEXT	SEGMENT
??0Graphics@graphics@core@@AAE@XZ PROC			; core::graphics::Graphics::Graphics, COMDAT
; _this$ = ecx

; 27   :             Graphics() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0Graphics@graphics@core@@AAE@XZ ENDP			; core::graphics::Graphics::Graphics
_TEXT	ENDS
END
