; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27030.1 

	TITLE	C:\Dev\Tetris\src\graphics\graphics.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawFillRect
PUBLIC	?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ; core::graphics::Graphics::DrawRect
PUBLIC	?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ; core::graphics::Graphics::DrawText
EXTRN	_SDL_FreeSurface:PROC
EXTRN	_SDL_CreateTextureFromSurface:PROC
EXTRN	_SDL_SetRenderDrawColor:PROC
EXTRN	_SDL_RenderDrawRect:PROC
EXTRN	_SDL_RenderFillRect:PROC
EXTRN	_SDL_RenderCopy:PROC
EXTRN	_SDL_DestroyTexture:PROC
EXTRN	_TTF_RenderText_Blended:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
; Function compile flags: /Odtp
; File c:\dev\tetris\src\graphics\graphics.cpp
_TEXT	SEGMENT
_textTexture$ = -40					; size = 4
_this$ = -36						; size = 4
tv77 = -32						; size = 4
_color$ = -28						; size = 4
_textSurface$ = -24					; size = 4
_destRect$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_t_font$ = 8						; size = 4
_t_text$ = 12						; size = 4
_t_x$ = 16						; size = 4
_t_y$ = 20						; size = 4
_t_alignment$ = 24					; size = 4
_t_color$ = 28						; size = 4
?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z PROC ; core::graphics::Graphics::DrawText
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 23   :     SDL_Color color = { t_color.r, t_color.g, t_color.b };

  00013	8a 45 1c	 mov	 al, BYTE PTR _t_color$[ebp]
  00016	88 45 e4	 mov	 BYTE PTR _color$[ebp], al
  00019	8a 4d 1d	 mov	 cl, BYTE PTR _t_color$[ebp+1]
  0001c	88 4d e5	 mov	 BYTE PTR _color$[ebp+1], cl
  0001f	8a 55 1e	 mov	 dl, BYTE PTR _t_color$[ebp+2]
  00022	88 55 e6	 mov	 BYTE PTR _color$[ebp+2], dl
  00025	33 c0		 xor	 eax, eax
  00027	88 45 e7	 mov	 BYTE PTR _color$[ebp+3], al

; 24   :     SDL_Surface *textSurface = TTF_RenderText_Blended(t_font, t_text, color);

  0002a	8b 4d e4	 mov	 ecx, DWORD PTR _color$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 0c	 mov	 edx, DWORD PTR _t_text$[ebp]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR _t_font$[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _TTF_RenderText_Blended
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	89 45 e8	 mov	 DWORD PTR _textSurface$[ebp], eax

; 25   :     SDL_Texture *textTexture = SDL_CreateTextureFromSurface(m_renderer, textSurface);

  00041	8b 4d e8	 mov	 ecx, DWORD PTR _textSurface$[ebp]
  00044	51		 push	 ecx
  00045	8b 55 dc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _SDL_CreateTextureFromSurface
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 d8	 mov	 DWORD PTR _textTexture$[ebp], eax

; 26   :     
; 27   :     SDL_Rect destRect = { t_x, t_y, textSurface->w, textSurface->h };

  00056	8b 4d 10	 mov	 ecx, DWORD PTR _t_x$[ebp]
  00059	89 4d ec	 mov	 DWORD PTR _destRect$[ebp], ecx
  0005c	8b 55 14	 mov	 edx, DWORD PTR _t_y$[ebp]
  0005f	89 55 f0	 mov	 DWORD PTR _destRect$[ebp+4], edx
  00062	8b 45 e8	 mov	 eax, DWORD PTR _textSurface$[ebp]
  00065	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00068	89 4d f4	 mov	 DWORD PTR _destRect$[ebp+8], ecx
  0006b	8b 55 e8	 mov	 edx, DWORD PTR _textSurface$[ebp]
  0006e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00071	89 45 f8	 mov	 DWORD PTR _destRect$[ebp+12], eax

; 28   :     
; 29   :     switch (t_alignment)

  00074	8b 4d 18	 mov	 ecx, DWORD PTR _t_alignment$[ebp]
  00077	89 4d e0	 mov	 DWORD PTR tv77[ebp], ecx
  0007a	83 7d e0 00	 cmp	 DWORD PTR tv77[ebp], 0
  0007e	74 0e		 je	 SHORT $LN4@DrawText
  00080	83 7d e0 01	 cmp	 DWORD PTR tv77[ebp], 1
  00084	74 10		 je	 SHORT $LN5@DrawText
  00086	83 7d e0 02	 cmp	 DWORD PTR tv77[ebp], 2
  0008a	74 1f		 je	 SHORT $LN6@DrawText
  0008c	eb 29		 jmp	 SHORT $LN2@DrawText
$LN4@DrawText:

; 30   :     {
; 31   :         case TEXT_ALIGN_LEFT:
; 32   :         {
; 33   :             destRect.x = t_x;

  0008e	8b 55 10	 mov	 edx, DWORD PTR _t_x$[ebp]
  00091	89 55 ec	 mov	 DWORD PTR _destRect$[ebp], edx

; 34   :         } break;

  00094	eb 21		 jmp	 SHORT $LN2@DrawText
$LN5@DrawText:

; 35   :         
; 36   :         case TEXT_ALIGN_CENTER:
; 37   :         {
; 38   :             destRect.x = t_x - textSurface->w / 2;

  00096	8b 45 e8	 mov	 eax, DWORD PTR _textSurface$[ebp]
  00099	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0009c	99		 cdq
  0009d	2b c2		 sub	 eax, edx
  0009f	d1 f8		 sar	 eax, 1
  000a1	8b 4d 10	 mov	 ecx, DWORD PTR _t_x$[ebp]
  000a4	2b c8		 sub	 ecx, eax
  000a6	89 4d ec	 mov	 DWORD PTR _destRect$[ebp], ecx

; 39   :         } break;

  000a9	eb 0c		 jmp	 SHORT $LN2@DrawText
$LN6@DrawText:

; 40   :         
; 41   :         case TEXT_ALIGN_RIGHT:
; 42   :         {
; 43   :             destRect.x = t_x - textSurface->w;

  000ab	8b 55 e8	 mov	 edx, DWORD PTR _textSurface$[ebp]
  000ae	8b 45 10	 mov	 eax, DWORD PTR _t_x$[ebp]
  000b1	2b 42 08	 sub	 eax, DWORD PTR [edx+8]
  000b4	89 45 ec	 mov	 DWORD PTR _destRect$[ebp], eax
$LN2@DrawText:

; 44   :         } break;
; 45   :     }
; 46   :     
; 47   :     SDL_RenderCopy(m_renderer, textTexture, 0, &destRect);

  000b7	8d 4d ec	 lea	 ecx, DWORD PTR _destRect$[ebp]
  000ba	51		 push	 ecx
  000bb	6a 00		 push	 0
  000bd	8b 55 d8	 mov	 edx, DWORD PTR _textTexture$[ebp]
  000c0	52		 push	 edx
  000c1	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 _SDL_RenderCopy
  000cc	83 c4 10	 add	 esp, 16			; 00000010H

; 48   :     
; 49   :     SDL_FreeSurface(textSurface);

  000cf	8b 55 e8	 mov	 edx, DWORD PTR _textSurface$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _SDL_FreeSurface
  000d8	83 c4 04	 add	 esp, 4

; 50   :     SDL_DestroyTexture(textTexture);

  000db	8b 45 d8	 mov	 eax, DWORD PTR _textTexture$[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _SDL_DestroyTexture
  000e4	83 c4 04	 add	 esp, 4

; 51   : }

  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 18 00	 ret	 24			; 00000018H
?DrawText@Graphics@graphics@core@@QAEXPAU_TTF_Font@@PBDHHW4TextAlign@23@VColor@3@@Z ENDP ; core::graphics::Graphics::DrawText
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\graphics\graphics.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_t_x$ = 8						; size = 4
_t_y$ = 12						; size = 4
_t_width$ = 16						; size = 4
_t_height$ = 20						; size = 4
_t_color$ = 24						; size = 4
?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z PROC ; core::graphics::Graphics::DrawRect
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 15   :     SDL_Rect rect = { t_x, t_y, t_width, t_height };

  00013	8b 45 08	 mov	 eax, DWORD PTR _t_x$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR _rect$[ebp], eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _t_y$[ebp]
  0001c	89 4d f0	 mov	 DWORD PTR _rect$[ebp+4], ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR _t_width$[ebp]
  00022	89 55 f4	 mov	 DWORD PTR _rect$[ebp+8], edx
  00025	8b 45 14	 mov	 eax, DWORD PTR _t_height$[ebp]
  00028	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax

; 16   :     SDL_SetRenderDrawColor(m_renderer, t_color.r, t_color.g, t_color.b, t_color.a);

  0002b	0f b6 4d 1b	 movzx	 ecx, BYTE PTR _t_color$[ebp+3]
  0002f	51		 push	 ecx
  00030	0f b6 55 1a	 movzx	 edx, BYTE PTR _t_color$[ebp+2]
  00034	52		 push	 edx
  00035	0f b6 45 19	 movzx	 eax, BYTE PTR _t_color$[ebp+1]
  00039	50		 push	 eax
  0003a	0f b6 4d 18	 movzx	 ecx, BYTE PTR _t_color$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _SDL_SetRenderDrawColor
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 17   :     SDL_RenderDrawRect(m_renderer, &rect);

  0004d	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _SDL_RenderDrawRect
  0005c	83 c4 08	 add	 esp, 8

; 18   : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	33 cd		 xor	 ecx, ebp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 14 00	 ret	 20			; 00000014H
?DrawRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ENDP ; core::graphics::Graphics::DrawRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\graphics\graphics.cpp
_TEXT	SEGMENT
_this$ = -24						; size = 4
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_t_x$ = 8						; size = 4
_t_y$ = 12						; size = 4
_t_width$ = 16						; size = 4
_t_height$ = 20						; size = 4
_t_color$ = 24						; size = 4
?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z PROC ; core::graphics::Graphics::DrawFillRect
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 8    :     SDL_Rect rect = { t_x, t_y, t_width, t_height };

  00013	8b 45 08	 mov	 eax, DWORD PTR _t_x$[ebp]
  00016	89 45 ec	 mov	 DWORD PTR _rect$[ebp], eax
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _t_y$[ebp]
  0001c	89 4d f0	 mov	 DWORD PTR _rect$[ebp+4], ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR _t_width$[ebp]
  00022	89 55 f4	 mov	 DWORD PTR _rect$[ebp+8], edx
  00025	8b 45 14	 mov	 eax, DWORD PTR _t_height$[ebp]
  00028	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax

; 9    :     SDL_SetRenderDrawColor(m_renderer, t_color.r, t_color.g, t_color.b, t_color.a);

  0002b	0f b6 4d 1b	 movzx	 ecx, BYTE PTR _t_color$[ebp+3]
  0002f	51		 push	 ecx
  00030	0f b6 55 1a	 movzx	 edx, BYTE PTR _t_color$[ebp+2]
  00034	52		 push	 edx
  00035	0f b6 45 19	 movzx	 eax, BYTE PTR _t_color$[ebp+1]
  00039	50		 push	 eax
  0003a	0f b6 4d 18	 movzx	 ecx, BYTE PTR _t_color$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 _SDL_SetRenderDrawColor
  0004a	83 c4 14	 add	 esp, 20			; 00000014H

; 10   :     SDL_RenderFillRect(m_renderer, &rect);

  0004d	8d 4d ec	 lea	 ecx, DWORD PTR _rect$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00054	8b 02		 mov	 eax, DWORD PTR [edx]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _SDL_RenderFillRect
  0005c	83 c4 08	 add	 esp, 8

; 11   : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	33 cd		 xor	 ecx, ebp
  00064	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 14 00	 ret	 20			; 00000014H
?DrawFillRect@Graphics@graphics@core@@QAEXHHHHVColor@3@@Z ENDP ; core::graphics::Graphics::DrawFillRect
_TEXT	ENDS
END
