; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27030.1 

	TITLE	C:\Dev\Tetris\src\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG30030 DB	'An SDL2 window', 00H
	ORG $+1
$SG30032 DB	'Could not create window: %s', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_wmain
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	_SDL_GetError:PROC
EXTRN	_SDL_CreateWindow:PROC
EXTRN	_SDL_DestroyWindow:PROC
EXTRN	_SDL_Delay:PROC
EXTRN	_SDL_Init:PROC
EXTRN	_SDL_Quit:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File c:\dev\tetris\src\main.cpp
_TEXT	SEGMENT
_window$ = -4						; size = 4
_wmain	PROC

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6    :     SDL_Window *window;                    // Declare a pointer
; 7    :     
; 8    :     SDL_Init(SDL_INIT_VIDEO);              // Initialize SDL2

  00004	6a 20		 push	 32			; 00000020H
  00006	e8 00 00 00 00	 call	 _SDL_Init
  0000b	83 c4 04	 add	 esp, 4

; 9    :     
; 10   :     // Create an application window with the following settings:
; 11   :     window = SDL_CreateWindow(

  0000e	6a 02		 push	 2
  00010	68 e0 01 00 00	 push	 480			; 000001e0H
  00015	68 80 02 00 00	 push	 640			; 00000280H
  0001a	68 00 00 ff 1f	 push	 536805376		; 1fff0000H
  0001f	68 00 00 ff 1f	 push	 536805376		; 1fff0000H
  00024	68 00 00 00 00	 push	 OFFSET $SG30030
  00029	e8 00 00 00 00	 call	 _SDL_CreateWindow
  0002e	83 c4 18	 add	 esp, 24			; 00000018H
  00031	89 45 fc	 mov	 DWORD PTR _window$[ebp], eax

; 12   :         "An SDL2 window",                  // window title
; 13   :         SDL_WINDOWPOS_UNDEFINED,           // initial x position
; 14   :         SDL_WINDOWPOS_UNDEFINED,           // initial y position
; 15   :         640,                               // width, in pixels
; 16   :         480,                               // height, in pixels
; 17   :         SDL_WINDOW_OPENGL                  // flags - see below
; 18   :         );
; 19   :     
; 20   :     // Check that the window was successfully created
; 21   :     if (window == NULL) {

  00034	83 7d fc 00	 cmp	 DWORD PTR _window$[ebp], 0
  00038	75 1a		 jne	 SHORT $LN2@wmain

; 22   :         // In the case that the window could not be made...
; 23   :         printf("Could not create window: %s\n", SDL_GetError());

  0003a	e8 00 00 00 00	 call	 _SDL_GetError
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET $SG30032
  00045	e8 00 00 00 00	 call	 _printf
  0004a	83 c4 08	 add	 esp, 8

; 24   :         return 1;

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	eb 20		 jmp	 SHORT $LN1@wmain
$LN2@wmain:

; 25   :     }
; 26   :     
; 27   :     // The window is open: could enter program loop here (see SDL_PollEvent())
; 28   :     
; 29   :     SDL_Delay(3000);  // Pause execution for 3000 milliseconds, for example

  00054	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  00059	e8 00 00 00 00	 call	 _SDL_Delay
  0005e	83 c4 04	 add	 esp, 4

; 30   :     
; 31   :     // Close and destroy the window
; 32   :     SDL_DestroyWindow(window);

  00061	8b 45 fc	 mov	 eax, DWORD PTR _window$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 _SDL_DestroyWindow
  0006a	83 c4 04	 add	 esp, 4

; 33   :     
; 34   :     // Clean up
; 35   :     SDL_Quit();

  0006d	e8 00 00 00 00	 call	 _SDL_Quit

; 36   :     return 0;

  00072	33 c0		 xor	 eax, eax
$LN1@wmain:

; 37   : }

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 fc	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  0000f	51		 push	 ecx
  00010	6a 00		 push	 0
  00012	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00015	52		 push	 edx
  00016	6a 01		 push	 1
  00018	e8 00 00 00 00	 call	 ___acrt_iob_func
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 __vfprintf_l
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  0002c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  00033	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	51		 push	 ecx
  0001c	8b 10		 mov	 edx, DWORD PTR [eax]
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  00024	83 c4 18	 add	 esp, 24			; 00000018H

; 644  :     }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
