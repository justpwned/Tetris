; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	C:\Dev\Tetris\src\stats.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?FRAMES_PER_DROP@@3QBHB DD 030H				; FRAMES_PER_DROP
	DD	02bH
	DD	026H
	DD	021H
	DD	01cH
	DD	017H
	DD	012H
	DD	0dH
	DD	08H
	DD	06H
	DD	05H
	DD	05H
	DD	05H
	DD	04H
	DD	04H
	DD	04H
	DD	03H
	DD	03H
	DD	03H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	01H
CONST	ENDS
PUBLIC	?ComputePoints@Stats@gameplay@core@@QAEXXZ	; core::gameplay::Stats::ComputePoints
PUBLIC	?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ; core::gameplay::Stats::GetLinesForNextLevel
PUBLIC	?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ	; core::gameplay::Stats::GetTimeToNextDrop
PUBLIC	__real@3c888889
EXTRN	__fltused:DWORD
;	COMDAT __real@3c888889
CONST	SEGMENT
__real@3c888889 DD 03c888889r			; 0.0166667
CONST	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.cpp
;	COMDAT ?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ
_TEXT	SEGMENT
tv141 = -4						; size = 4
?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ PROC	; core::gameplay::Stats::GetTimeToNextDrop, COMDAT
; _this$ = ecx

; 39   : {

  00000	51		 push	 ecx

; 40   :     i32 level = MIN(29, m_level);

  00001	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00004	b9 1d 00 00 00	 mov	 ecx, 29			; 0000001dH
  00009	3b c1		 cmp	 eax, ecx
  0000b	0f 4f c1	 cmovg	 eax, ecx
  0000e	66 0f 6e 04 85
	00 00 00 00	 movd	 xmm0, DWORD PTR ?FRAMES_PER_DROP@@3QBHB[eax*4]

; 41   :     f32 targetSecondsPerFrame = 1.0f / 60.0f;
; 42   :     return FRAMES_PER_DROP[level] * targetSecondsPerFrame;

  00017	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0001a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c888889
  00022	f3 0f 11 04 24	 movss	 DWORD PTR tv141[esp+4], xmm0
  00027	d9 04 24	 fld	 DWORD PTR tv141[esp+4]

; 43   : }

  0002a	59		 pop	 ecx
  0002b	c3		 ret	 0
?GetTimeToNextDrop@Stats@gameplay@core@@QAEMXZ ENDP	; core::gameplay::Stats::GetTimeToNextDrop
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.cpp
;	COMDAT ?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ
_TEXT	SEGMENT
?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ PROC	; core::gameplay::Stats::GetLinesForNextLevel, COMDAT
; _this$ = ecx

; 73   :     i32 firstLevelUpLimit = MIN(m_startLevel * 10 + 10, 

  00000	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00003	56		 push	 esi
  00004	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  00009	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0000c	03 c0		 add	 eax, eax
  0000e	8d 50 ce	 lea	 edx, DWORD PTR [eax-50]
  00011	3b d6		 cmp	 edx, esi
  00013	8b ca		 mov	 ecx, edx
  00015	0f 4c ce	 cmovl	 ecx, esi
  00018	83 c0 0a	 add	 eax, 10			; 0000000aH
  0001b	3b c1		 cmp	 eax, ecx
  0001d	7c 07		 jl	 SHORT $LN6@GetLinesFo
  0001f	3b d6		 cmp	 edx, esi
  00021	0f 4c d6	 cmovl	 edx, esi

; 74   :                                 MAX(100, (m_startLevel * 10 - 50)));
; 75   :     
; 76   :     if (m_level == m_startLevel)
; 77   :     {
; 78   :         return firstLevelUpLimit;
; 79   :     }
; 80   :     
; 81   :     i32 diff = m_level - m_startLevel;
; 82   :     return firstLevelUpLimit;

  00024	8b c2		 mov	 eax, edx
$LN6@GetLinesFo:

; 83   : }

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?GetLinesForNextLevel@Stats@gameplay@core@@QAEHXZ ENDP	; core::gameplay::Stats::GetLinesForNextLevel
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\stats.cpp
;	COMDAT ?ComputePoints@Stats@gameplay@core@@QAEXXZ
_TEXT	SEGMENT
?ComputePoints@Stats@gameplay@core@@QAEXXZ PROC		; core::gameplay::Stats::ComputePoints, COMDAT
; _this$ = ecx

; 47   :     switch (m_lineCount)

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	48		 dec	 eax
  00004	83 f8 03	 cmp	 eax, 3
  00007	77 42		 ja	 SHORT $LN2@ComputePoi
  00009	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@ComputePoi[eax*4]
$LN4@ComputePoi:

; 48   :     {
; 49   :         case 1:
; 50   :         {
; 51   :             m_points += 40 * (m_level + 1);

  00010	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00013	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00016	8d 04 c5 28 00
	00 00		 lea	 eax, DWORD PTR [eax*8+40]

; 67   :         } break;
; 68   :     }
; 69   : }

  0001d	01 41 28	 add	 DWORD PTR [ecx+40], eax
  00020	c3		 ret	 0
$LN5@ComputePoi:

; 52   :         } break;
; 53   :         
; 54   :         case 2:
; 55   :         {
; 56   :             m_points += 100 * (m_level + 1);

  00021	6b 41 20 64	 imul	 eax, DWORD PTR [ecx+32], 100
  00025	83 c0 64	 add	 eax, 100		; 00000064H

; 67   :         } break;
; 68   :     }
; 69   : }

  00028	01 41 28	 add	 DWORD PTR [ecx+40], eax
  0002b	c3		 ret	 0
$LN6@ComputePoi:

; 57   :         } break;
; 58   :         
; 59   :         case 3: 
; 60   :         {
; 61   :             m_points += 300 * (m_level + 1);

  0002c	69 41 20 2c 01
	00 00		 imul	 eax, DWORD PTR [ecx+32], 300
  00033	05 2c 01 00 00	 add	 eax, 300		; 0000012cH

; 67   :         } break;
; 68   :     }
; 69   : }

  00038	01 41 28	 add	 DWORD PTR [ecx+40], eax
  0003b	c3		 ret	 0
$LN7@ComputePoi:

; 62   :         } break;
; 63   :         
; 64   :         case 4:
; 65   :         {
; 66   :             m_points += 1200 * (m_level + 1);

  0003c	69 41 20 b0 04
	00 00		 imul	 eax, DWORD PTR [ecx+32], 1200
  00043	05 b0 04 00 00	 add	 eax, 1200		; 000004b0H

; 67   :         } break;
; 68   :     }
; 69   : }

  00048	01 41 28	 add	 DWORD PTR [ecx+40], eax
$LN2@ComputePoi:
  0004b	c3		 ret	 0
$LN11@ComputePoi:
  0004c	00 00 00 00	 DD	 $LN4@ComputePoi
  00050	00 00 00 00	 DD	 $LN5@ComputePoi
  00054	00 00 00 00	 DD	 $LN6@ComputePoi
  00058	00 00 00 00	 DD	 $LN7@ComputePoi
?ComputePoints@Stats@gameplay@core@@QAEXXZ ENDP		; core::gameplay::Stats::ComputePoints
_TEXT	ENDS
END
