; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TITLE	C:\Dev\Tetris\src\tetromino.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?TETROMINO_1@@3QBEB DB 00H				; TETROMINO_1
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?TETROMINO_2@@3QBEB DB 02H				; TETROMINO_2
	DB	02H
	DB	02H
	DB	02H
?TETROMINO_3@@3QBEB DB 00H				; TETROMINO_3
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	03H
	DB	00H
	DB	03H
	DB	00H
	ORG $+3
?TETROMINO_4@@3QBEB DB 00H				; TETROMINO_4
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?TETROMINO_5@@3QBEB DB 05H				; TETROMINO_5
	DB	05H
	DB	00H
	DB	00H
	DB	05H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?TETROMINO_6@@3QBEB DB 06H				; TETROMINO_6
	DB	00H
	DB	00H
	DB	06H
	DB	06H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
?TETROMINO_7@@3QBEB DB 00H				; TETROMINO_7
	DB	00H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	??0Tetromino@gameplay@core@@QAE@PBEH@Z		; core::gameplay::Tetromino::Tetromino
PUBLIC	?GetValue@Tetromino@gameplay@core@@QAEEHHH@Z	; core::gameplay::Tetromino::GetValue
PUBLIC	?s_tetrominos@Tetromino@gameplay@core@@2QBV123@B ; core::gameplay::Tetromino::s_tetrominos
_DATA	SEGMENT
?s_tetrominos@Tetromino@gameplay@core@@2QBV123@B DD FLAT:?TETROMINO_1@@3QBEB ; core::gameplay::Tetromino::s_tetrominos
	DD	04H
	DD	FLAT:?TETROMINO_2@@3QBEB
	DD	02H
	DD	FLAT:?TETROMINO_3@@3QBEB
	DD	03H
	DD	FLAT:?TETROMINO_4@@3QBEB
	DD	03H
	DD	FLAT:?TETROMINO_5@@3QBEB
	DD	03H
	DD	FLAT:?TETROMINO_6@@3QBEB
	DD	03H
	DD	FLAT:?TETROMINO_7@@3QBEB
	DD	03H
_DATA	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\tetromino.cpp
;	COMDAT ?GetValue@Tetromino@gameplay@core@@QAEEHHH@Z
_TEXT	SEGMENT
_t_row$ = 8						; size = 4
_t_col$ = 12						; size = 4
_t_rotation$ = 16					; size = 4
?GetValue@Tetromino@gameplay@core@@QAEEHHH@Z PROC	; core::gameplay::Tetromino::GetValue, COMDAT
; _this$ = ecx

; 59   :     switch (t_rotation % 4)

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _t_rotation$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0000c	79 05		 jns	 SHORT $LN9@GetValue
  0000e	48		 dec	 eax
  0000f	83 c8 fc	 or	 eax, -4			; fffffffcH
  00012	40		 inc	 eax
$LN9@GetValue:
  00013	83 f8 03	 cmp	 eax, 3
  00016	77 65		 ja	 SHORT $LN2@GetValue
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@GetValue[eax*4]
$LN4@GetValue:

; 60   :     {
; 61   :         case 0:
; 62   :         {
; 63   :             return m_data[t_row * m_side + t_col];

  0001f	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00022	0f af 4c 24 08	 imul	 ecx, DWORD PTR _t_row$[esp]
  00027	8b 44 24 0c	 mov	 eax, DWORD PTR _t_col$[esp]
  0002b	03 0e		 add	 ecx, DWORD PTR [esi]
  0002d	5e		 pop	 esi
  0002e	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 83   : }

  00031	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetValue:

; 64   :         } break;
; 65   :         
; 66   :         case 1:
; 67   :         {
; 68   :             return m_data[(m_side - t_col - 1) * m_side + t_row];

  00034	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00037	2b 54 24 0c	 sub	 edx, DWORD PTR _t_col$[esp]
  0003b	8b 44 24 08	 mov	 eax, DWORD PTR _t_row$[esp]
  0003f	4a		 dec	 edx
  00040	0f af 56 04	 imul	 edx, DWORD PTR [esi+4]
  00044	03 16		 add	 edx, DWORD PTR [esi]
  00046	5e		 pop	 esi
  00047	8a 04 02	 mov	 al, BYTE PTR [edx+eax]

; 83   : }

  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN6@GetValue:

; 69   :         } break;
; 70   :         
; 71   :         case 2:
; 72   :         {
; 73   :             return m_data[(m_side - t_row - 1) * m_side + (m_side - t_col - 1)];

  0004d	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00050	2b 54 24 08	 sub	 edx, DWORD PTR _t_row$[esp]
  00054	0f af 56 04	 imul	 edx, DWORD PTR [esi+4]
  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	5e		 pop	 esi
  0005b	2b 54 24 08	 sub	 edx, DWORD PTR _t_col$[esp-4]
  0005f	8a 44 02 ff	 mov	 al, BYTE PTR [edx+eax-1]

; 83   : }

  00063	c2 0c 00	 ret	 12			; 0000000cH
$LN7@GetValue:

; 74   :         } break;
; 75   :         
; 76   :         case 3:
; 77   :         {
; 78   :             return m_data[t_col * m_side + (m_side - t_row - 1)];

  00066	8b 4c 24 0c	 mov	 ecx, DWORD PTR _t_col$[esp]
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	41		 inc	 ecx
  0006d	0f af 4e 04	 imul	 ecx, DWORD PTR [esi+4]
  00071	5e		 pop	 esi
  00072	2b 4c 24 04	 sub	 ecx, DWORD PTR _t_row$[esp-4]
  00076	8a 44 01 ff	 mov	 al, BYTE PTR [ecx+eax-1]

; 83   : }

  0007a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetValue:

; 79   :         } break;
; 80   :     }
; 81   :     
; 82   :     return 0;

  0007d	32 c0		 xor	 al, al
  0007f	5e		 pop	 esi

; 83   : }

  00080	c2 0c 00	 ret	 12			; 0000000cH
  00083	90		 npad	 1
$LN11@GetValue:
  00084	00 00 00 00	 DD	 $LN4@GetValue
  00088	00 00 00 00	 DD	 $LN5@GetValue
  0008c	00 00 00 00	 DD	 $LN6@GetValue
  00090	00 00 00 00	 DD	 $LN7@GetValue
?GetValue@Tetromino@gameplay@core@@QAEEHHH@Z ENDP	; core::gameplay::Tetromino::GetValue
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\dev\tetris\src\tetromino.hpp
;	COMDAT ??0Tetromino@gameplay@core@@QAE@PBEH@Z
_TEXT	SEGMENT
_t_data$ = 8						; size = 4
_t_side$ = 12						; size = 4
??0Tetromino@gameplay@core@@QAE@PBEH@Z PROC		; core::gameplay::Tetromino::Tetromino, COMDAT
; _this$ = ecx

; 24   :                 : m_data(t_data), m_side(t_side) {}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _t_data$[esp-4]
  00004	89 01		 mov	 DWORD PTR [ecx], eax
  00006	8b 44 24 08	 mov	 eax, DWORD PTR _t_side$[esp-4]
  0000a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000d	8b c1		 mov	 eax, ecx
  0000f	c2 08 00	 ret	 8
??0Tetromino@gameplay@core@@QAE@PBEH@Z ENDP		; core::gameplay::Tetromino::Tetromino
_TEXT	ENDS
END
